{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the handbook on NGS data analysis! Once this was the library of manuals I used in work. Then I decided to deploy a website to make it more convenient to use. The best part of it that now anyone can use it too! Please enjoy!</p> <p></p> <p>Typical workflow of NGS data analysis</p>"},{"location":"#05-16s-amplicon-analysis","title":"05 16S Amplicon Analysis \ud83e\uddeb","text":"<p>In the 16S amplicon analysis chapter there is an introductory guide on conducting analysis using <code>DADA2</code> followed by two interesting examples of \"real-life\" analysis pipeline with the data from studies on Crohn's and Parkinson's diseases.</p>"},{"location":"#04-phylogenetics","title":"04 Phylogenetics \ud83c\udf33","text":"<p>In the Phylogenetics chapter there is a complete pipeline of simple research in phylogenetics, from working with NCBI (and other databases) to building trees, evaluating them, and getting some worthwhile results.</p>"},{"location":"#03-whole-genome-and-pangenome-analyses","title":"03 Whole Genome and Pangenome Analyses \ud83e\uddec","text":"<p>In the Whole (pan)genome chapter there is a pipeline of whole genome and pangenome analyses with <code>PanACoTA</code> pipeline which includes genomes filtering with <code>mash</code>, annotating with <code>prokka</code> &amp; <code>prodigal</code>, pangenome building with <code>mmseqs</code>, core genomes alignment with <code>mafft</code> and finally building phylogenetic tree with <code>iq-tree</code>.</p>"},{"location":"#02-genomic-variation-analysis","title":"02 Genomic Variation Analysis \ud83d\udd2c","text":"<p>In the Genomic Variation Analysis chapter there is a detailed guide how to conduct studies on Variant Calling using <code>fastqc</code>, <code>trimmomatic</code>, <code>bwa</code>, <code>samtools</code>, <code>abra2</code>, <code>bcftools</code>, <code>snpEff</code> &amp; <code>SnpSift</code>.</p>"},{"location":"#01-quality-control-of-raw-data","title":"01 Quality Control of Raw Data \ud83d\udc8e","text":"<p>In the Quality Control chapter there is a detailed guide how to conduct quality control of raw data using <code>fastqc</code> and <code>trimmomatic</code>.</p>"},{"location":"01_Quality_Control/","title":"I. Quality Control of Raw Data","text":"<p>This chapter contains a manual on quality control of raw data in NGS data analysis.</p> <p>We will use the <code>FastQC</code> tool to assess the quality of the raw sequencing data.</p>"},{"location":"01_Quality_Control/#instruction","title":"Instruction","text":"Question <p>Where to get the data?</p> <p>Download it from GitHub repository:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/01_Quality_Control.zip\n</code></pre> <pre><code>unzip 01_Quality_Control.zip &amp;&amp; rm -rf 01_Quality_Control.zip\n</code></pre> <p>These are the data we will be working with:</p> <pre><code>Archive:  01_Quality_Control.zip\n   creating: adapters/\n  inflating: adapters/NexteraPE-PE.fa  \n   creating: data/\n  inflating: data/Sample_1.R1.fastq.gz  \n  inflating: data/Sample_1.R2.fastq.gz\n</code></pre> <p>You can run commands below in your <code>terminal</code>. But if you want to write a convenient to read laboratory journal you can use <code>Jupyter Notebook</code>. In that case write <code>!</code> in the beggining of each cell to make it understand <code>bash</code> commands.</p> <p>To recreate any of the steps of this manual please install:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/envs/qc.yaml\n</code></pre> <pre><code>conda env create -f qc.yaml\n</code></pre> <p>And of cource do not forget to activate the envinronment!</p> <pre><code>conda activate qc\n</code></pre>"},{"location":"01_Quality_Control/#step-1-run-fastqc-on-a-pair-end-sequencing-data","title":"Step 1: Run <code>FastQC</code> on a pair-end sequencing data","text":"<p>Note that the folder for output results must exist, i.e. it should be created before running the program. What problems are observed? How can they be fixed?</p> <p>Input</p> <pre><code>mkdir fastqc_results\n</code></pre> <p>Input</p> <pre><code>fastqc \\\n    data/Sample_1.R1.fastq.gz \\\n    data/Sample_1.R2.fastq.gz \\\n    -o fastqc_results\n</code></pre> <p>Output</p> <pre><code>application/gzip\nStarted analysis of Sample_1.R1.fastq.gz\napplication/gzip\nAnalysis complete for Sample_1.R1.fastq.gz\nStarted analysis of Sample_1.R2.fastq.gz\nAnalysis complete for Sample_1.R2.fastq.gz\n</code></pre> <p>Results are saved to: - <code>Sample_1.R1_fastqc.html</code> - <code>Sample_1.R2_fastqc.html</code> Please open them in any web browser you use:</p>"},{"location":"01_Quality_Control/#per-base-sequence-quality","title":"Per base sequence quality","text":"Forward read Reverse read <p>We have boxplot graphs that show the quality by read length. We can see that for file <code>R2</code> the quality is expectedly worse than for <code>R1</code>. Reverse reads are worse a little bit, this is normal because reverse reads are timed to read later than forward reads, but similarly we can see that towards the end of the read the quality drops, which is expected.</p>"},{"location":"01_Quality_Control/#per-tile-sequence-quality","title":"Per tile sequence quality","text":"Forward read Reverse read <p>These graphs show the quality per individual \"tile\". There is a slight inequality here, but in fact we have too few readings to notice any trends here. The main thing is that if there are any clear situations in this graph, where there is a group of \"tiles\" that are doing badly and they are next to each other, this is a reason to suspect that we have a problem with the flow cell (it is dirty).</p>"},{"location":"01_Quality_Control/#per-sequence-quality-scores","title":"Per sequence quality scores","text":"Forward read Reverse read <p>Quality averaged per read. Distribution: more than 100 reads with normal quality, but there is also a rather large tail with reads that average poor quality.</p>"},{"location":"01_Quality_Control/#per-base-sequence-content","title":"Per base sequence content","text":"Forward read Reverse read <p>Distribution of nucleotide composition by position in the read. It can be seen that there are no sharp peaks here, although the graph looks rather broken. This is also because we have few reads. If we had more reads, the graph would probably be more or less even. The main thing is that there are no sharp big peaks.</p>"},{"location":"01_Quality_Control/#per-sequence-gc-content","title":"Per sequence GC content","text":"Forward read Reverse read <p>GC composition distribution. It is used to analyse contamination. If we had 2 peaks on the graph, we could say that we probably have contaminants because we have organisms with different GC compositions present. It may appear that there is also a second peak in our data, but we have little data and the \"little extra hump\" merges with the main hump, meaning it is not a full-fledged second peak.</p>"},{"location":"01_Quality_Control/#adapter-content","title":"Adapter Content","text":"Forward read Reverse read <p>This is the biggest problem in our data. We see that we have a fairly early increase in the percentages of adapter content in the reads. In the most recent nucleotide reads, over 60% of the reads contain adapters. This tells us that the library was short, so the adapters got in. This means that we have a very short piece of DNA, and when we read it, we have read it all, and then we go on to read the adapters.</p>"},{"location":"01_Quality_Control/#step-2-cleaning-reads-from-adapters-and-low-quality-sequences-with-trimmomatic","title":"Step 2: Cleaning reads from adapters and low quality sequences with <code>Trimmomatic</code>","text":"<p>What do the options mean? How many readings remain after <code>Trimmomatic</code> data processing?</p> <p>Input</p> <pre><code>mkdir trimmomatic_result\n</code></pre> <p>Input</p> <pre><code>trimmomatic PE -phred33 data/Sample_1.R1.fastq.gz data/Sample_1.R2.fastq.gz \\\n    trimmomatic_result/Sample_1.R1.paired.fastq.gz \\\n    trimmomatic_result/Sample_1.R1.unpaired.fastq.gz \\\n    trimmomatic_result/Sample_1.R2.paired.fastq.gz \\\n    trimmomatic_result/Sample_1.R2.unpaired.fastq.gz \\\n    ILLUMINACLIP:'adapters/NexteraPE-PE.fa':2:30:10 \\\n    LEADING:10 TRAILING:10 SLIDINGWINDOW:4:10 MINLEN:50\n</code></pre> <p>Output</p> <pre><code>TrimmomaticPE: Started with arguments:\n -phred33 data/Sample_1.R1.fastq.gz data/Sample_1.R2.fastq.gz trimmomatic_result/Sample_1.R1.paired.fastq.gz trimmomatic_result/Sample_1.R1.unpaired.fastq.gz trimmomatic_result/Sample_1.R2.paired.fastq.gz trimmomatic_result/Sample_1.R2.unpaired.fastq.gz ILLUMINACLIP:adapters/NexteraPE-PE.fa:2:30:10 LEADING:10 TRAILING:10 SLIDINGWINDOW:4:10 MINLEN:50\nMultiple cores found: Using 4 threads\nUsing PrefixPair: 'AGATGTGTATAAGAGACAG' and 'AGATGTGTATAAGAGACAG'\nUsing Long Clipping Sequence: 'GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG'\nUsing Long Clipping Sequence: 'TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG'\nUsing Long Clipping Sequence: 'CTGTCTCTTATACACATCTCCGAGCCCACGAGAC'\nUsing Long Clipping Sequence: 'CTGTCTCTTATACACATCTGACGCTGCCGACGA'\nILLUMINACLIP: Using 1 prefix pairs, 4 forward/reverse sequences, 0 forward only sequences, 0 reverse only sequences\nInput Read Pairs: 767 Both Surviving: 213 (27.77%) Forward Only Surviving: 428 (55.80%) Reverse Only Surviving: 10 (1.30%) Dropped: 116 (15.12%)\nTrimmomaticPE: Completed successfully\n</code></pre> <p>Let's break down the options:</p> <ul> <li><code>trimmomatic</code>: Invokes the Trimmomatic tool.</li> <li><code>PE</code>: Indicates that the input data consists of paired-end reads.</li> <li><code>-phred33</code>: Specifies that the quality scores are in Phred+33 encoding. Phred+33 is a common format for quality scores in Illumina sequencing data.</li> <li><code>data/Sample_1.R1.fastq.gz</code> and <code>data/Sample_1.R2.fastq.gz</code>: Input files containing the paired-end reads for Sample_1. <code>.fastq.gz</code> indicates that the files are in FASTQ format and compressed with gzip.</li> <li><code>trimmomatic_result/Sample_1.R1.paired.fastq.gz</code> and <code>trimmomatic_result/Sample_1.R1.unpaired.fastq.gz</code>: Output files containing the paired and unpaired reads for Sample_1 from read 1.</li> <li><code>trimmomatic_result/Sample_1.R2.paired.fastq.gz</code> and <code>trimmomatic_result/Sample_1.R2.unpaired.fastq.gz</code>: Output files containing the paired and unpaired reads for Sample_1 from read 2.</li> <li><code>ILLUMINACLIP:'adapters/NexteraPE-PE.fa':2:30:10</code>: Adapter clipping. This option specifies the adapter sequences file (<code>NexteraPE-PE.fa</code>), followed by seed mismatches (2), palindrome clip threshold (30), and simple clip threshold (10). It trims adapters and other illumina-specific sequences from the reads.</li> <li><code>LEADING:10</code>: Removes low-quality bases from the start of the reads if they have a quality score lower than 10.</li> <li><code>TRAILING:10</code>: Removes low-quality bases from the end of the reads if they have a quality score lower than 10.</li> <li><code>SLIDINGWINDOW:4:10</code>: Performs a sliding window trimming. It scans the read with a 4-base wide window, cutting when the average quality per base drops below 10.</li> <li><code>MINLEN:50</code>: Discards reads that are shorter than 50 bases after trimming.</li> </ul> <p>In summary, this command takes paired-end FASTQ files as input, trims adapters, removes low-quality bases, and performs quality-based trimming to improve the overall quality of the reads. It then separates the trimmed reads into paired and unpaired files for both reads 1 and 2.</p> <p>Input Read Pairs: 767 - Both Surviving: 213 (27.77%) - Forward Only Surviving: 428 (55.80%) - Reverse Only Surviving: 10 (1.30%) - Dropped: 116 (15.12%)</p>"},{"location":"01_Quality_Control/#adapter-trimming","title":"Adapter trimming","text":"<ul> <li>Cleaning data from adapters and low quality bases at the ends can improve the results of some programmes</li> <li>It is critical to clean raw data before genome assembly</li> <li>There are a number of tools for removing adapters:<ul> <li><code>Trimmomatic</code></li> <li><code>fastp</code></li> <li><code>BBduk</code></li> <li><code>cutadapt</code></li> <li>...</li> </ul> </li> </ul> <p>NB! When searching for genetic variants using modern tools, removing adapters may not only not improve but even worsen the results of the analysis!</p>"},{"location":"01_Quality_Control/#step-3-evaluate-the-data-quality-after-trimming-using-fastqc","title":"Step 3: Evaluate the data quality after trimming using <code>FastQC</code>","text":"<p>Did the data quality get better after trimming?</p> <p>Input</p> <pre><code>fastqc trimmomatic_result/Sample_1.*paired.fastq.gz -o fastqc_results\n</code></pre> <p>Output</p> <pre><code>application/gzip\napplication/gzip\napplication/gzip\napplication/gzip\nStarted analysis of Sample_1.R1.paired.fastq.gz\nAnalysis complete for Sample_1.R1.paired.fastq.gz\nStarted analysis of Sample_1.R1.unpaired.fastq.gz\nAnalysis complete for Sample_1.R1.unpaired.fastq.gz\nStarted analysis of Sample_1.R2.paired.fastq.gz\nAnalysis complete for Sample_1.R2.paired.fastq.gz\nStarted analysis of Sample_1.R2.unpaired.fastq.gz\nAnalysis complete for Sample_1.R2.unpaired.fastq.gz\n</code></pre> <p>Results are saved to: - <code>Sample_1.R1.paired_fastqc.html</code> - <code>Sample_1.R1.unpaired_fastqc.html</code> - <code>Sample_2.R1.paired_fastqc.html</code> - <code>Sample_2.R1.unpaired_fastqc.html</code> Please open them in any web browser you use:</p>"},{"location":"01_Quality_Control/#per-base-sequence-quality_1","title":"Per base sequence quality","text":"Forward paired read Forward unpaired read Reverse paired read Reverse unpaired read <p>Paired readings are those that have a pair preserved. There are far fewer of them.</p>"},{"location":"01_Quality_Control/#adapter-content_1","title":"Adapter Content","text":"Forward paired read Forward unpaired read Reverse paired read Reverse unpaired read <p>But if we look at the adapter content chart, we see that adapters have been trimmed, there are hardly any left.</p>"},{"location":"02_Variant_Calling/","title":"II. Genomic Variation Analysis","text":"<p>This chapter contains a manual on variant calling pipeline. Details are described here only on how to conduct such a study from the time the data are downloaded to the time the genetic variant annotation files are received. The biological interpretation of the results is not given here.</p>"},{"location":"02_Variant_Calling/#instruction","title":"Instruction","text":"<p>You can run commands below in your <code>terminal</code>. But if you want to write a convenient to read laboratory journal you can use <code>Jupyter Notebook</code>. In that case write <code>!</code> in the beggining of each cell to make it understand <code>bash</code> commands.</p> <p>To recreate any of the steps of this manual please install:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/envs/varcall.yaml\n</code></pre> <pre><code>conda env create -f varcall.yaml\n</code></pre> <p>And of cource do not forget to activate the envinronment!</p> <pre><code>conda activate varcall\n</code></pre>"},{"location":"02_Variant_Calling/#step-1-downloading-the-data","title":"Step 1: Downloading the data","text":"<p>First we create all the directories to store the data</p> <p>Input</p> <pre><code>mkdir data/\nmkdir data/reference/\n</code></pre> <p>Download reference file from NCBI in FASTA format</p> <p>Input</p> <pre><code>efetch -db nuccore -id U00096.3 -format fasta &gt; data/reference/EcoliK12MG1655.fa\n</code></pre> <p>Download reference file from NCBI in GB format</p> <p>Input</p> <pre><code>efetch -db nuccore -id U00096.3 -format gb &gt; data/reference/EcoliK12MG1655.gb\n</code></pre> <p>Download sample FASTQ files from SRA via <code>sra-tools</code></p> <p>Input</p> <pre><code>fastq-dump -v --split-3 --gzip SRR17909485 -O data\n</code></pre> <p>Output</p> <pre><code>Preference setting is: Prefer SRA Normalized Format files with full base quality scores if available.\nSRR17909485 is an SRA Normalized Format file with full base quality scores.\nRead 1251776 spots for SRR17909485\nWritten 1251776 spots for SRR17909485\n</code></pre>"},{"location":"02_Variant_Calling/#step-2-check-the-reads-quality","title":"Step 2: Check the reads quality","text":"<p>Input</p> <pre><code>mkdir data/fastqc_results/\n</code></pre> <p>Input</p> <pre><code>fastqc data/SRR17909485_*.fastq.gz -o data/fastqc_results\n</code></pre> <p>Output</p> <p>Results are saved to: - <code>SRR17909485_1_fastqc.html</code> - <code>SRR17909485_2_fastqc.html</code> Please open them in any web browser you use:</p>"},{"location":"02_Variant_Calling/#per-base-sequence-quality","title":"Per base sequence quality","text":"Forward read Reverse read"},{"location":"02_Variant_Calling/#per-sequence-quality-scores","title":"Per sequence quality scores","text":"Forward read Reverse read"},{"location":"02_Variant_Calling/#per-base-sequence-content","title":"Per base sequence content","text":"Forward read Reverse read"},{"location":"02_Variant_Calling/#per-sequence-gc-content","title":"Per sequence GC content","text":"Forward read Reverse read"},{"location":"02_Variant_Calling/#adapter-content","title":"Adapter Content","text":"Forward read Reverse read <p>The main problem is <code>Per base sequence quality</code>. So we will solve it using <code>trimmomatic</code>. Details on <code>trimmomatic</code> and QC in the Quality Control chapter.</p>"},{"location":"02_Variant_Calling/#step-3-trim-low-quality-bases","title":"Step 3: Trim low-quality bases","text":"<p>Input</p> <pre><code>mkdir data/trimmed/\n</code></pre> <p>Input</p> <pre><code>trimmomatic PE -threads 2 data/SRR17909485_1.fastq.gz data/SRR17909485_2.fastq.gz \\\n    data/trimmed/SRR17909485_R1.trim.paired.fastq.gz data/trimmed/SRR17909485_R1.trim.unpaired.fastq.gz \\\n    data/trimmed/SRR17909485_R2.trim.paired.fastq.gz data/trimmed/SRR17909485_R2.trim.unpaired.fastq.gz \\\n    LEADING:22 TRAILING:22 SLIDINGWINDOW:6:22 MINLEN:32\n</code></pre> <p>Output</p> <pre><code>TrimmomaticPE: Started with arguments:\n -threads 2 data/SRR17909485_1.fastq.gz data/SRR17909485_2.fastq.gz data/trimmed/SRR17909485_R1.trim.paired.fastq.gz data/trimmed/SRR17909485_R1.trim.unpaired.fastq.gz data/trimmed/SRR17909485_R2.trim.paired.fastq.gz data/trimmed/SRR17909485_R2.trim.unpaired.fastq.gz LEADING:22 TRAILING:22 SLIDINGWINDOW:6:22 MINLEN:32\nQuality encoding detected as phred33\nInput Read Pairs: 1251776 Both Surviving: 1205173 (96.28%) Forward Only Surviving: 34920 (2.79%) Reverse Only Surviving: 2954 (0.24%) Dropped: 8729 (0.70%)\nTrimmomaticPE: Completed successfully\n</code></pre> <ul> <li><code>LEADING:22</code>: Removes low-quality bases from the start of the reads if they have a quality score lower than 22.</li> <li><code>TRAILING:22</code>: Removes low-quality bases from the end of the reads if they have a quality score lower than 22.</li> <li><code>SLIDINGWINDOW:6:22</code>: Performs a sliding window trimming. It scans the read with a 6-base wide window, cutting when the average quality per base drops below 22.</li> <li><code>MINLEN:32</code>: Discards reads that are shorter than 32 bases after trimming.</li> </ul> <p>Input Read Pairs: 1251776 - Both Surviving: 1205173 (96.28%) - Forward Only Surviving: 34920 (2.79%) - Reverse Only Surviving: 2954 (0.24%) - Dropped: 8729 (0.70%)</p>"},{"location":"02_Variant_Calling/#step-4-index-reference","title":"Step 4: Index reference","text":"<p>Input</p> <pre><code>bwa index data/reference/EcoliK12MG1655.fa\n</code></pre>"},{"location":"02_Variant_Calling/#step-5-align-to-reference","title":"Step 5: Align to reference","text":"<p>Input</p> <pre><code>mkdir data/bam/\n</code></pre> <p>Input</p> <pre><code>bwa mem -t 2 -R '@RG\\tID:1' \\\n    data/reference/EcoliK12MG1655.fa \\\n    data/trimmed/SRR17909485_R1.trim.paired.fastq.gz \\\n    data/trimmed/SRR17909485_R2.trim.paired.fastq.gz \\\n    | samtools view -b &gt; data/bam/EcoliK12MG1655.SRR17909485.unsorted.bam\n</code></pre>"},{"location":"02_Variant_Calling/#step-6-sort-alignment","title":"Step 6: Sort alignment","text":"<p>Input</p> <pre><code>samtools sort --threads 2 data/bam/EcoliK12MG1655.SRR17909485.unsorted.bam &gt; \\\n    data/bam/EcoliK12MG1655.SRR17909485.sorted.bam\n</code></pre>"},{"location":"02_Variant_Calling/#step-7-make-bam-index","title":"Step 7: Make bam index","text":"<p>Input</p> <pre><code>samtools index data/bam/EcoliK12MG1655.SRR17909485.sorted.bam\n</code></pre>"},{"location":"02_Variant_Calling/#step-8-realign-indels","title":"Step 8: Realign indels","text":"<p>Input</p> <pre><code>abra2 --threads 2 --mad 100 --mbq 24 \\\n    --ref data/reference/EcoliK12MG1655.fa \\\n    --in data/bam/EcoliK12MG1655.SRR17909485.sorted.bam \\\n    --out data/bam/EcoliK12MG1655.SRR17909485.final.bam\n</code></pre>"},{"location":"02_Variant_Calling/#step-9-index-final-bam","title":"Step 9: Index final bam","text":"<p>Input</p> <pre><code>samtools index data/bam/EcoliK12MG1655.SRR17909485.final.bam\n</code></pre>"},{"location":"02_Variant_Calling/#step-10-call-variants","title":"Step 10: Call variants","text":"<p>Input</p> <pre><code>mkdir data/vcf/\n</code></pre> <p>Input</p> <pre><code>bcftools mpileup -Ou --max-depth 5000 \\\n    -f data/reference/EcoliK12MG1655.fa \\\n    data/bam/EcoliK12MG1655.SRR17909485.final.bam \\\n    | bcftools call -mv --ploidy 1 -Ov \\\n    -o data/vcf/EcoliK12MG1655.SRR17909485.called.bcftools.vcf\n</code></pre> <p><code>Mpileup</code> is actually a slightly different representation of alignment. <code>Mpileup</code> takes very simple things, it takes the number of reads aligned to each point and for each position in the reference genome it counts statistics - how many letters match the reference, how many mismatch, how many insertions, deletions.</p> <p>Unfortunately <code>bcftools</code> is not multithreaded. If we do re-alignment with <code>abra2</code>, <code>bcftools</code> will work a bit faster.</p> <p><code>bcftools --ploidy 1</code> - we tell the program that we have a haploid genome.</p> <p><code>vcf</code> = variant call format. This is actually a list of variations in a clear text format: chromosome, position, which letter was replaced by which letter, the quality of how much <code>bcftools</code> considers it important, some set of certain statistics (frequency of letter occurrence, etc.).</p> <p>Input</p> <pre><code>tail data/vcf/EcoliK12MG1655.SRR17909485.called.bcftools.vcf\n</code></pre> <p>Output</p> <pre><code>U00096.3    3110421 .   C   A   225.417 .   DP=41;VDB=0.454064;SGB=-0.692914;MQSBZ=1.45774;MQ0F=0;AC=1;AN=1;DP4=0,0,8,17;MQ=59  GT:PL   1:255,0\nU00096.3    3560455 .   C   CG  225.417 .   INDEL;IDV=82;IMF=1;DP=82;VDB=0.0327919;SGB=-0.693147;MQSBZ=0;BQBZ=0.885506;MQ0F=0;AC=1;AN=1;DP4=0,0,37,45;MQ=60 GT:PL   1:255,0\nU00096.3    4093770 .   C   T   225.417 .   DP=141;VDB=0.961761;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,39,52;MQ=60  GT:PL   1:255,0\nU00096.3    4161248 .   G   T   225.417 .   DP=117;VDB=0.400301;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,36,33;MQ=60  GT:PL   1:255,0\nU00096.3    4164123 .   C   G   225.417 .   DP=130;VDB=0.322528;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,32,44;MQ=60  GT:PL   1:255,0\nU00096.3    4296380 .   AC  ACGC    228.422 .   INDEL;IDV=98;IMF=0.989899;DP=99;VDB=8.47905e-05;SGB=-0.693147;RPBZ=-1.71529;MQBZ=1.83497;MQSBZ=-2.15139;BQBZ=-1.59515;SCBZ=-9.8995;MQ0F=0;AC=1;AN=1;DP4=0,1,47,51;MQ=54 GT:PL   1:255,0\nU00096.3    4474834 .   A   G   225.417 .   DP=81;VDB=0.345282;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,21,26;MQ=60   GT:PL   1:255,0\nU00096.3    4585480 .   G   A   225.417 .   DP=70;VDB=0.996826;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,20,26;MQ=60   GT:PL   1:255,0\nU00096.3    4602509 .   C   T   225.417 .   DP=136;VDB=0.843259;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,42,41;MQ=60  GT:PL   1:255,0\nU00096.3    4616669 .   G   T   225.417 .   DP=88;VDB=0.58582;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,25,31;MQ=60    GT:PL   1:255,0\n</code></pre>"},{"location":"02_Variant_Calling/#step-11-make-snpeff-database","title":"Step 11: Make snpEff database","text":"<p><code>snpEff</code> has a database of already well-sequenced, annotated genomes of many known organisms. <code>snpEff</code> loads the annotations and while annotating the <code>vcf</code> file, it checks which gene each particular variation falls into which position. By E. coli snpEff has over 3500 databases, which is a lot. The best way to handle this is to make your own database.</p> <p>Input</p> <pre><code>mkdir -p data/EcoliK12MG1655/\n</code></pre> <p>Input</p> <pre><code>cp data/reference/EcoliK12MG1655.gb data/EcoliK12MG1655/genes.gbk\n</code></pre> <p>Input</p> <pre><code>echo \"EcoliK12MG1655.genome : EcoliK12MG1655\\nEcoliK12MG1655.chromosomes : EcoliK12MG1655.gb\\nEcoliK12MG1655.codonTable : Standard\" \\\n    &gt; snpEff.config\n</code></pre> <p>Input</p> <pre><code>cat snpEff.config\n</code></pre> <p>Output</p> <pre><code>EcoliK12MG1655.genome : EcoliK12MG1655\nEcoliK12MG1655.chromosomes : EcoliK12MG1655.gb\nEcoliK12MG1655.codonTable : Standard\n</code></pre> <ol> <li>Line 1 - under what name snpEff will know this reference genome (<code>EcoliK12MG1655</code>)</li> <li>Line 2 - the chromosomes from this genome (all contigs with all annotations) will be in the file <code>EcoliK12MG1655.gb</code></li> <li>Line 3 - standard genetic code table</li> </ol> <p>Input</p> <pre><code>snpEff build -c snpEff.config -genbank EcoliK12MG1655\n</code></pre> <p>Output</p> <pre><code>00:00:00 Codon table 'Standard' for genome 'EcoliK12MG1655'\n    Protein check:  EcoliK12MG1655  OK: 4298    Not found: 17   Errors: 0   Error percentage: 0.0%\n</code></pre>"},{"location":"02_Variant_Calling/#step-12-annotate-variants","title":"Step 12: Annotate variants","text":"<p>Input</p> <pre><code>snpEff ann -v EcoliK12MG1655  \\\n    data/vcf/EcoliK12MG1655.SRR17909485.called.bcftools.vcf &gt; \\\n    data/vcf/EcoliK12MG1655.SRR17909485.annotated.vcf\n</code></pre> <p>Input</p> <pre><code>mv snpEff_genes.txt EcoliK12MG1655.SRR17909485.snpEff_genes.txt\n</code></pre> <p>Input</p> <pre><code>mv snpEff_summary.html EcoliK12MG1655.SRR17909485.snpEff_summary.html\n</code></pre> <p>Input</p> <pre><code>tail data/vcf/EcoliK12MG1655.SRR17909485.annotated.vcf\n</code></pre> <p>Output</p> <pre><code>U00096.3    3110421 .   C   A   225.417 .   DP=41;VDB=0.454064;SGB=-0.692914;MQSBZ=1.45774;MQ0F=0;AC=1;AN=1;DP4=0,0,8,17;MQ=59;ANN=A|upstream_gene_variant|MODIFIER|speC|b2965|transcript|b2965|protein_coding||c.-1266G&gt;T|||||1266|,A|upstream_gene_variant|MODIFIER|yqgH|b4785|transcript|b4785|protein_coding||c.-1021G&gt;T|||||1021|,A|upstream_gene_variant|MODIFIER|yqhJ|b4786|transcript|b4786|protein_coding||c.-845C&gt;A|||||845|WARNING_TRANSCRIPT_NO_START_CODON,A|downstream_gene_variant|MODIFIER|mltC|b2963|transcript|b2963|protein_coding||c.*4909C&gt;A|||||4909|,A|downstream_gene_variant|MODIFIER|nupG|b2964|transcript|b2964|protein_coding||c.*3451C&gt;A|||||3451|,A|downstream_gene_variant|MODIFIER|yqgA|b2966|transcript|b2966|protein_coding||c.*161C&gt;A|||||161|WARNING_TRANSCRIPT_NO_START_CODON,A|downstream_gene_variant|MODIFIER|yghD|b2968|transcript|b2968|protein_coding||c.*169G&gt;T|||||169|,A|downstream_gene_variant|MODIFIER|yghE|b2969|transcript|b2969|protein_coding||c.*707G&gt;T|||||707|WARNING_TRANSCRIPT_NO_START_CODON,A|downstream_gene_variant|MODIFIER|yghF|b2970|transcript|b2970|protein_coding||c.*1633G&gt;T|||||1633|WARNING_TRANSCRIPT_NO_START_CODON,A|downstream_gene_variant|MODIFIER|yghG|b2971|transcript|b2971|protein_coding||c.*2646G&gt;T|||||2646|,A|downstream_gene_variant|MODIFIER|pppA|b2972|transcript|b2972|protein_coding||c.*3122G&gt;T|||||3122|,A|downstream_gene_variant|MODIFIER|yghJ|b4466|transcript|b4466|protein_coding||c.*4129G&gt;T|||||4129|,A|intragenic_variant|MODIFIER|pheV|b2967|gene_variant|b2967|||n.3110421C&gt;A||||||   GT:PL   1:255,0\nU00096.3    3560455 .   C   CG  225.417 .   INDEL;IDV=82;IMF=1;DP=82;VDB=0.0327919;SGB=-0.693147;MQSBZ=0;BQBZ=0.885506;MQ0F=0;AC=1;AN=1;DP4=0,0,37,45;MQ=60;ANN=CG|upstream_gene_variant|MODIFIER|rtcA|b4475|transcript|b4475|protein_coding||c.-3607_-3606insC|||||3607|,CG|upstream_gene_variant|MODIFIER|rtcB|b3421|transcript|b3421|protein_coding||c.-2377_-2376insC|||||2377|,CG|upstream_gene_variant|MODIFIER|glpD|b3426|transcript|b3426|protein_coding||c.-1558_-1557insG|||||1557|,CG|downstream_gene_variant|MODIFIER|malT|b3418|transcript|b3418|protein_coding||c.*4665_*4666insG|||||4666|,CG|downstream_gene_variant|MODIFIER|rtcR|b3422|transcript|b3422|protein_coding||c.*589_*590insG|||||590|,CG|downstream_gene_variant|MODIFIER|glpG|b3424|transcript|b3424|protein_coding||c.*166_*167insC|||||166|,CG|downstream_gene_variant|MODIFIER|glpE|b3425|transcript|b3425|protein_coding||c.*1041_*1042insC|||||1041|,CG|downstream_gene_variant|MODIFIER|yzgL|b3427|transcript|b3427|protein_coding||c.*3268_*3269insC|||||3268|,CG|downstream_gene_variant|MODIFIER|glgP|b3428|transcript|b3428|protein_coding||c.*3678_*3679insC|||||3678|,CG|intragenic_variant|MODIFIER|glpR|b3423|gene_variant|b3423|||n.3560455_3560456insG||||||  GT:PL   1:255,0\nU00096.3    4093770 .   C   T   225.417 .   DP=141;VDB=0.961761;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,39,52;MQ=60;ANN=T|missense_variant|MODERATE|rhaD|b3902|transcript|b3902|protein_coding|1/1|c.503G&gt;A|p.Gly168Asp|503/825|503/825|168/274||,T|upstream_gene_variant|MODIFIER|frvR|b3897|transcript|b3897|protein_coding||c.-3915G&gt;A|||||3915|,T|upstream_gene_variant|MODIFIER|frvX|b3898|transcript|b3898|protein_coding||c.-2845G&gt;A|||||2845|,T|upstream_gene_variant|MODIFIER|frvB|b3899|transcript|b3899|protein_coding||c.-1404G&gt;A|||||1404|,T|upstream_gene_variant|MODIFIER|frvA|b3900|transcript|b3900|protein_coding||c.-947G&gt;A|||||947|,T|upstream_gene_variant|MODIFIER|rhaM|b3901|transcript|b3901|protein_coding||c.-332G&gt;A|||||332|,T|upstream_gene_variant|MODIFIER|rhaS|b3905|transcript|b3905|protein_coding||c.-3966C&gt;T|||||3966|,T|upstream_gene_variant|MODIFIER|rhaR|b3906|transcript|b3906|protein_coding||c.-4876C&gt;T|||||4876|WARNING_TRANSCRIPT_NO_START_CODON,T|downstream_gene_variant|MODIFIER|rhaA|b3903|transcript|b3903|protein_coding||c.*953G&gt;A|||||953|,T|downstream_gene_variant|MODIFIER|rhaB|b3904|transcript|b3904|protein_coding||c.*2209G&gt;A|||||2209|   GT:PL   1:255,0\nU00096.3    4161248 .   G   T   225.417 .   DP=117;VDB=0.400301;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,36,33;MQ=60;ANN=T|missense_variant|MODERATE|fabR|b3963|transcript|b3963|protein_coding|1/1|c.182G&gt;T|p.Gly61Val|182/705|182/705|61/234||,T|upstream_gene_variant|MODIFIER|sthA|b3962|transcript|b3962|protein_coding||c.-458C&gt;A|||||458|,T|upstream_gene_variant|MODIFIER|yijD|b3964|transcript|b3964|protein_coding||c.-523G&gt;T|||||523|,T|upstream_gene_variant|MODIFIER|btuB|b3966|transcript|b3966|protein_coding||c.-2391G&gt;T|||||2391|,T|upstream_gene_variant|MODIFIER|murI|b3967|transcript|b3967|protein_coding||c.-4180G&gt;T|||||4180|,T|downstream_gene_variant|MODIFIER|argB|b3959|transcript|b3959|protein_coding||c.*4459G&gt;T|||||4459|,T|downstream_gene_variant|MODIFIER|argH|b3960|transcript|b3960|protein_coding||c.*3025G&gt;T|||||3025|,T|downstream_gene_variant|MODIFIER|oxyR|b3961|transcript|b3961|protein_coding||c.*1841G&gt;T|||||1841|,T|downstream_gene_variant|MODIFIER|trmA|b3965|transcript|b3965|protein_coding||c.*922C&gt;A|||||922|    GT:PL   1:255,0\nU00096.3    4164123 .   C   G   225.417 .   DP=130;VDB=0.322528;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,32,44;MQ=60;ANN=G|missense_variant|MODERATE|btuB|b3966|transcript|b3966|protein_coding|1/1|c.485C&gt;G|p.Ala162Gly|485/1845|485/1845|162/614||,G|upstream_gene_variant|MODIFIER|sthA|b3962|transcript|b3962|protein_coding||c.-3333G&gt;C|||||3333|,G|upstream_gene_variant|MODIFIER|trmA|b3965|transcript|b3965|protein_coding||c.-853G&gt;C|||||853|,G|upstream_gene_variant|MODIFIER|murI|b3967|transcript|b3967|protein_coding||c.-1305C&gt;G|||||1305|,G|downstream_gene_variant|MODIFIER|oxyR|b3961|transcript|b3961|protein_coding||c.*4716C&gt;G|||||4716|,G|downstream_gene_variant|MODIFIER|fabR|b3963|transcript|b3963|protein_coding||c.*2352C&gt;G|||||2352|,G|downstream_gene_variant|MODIFIER|yijD|b3964|transcript|b3964|protein_coding||c.*1993C&gt;G|||||1993|  GT:PL   1:255,0\nU00096.3    4296380 .   AC  ACGC    228.422 .   INDEL;IDV=98;IMF=0.989899;DP=99;VDB=8.47905e-05;SGB=-0.693147;RPBZ=-1.71529;MQBZ=1.83497;MQSBZ=-2.15139;BQBZ=-1.59515;SCBZ=-9.8995;MQ0F=0;AC=1;AN=1;DP4=0,1,47,51;MQ=54;ANN=ACGC|downstream_gene_variant|MODIFIER|nrfD|b4073|transcript|b4073|protein_coding||c.*4949_*4950insGC|||||4950|,ACGC|downstream_gene_variant|MODIFIER|nrfE|b4074|transcript|b4074|protein_coding||c.*3211_*3212insGC|||||3212|WARNING_TRANSCRIPT_NO_START_CODON,ACGC|downstream_gene_variant|MODIFIER|nrfF|b4075|transcript|b4075|protein_coding||c.*2835_*2836insGC|||||2836|,ACGC|downstream_gene_variant|MODIFIER|nrfG|b4076|transcript|b4076|protein_coding||c.*2242_*2243insGC|||||2243|,ACGC|downstream_gene_variant|MODIFIER|gltP|b4077|transcript|b4077|protein_coding||c.*587_*588insGC|||||588|,ACGC|downstream_gene_variant|MODIFIER|yjcO|b4078|transcript|b4078|protein_coding||c.*54_*55insGC|||||54|,ACGC|downstream_gene_variant|MODIFIER|fdhF|b4079|transcript|b4079|protein_coding||c.*837_*838insGC|||||837|,ACGC|downstream_gene_variant|MODIFIER|mdtP|b4080|transcript|b4080|protein_coding||c.*3182_*3183insGC|||||3182|,ACGC|downstream_gene_variant|MODIFIER|mdtO|b4081|transcript|b4081|protein_coding||c.*4645_*4646insGC|||||4645|,ACGC|intergenic_region|MODIFIER|gltP-yjcO|b4077-b4078|intergenic_region|b4077-b4078|||n.4296381_4296382insGC||||||  GT:PL   1:255,0\nU00096.3    4474834 .   A   G   225.417 .   DP=81;VDB=0.345282;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,21,26;MQ=60;ANN=G|upstream_gene_variant|MODIFIER|ridA|b4243|transcript|b4243|protein_coding||c.-3921T&gt;C|||||3921|,G|upstream_gene_variant|MODIFIER|pyrI|b4244|transcript|b4244|protein_coding||c.-3387T&gt;C|||||3387|,G|upstream_gene_variant|MODIFIER|pyrB|b4245|transcript|b4245|protein_coding||c.-2439T&gt;C|||||2439|,G|upstream_gene_variant|MODIFIER|pyrL|b4246|transcript|b4246|protein_coding||c.-2301T&gt;C|||||2301|,G|upstream_gene_variant|MODIFIER|yjgH|b4248|transcript|b4248|protein_coding||c.-1625T&gt;C|||||1625|,G|upstream_gene_variant|MODIFIER|bdcA|b4249|transcript|b4249|protein_coding||c.-781T&gt;C|||||781|,G|upstream_gene_variant|MODIFIER|tabA|b4252|transcript|b4252|protein_coding||c.-28A&gt;G|||||28|,G|upstream_gene_variant|MODIFIER|yjgL|b4253|transcript|b4253|protein_coding||c.-603A&gt;G|||||603|,G|upstream_gene_variant|MODIFIER|rraB|b4255|transcript|b4255|protein_coding||c.-3639A&gt;G|||||3639|,G|upstream_gene_variant|MODIFIER|yjgN|b4257|transcript|b4257|protein_coding||c.-4896A&gt;G|||||4896|,G|downstream_gene_variant|MODIFIER|mgtA|b4242|transcript|b4242|protein_coding||c.*4513A&gt;G|||||4513|,G|downstream_gene_variant|MODIFIER|bdcR|b4251|transcript|b4251|protein_coding||c.*117A&gt;G|||||117|,G|downstream_gene_variant|MODIFIER|argI|b4254|transcript|b4254|protein_coding||c.*2473T&gt;C|||||2473|,G|downstream_gene_variant|MODIFIER|yjgM|b4256|transcript|b4256|protein_coding||c.*4200T&gt;C|||||4200|,G|intergenic_region|MODIFIER|bdcR-tabA|b4251-b4252|intergenic_region|b4251-b4252|||n.4474834A&gt;G||||||   GT:PL   1:255,0\nU00096.3    4585480 .   G   A   225.417 .   DP=70;VDB=0.996826;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,20,26;MQ=60;ANN=A|stop_gained|HIGH|hsdR|b4350|transcript|b4350|protein_coding|1/1|c.1282C&gt;T|p.Gln428*|1282/3513|1282/3513|428/1170||,A|upstream_gene_variant|MODIFIER|hsdS|b4348|transcript|b4348|protein_coding||c.-4018C&gt;T|||||4018|,A|upstream_gene_variant|MODIFIER|hsdM|b4349|transcript|b4349|protein_coding||c.-2432C&gt;T|||||2432|,A|upstream_gene_variant|MODIFIER|mrr|b4351|transcript|b4351|protein_coding||c.-1469G&gt;A|||||1469|,A|downstream_gene_variant|MODIFIER|yjiA|b4352|transcript|b4352|protein_coding||c.*2429C&gt;T|||||2429|,A|downstream_gene_variant|MODIFIER|yjiX|b4353|transcript|b4353|protein_coding||c.*3396C&gt;T|||||3396|,A|downstream_gene_variant|MODIFIER|btsT|b4354|transcript|b4354|protein_coding||c.*3649C&gt;T|||||3649| GT:PL   1:255,0\nU00096.3    4602509 .   C   T   225.417 .   DP=136;VDB=0.843259;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,42,41;MQ=60;ANN=T|stop_gained|HIGH|yjjP|b4364|transcript|b4364|protein_coding|1/1|c.350G&gt;A|p.Trp117*|350/771|350/771|117/256||,T|upstream_gene_variant|MODIFIER|opgB|b4359|transcript|b4359|protein_coding||c.-3068G&gt;A|||||3068|WARNING_TRANSCRIPT_NO_START_CODON,T|upstream_gene_variant|MODIFIER|yjjA|b4360|transcript|b4360|protein_coding||c.-2320G&gt;A|||||2320|,T|upstream_gene_variant|MODIFIER|dnaC|b4361|transcript|b4361|protein_coding||c.-1534G&gt;A|||||1534|,T|upstream_gene_variant|MODIFIER|dnaT|b4362|transcript|b4362|protein_coding||c.-992G&gt;A|||||992|,T|upstream_gene_variant|MODIFIER|yjjB|b4363|transcript|b4363|protein_coding||c.-412G&gt;A|||||412|,T|upstream_gene_variant|MODIFIER|yjjQ|b4365|transcript|b4365|protein_coding||c.-968C&gt;T|||||968|,T|upstream_gene_variant|MODIFIER|bglJ|b4366|transcript|b4366|protein_coding||c.-1651C&gt;T|||||1651|,T|upstream_gene_variant|MODIFIER|yjjZ|b4567|transcript|b4567|protein_coding||c.-3295C&gt;T|||||3295|,T|downstream_gene_variant|MODIFIER|fhuF|b4367|transcript|b4367|protein_coding||c.*2366G&gt;A|||||2366|,T|downstream_gene_variant|MODIFIER|rsmC|b4371|transcript|b4371|protein_coding||c.*4160G&gt;A|||||4160|    GT:PL   1:255,0\nU00096.3    4616669 .   G   T   225.417 .   DP=88;VDB=0.58582;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,25,31;MQ=60;ANN=T|missense_variant|MODERATE|yjjI|b4380|transcript|b4380|protein_coding|1/1|c.397C&gt;A|p.Leu133Ile|397/1551|397/1551|133/516||,T|upstream_gene_variant|MODIFIER|yjjW|b4379|transcript|b4379|protein_coding||c.-1126C&gt;A|||||1126|,T|upstream_gene_variant|MODIFIER|deoC|b4381|transcript|b4381|protein_coding||c.-654G&gt;T|||||654|,T|upstream_gene_variant|MODIFIER|deoA|b4382|transcript|b4382|protein_coding||c.-1560G&gt;T|||||1560|WARNING_TRANSCRIPT_NO_START_CODON,T|upstream_gene_variant|MODIFIER|deoB|b4383|transcript|b4383|protein_coding||c.-2934G&gt;T|||||2934|,T|upstream_gene_variant|MODIFIER|deoD|b4384|transcript|b4384|protein_coding||c.-4214G&gt;T|||||4214|,T|downstream_gene_variant|MODIFIER|osmY|b4376|transcript|b4376|protein_coding||c.*4668G&gt;T|||||4668|,T|downstream_gene_variant|MODIFIER|ytjA|b4568|transcript|b4568|protein_coding||c.*4380G&gt;T|||||4380|,T|downstream_gene_variant|MODIFIER|yjjU|b4377|transcript|b4377|protein_coding||c.*3185G&gt;T|||||3185|WARNING_TRANSCRIPT_NO_START_CODON,T|downstream_gene_variant|MODIFIER|yjjV|b4378|transcript|b4378|protein_coding||c.*2409G&gt;T|||||2409|WARNING_TRANSCRIPT_NO_START_CODON GT:PL   1:255,0\n</code></pre> <p>The <code>vcf</code> file became significantly larger because the <code>ANN</code> (annotation) line appeared after all the technical information Example:</p> <pre><code>ANN=T|missense_variant|MODERATE|yjjI|b4380|transcript|b4380|protein_coding|1/1|c.397C&gt;A|p.Leu133Ile.\n</code></pre> <ul> <li>There's been a substitution of a letter for the <code>T</code>.</li> <li>This is a <code>missence variant</code> mutation.</li> <li>Its effect is <code>MODERATE</code>.</li> <li><code>yjjI</code> - gene name</li> <li><code>b4380</code> - number of the transcript in which the substitution occurred.</li> <li><code>protein_coding</code> - this is the protein coding site</li> <li><code>c.397C&gt;A</code> - replacement in nucleotide sequence</li> <li><code>p.Leu133Ile</code> - subsequent substitution in protein sequence (133 leucine is replaced by isoleucine)</li> </ul>"},{"location":"02_Variant_Calling/#step-13-filter-high-and-moderate-effect-mutations","title":"Step 13: Filter high and moderate effect mutations","text":"<p>Let's filter out high and moderate effect mutations: - nonsense - missense - frameshifts</p> <p>Input</p> <pre><code>SnpSift filter \"(ANN[*].IMPACT has 'HIGH') | (ANN[*].IMPACT has 'MODERATE')\" data/vcf/EcoliK12MG1655.SRR17909485.annotated.vcf &gt; data/vcf/EcoliK12MG1655.SRR17909485.higheffect.vcf\n</code></pre> <p>Input</p> <pre><code>tail data/vcf/EcoliK12MG1655.SRR17909485.higheffect.vcf\n</code></pre> <p>Output</p> <pre><code>U00096.3    705013  .   T   C   225.417 .   DP=103;VDB=0.0387749;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,30,36;MQ=60;ANN=C|missense_variant|MODERATE|nagE|b0679|transcript|b0679|protein_coding|1/1|c.1070T&gt;C|p.Leu357Ser|1070/1947|1070/1947|357/648||,C|upstream_gene_variant|MODIFIER|umpH|b0675|transcript|b0675|protein_coding||c.-4687A&gt;G|||||4687|,C|upstream_gene_variant|MODIFIER|nagC|b0676|transcript|b0676|protein_coding||c.-3419A&gt;G|||||3419|,C|upstream_gene_variant|MODIFIER|nagA|b0677|transcript|b0677|protein_coding||c.-2262A&gt;G|||||2262|,C|upstream_gene_variant|MODIFIER|nagB|b0678|transcript|b0678|protein_coding||c.-1402A&gt;G|||||1402|,C|upstream_gene_variant|MODIFIER|glnS|b0680|transcript|b0680|protein_coding||c.-1080T&gt;C|||||1080|,C|upstream_gene_variant|MODIFIER|chiP|b0681|transcript|b0681|protein_coding||c.-3321T&gt;C|||||3321|,C|upstream_gene_variant|MODIFIER|chiQ|b0682|transcript|b0682|protein_coding||c.-4777T&gt;C|||||4777|    GT:PL   1:255,0\nU00096.3    1337394 .   A   G   225.417 .   DP=65;VDB=0.915279;SGB=-0.693146;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,24,19;MQ=60;ANN=G|missense_variant|MODERATE|acnA|b1276|transcript|b1276|protein_coding|1/1|c.1564A&gt;G|p.Ser522Gly|1564/2676|1564/2676|522/891||,G|upstream_gene_variant|MODIFIER|pgpB|b1278|transcript|b1278|protein_coding||c.-1936A&gt;G|||||1936|,G|upstream_gene_variant|MODIFIER|lapA|b1279|transcript|b1279|protein_coding||c.-2849A&gt;G|||||2849|WARNING_TRANSCRIPT_NO_START_CODON,G|upstream_gene_variant|MODIFIER|lapB|b1280|transcript|b1280|protein_coding||c.-3164A&gt;G|||||3164|,G|upstream_gene_variant|MODIFIER|pyrF|b1281|transcript|b1281|protein_coding||c.-4527A&gt;G|||||4527|,G|downstream_gene_variant|MODIFIER|topA|b1274|transcript|b1274|protein_coding||c.*3749A&gt;G|||||3749|,G|downstream_gene_variant|MODIFIER|cysB|b1275|transcript|b1275|protein_coding||c.*2565A&gt;G|||||2565|,G|downstream_gene_variant|MODIFIER|ymiA|b4522|transcript|b4522|protein_coding||c.*2106A&gt;G|||||2106|,G|downstream_gene_variant|MODIFIER|yciX|b4523|transcript|b4523|protein_coding||c.*1936A&gt;G|||||1936|,G|downstream_gene_variant|MODIFIER|ymiC|b4741|transcript|b4741|protein_coding||c.*1727A&gt;G|||||1727|,G|downstream_gene_variant|MODIFIER|ribA|b1277|transcript|b1277|protein_coding||c.*1176T&gt;C|||||1176|   GT:PL   1:255,0\nU00096.3    1514951 .   G   T   225.417 .   DP=68;VDB=0.981287;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,18,30;MQ=60;ANN=T|missense_variant|MODERATE|ydcV|b1443|transcript|b1443|protein_coding|1/1|c.190G&gt;T|p.Ala64Ser|190/795|190/795|64/264||,T|upstream_gene_variant|MODIFIER|patD|b1444|transcript|b1444|protein_coding||c.-627G&gt;T|||||627|,T|upstream_gene_variant|MODIFIER|ortT|b1445|transcript|b1445|protein_coding||c.-2438G&gt;T|||||2438|,T|upstream_gene_variant|MODIFIER|ydcY|b1446|transcript|b1446|protein_coding||c.-2697G&gt;T|||||2697|,T|upstream_gene_variant|MODIFIER|curA|b1449|transcript|b1449|protein_coding||c.-4076G&gt;T|||||4076|,T|downstream_gene_variant|MODIFIER|ydcR|b1439|transcript|b1439|protein_coding||c.*3542G&gt;T|||||3542|,T|downstream_gene_variant|MODIFIER|ydcS|b1440|transcript|b1440|protein_coding||c.*2152G&gt;T|||||2152|,T|downstream_gene_variant|MODIFIER|ydcT|b1441|transcript|b1441|protein_coding||c.*1121G&gt;T|||||1121|,T|downstream_gene_variant|MODIFIER|ydcU|b1442|transcript|b1442|protein_coding||c.*179G&gt;T|||||179|,T|downstream_gene_variant|MODIFIER|yncL|b4598|transcript|b4598|protein_coding||c.*2148C&gt;A|||||2148|,T|downstream_gene_variant|MODIFIER|ydcZ|b1447|transcript|b1447|protein_coding||c.*2931C&gt;A|||||2931|,T|downstream_gene_variant|MODIFIER|mnaT|b1448|transcript|b1448|protein_coding||c.*3377C&gt;A|||||3377|   GT:PL   1:255,0\nU00096.3    2405959 .   G   T   225.417 .   DP=116;VDB=0.00680486;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,42,33;MQ=60;ANN=T|missense_variant|MODERATE|lrhA|b2289|transcript|b2289|protein_coding|1/1|c.683C&gt;A|p.Ala228Glu|683/939|683/939|228/312||,T|upstream_gene_variant|MODIFIER|nuoF|b2284|transcript|b2284|protein_coding||c.-4404C&gt;A|||||4404|,T|upstream_gene_variant|MODIFIER|nuoE|b2285|transcript|b2285|protein_coding||c.-3907C&gt;A|||||3907|,T|upstream_gene_variant|MODIFIER|nuoC|b2286|transcript|b2286|protein_coding||c.-2114C&gt;A|||||2114|,T|upstream_gene_variant|MODIFIER|nuoB|b2287|transcript|b2287|protein_coding||c.-1346C&gt;A|||||1346|,T|upstream_gene_variant|MODIFIER|nuoA|b2288|transcript|b2288|protein_coding||c.-887C&gt;A|||||887|,T|upstream_gene_variant|MODIFIER|alaA|b2290|transcript|b2290|protein_coding||c.-1602G&gt;T|||||1602|,T|upstream_gene_variant|MODIFIER|yfbR|b2291|transcript|b2291|protein_coding||c.-2903G&gt;T|||||2903|,T|downstream_gene_variant|MODIFIER|yfbS|b2292|transcript|b2292|protein_coding||c.*3561C&gt;A|||||3561|WARNING_TRANSCRIPT_NO_START_CODON GT:PL   1:255,0\nU00096.3    4093770 .   C   T   225.417 .   DP=141;VDB=0.961761;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,39,52;MQ=60;ANN=T|missense_variant|MODERATE|rhaD|b3902|transcript|b3902|protein_coding|1/1|c.503G&gt;A|p.Gly168Asp|503/825|503/825|168/274||,T|upstream_gene_variant|MODIFIER|frvR|b3897|transcript|b3897|protein_coding||c.-3915G&gt;A|||||3915|,T|upstream_gene_variant|MODIFIER|frvX|b3898|transcript|b3898|protein_coding||c.-2845G&gt;A|||||2845|,T|upstream_gene_variant|MODIFIER|frvB|b3899|transcript|b3899|protein_coding||c.-1404G&gt;A|||||1404|,T|upstream_gene_variant|MODIFIER|frvA|b3900|transcript|b3900|protein_coding||c.-947G&gt;A|||||947|,T|upstream_gene_variant|MODIFIER|rhaM|b3901|transcript|b3901|protein_coding||c.-332G&gt;A|||||332|,T|upstream_gene_variant|MODIFIER|rhaS|b3905|transcript|b3905|protein_coding||c.-3966C&gt;T|||||3966|,T|upstream_gene_variant|MODIFIER|rhaR|b3906|transcript|b3906|protein_coding||c.-4876C&gt;T|||||4876|WARNING_TRANSCRIPT_NO_START_CODON,T|downstream_gene_variant|MODIFIER|rhaA|b3903|transcript|b3903|protein_coding||c.*953G&gt;A|||||953|,T|downstream_gene_variant|MODIFIER|rhaB|b3904|transcript|b3904|protein_coding||c.*2209G&gt;A|||||2209|   GT:PL   1:255,0\nU00096.3    4161248 .   G   T   225.417 .   DP=117;VDB=0.400301;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,36,33;MQ=60;ANN=T|missense_variant|MODERATE|fabR|b3963|transcript|b3963|protein_coding|1/1|c.182G&gt;T|p.Gly61Val|182/705|182/705|61/234||,T|upstream_gene_variant|MODIFIER|sthA|b3962|transcript|b3962|protein_coding||c.-458C&gt;A|||||458|,T|upstream_gene_variant|MODIFIER|yijD|b3964|transcript|b3964|protein_coding||c.-523G&gt;T|||||523|,T|upstream_gene_variant|MODIFIER|btuB|b3966|transcript|b3966|protein_coding||c.-2391G&gt;T|||||2391|,T|upstream_gene_variant|MODIFIER|murI|b3967|transcript|b3967|protein_coding||c.-4180G&gt;T|||||4180|,T|downstream_gene_variant|MODIFIER|argB|b3959|transcript|b3959|protein_coding||c.*4459G&gt;T|||||4459|,T|downstream_gene_variant|MODIFIER|argH|b3960|transcript|b3960|protein_coding||c.*3025G&gt;T|||||3025|,T|downstream_gene_variant|MODIFIER|oxyR|b3961|transcript|b3961|protein_coding||c.*1841G&gt;T|||||1841|,T|downstream_gene_variant|MODIFIER|trmA|b3965|transcript|b3965|protein_coding||c.*922C&gt;A|||||922|    GT:PL   1:255,0\nU00096.3    4164123 .   C   G   225.417 .   DP=130;VDB=0.322528;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,32,44;MQ=60;ANN=G|missense_variant|MODERATE|btuB|b3966|transcript|b3966|protein_coding|1/1|c.485C&gt;G|p.Ala162Gly|485/1845|485/1845|162/614||,G|upstream_gene_variant|MODIFIER|sthA|b3962|transcript|b3962|protein_coding||c.-3333G&gt;C|||||3333|,G|upstream_gene_variant|MODIFIER|trmA|b3965|transcript|b3965|protein_coding||c.-853G&gt;C|||||853|,G|upstream_gene_variant|MODIFIER|murI|b3967|transcript|b3967|protein_coding||c.-1305C&gt;G|||||1305|,G|downstream_gene_variant|MODIFIER|oxyR|b3961|transcript|b3961|protein_coding||c.*4716C&gt;G|||||4716|,G|downstream_gene_variant|MODIFIER|fabR|b3963|transcript|b3963|protein_coding||c.*2352C&gt;G|||||2352|,G|downstream_gene_variant|MODIFIER|yijD|b3964|transcript|b3964|protein_coding||c.*1993C&gt;G|||||1993|  GT:PL   1:255,0\nU00096.3    4585480 .   G   A   225.417 .   DP=70;VDB=0.996826;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,20,26;MQ=60;ANN=A|stop_gained|HIGH|hsdR|b4350|transcript|b4350|protein_coding|1/1|c.1282C&gt;T|p.Gln428*|1282/3513|1282/3513|428/1170||,A|upstream_gene_variant|MODIFIER|hsdS|b4348|transcript|b4348|protein_coding||c.-4018C&gt;T|||||4018|,A|upstream_gene_variant|MODIFIER|hsdM|b4349|transcript|b4349|protein_coding||c.-2432C&gt;T|||||2432|,A|upstream_gene_variant|MODIFIER|mrr|b4351|transcript|b4351|protein_coding||c.-1469G&gt;A|||||1469|,A|downstream_gene_variant|MODIFIER|yjiA|b4352|transcript|b4352|protein_coding||c.*2429C&gt;T|||||2429|,A|downstream_gene_variant|MODIFIER|yjiX|b4353|transcript|b4353|protein_coding||c.*3396C&gt;T|||||3396|,A|downstream_gene_variant|MODIFIER|btsT|b4354|transcript|b4354|protein_coding||c.*3649C&gt;T|||||3649| GT:PL   1:255,0\nU00096.3    4602509 .   C   T   225.417 .   DP=136;VDB=0.843259;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,42,41;MQ=60;ANN=T|stop_gained|HIGH|yjjP|b4364|transcript|b4364|protein_coding|1/1|c.350G&gt;A|p.Trp117*|350/771|350/771|117/256||,T|upstream_gene_variant|MODIFIER|opgB|b4359|transcript|b4359|protein_coding||c.-3068G&gt;A|||||3068|WARNING_TRANSCRIPT_NO_START_CODON,T|upstream_gene_variant|MODIFIER|yjjA|b4360|transcript|b4360|protein_coding||c.-2320G&gt;A|||||2320|,T|upstream_gene_variant|MODIFIER|dnaC|b4361|transcript|b4361|protein_coding||c.-1534G&gt;A|||||1534|,T|upstream_gene_variant|MODIFIER|dnaT|b4362|transcript|b4362|protein_coding||c.-992G&gt;A|||||992|,T|upstream_gene_variant|MODIFIER|yjjB|b4363|transcript|b4363|protein_coding||c.-412G&gt;A|||||412|,T|upstream_gene_variant|MODIFIER|yjjQ|b4365|transcript|b4365|protein_coding||c.-968C&gt;T|||||968|,T|upstream_gene_variant|MODIFIER|bglJ|b4366|transcript|b4366|protein_coding||c.-1651C&gt;T|||||1651|,T|upstream_gene_variant|MODIFIER|yjjZ|b4567|transcript|b4567|protein_coding||c.-3295C&gt;T|||||3295|,T|downstream_gene_variant|MODIFIER|fhuF|b4367|transcript|b4367|protein_coding||c.*2366G&gt;A|||||2366|,T|downstream_gene_variant|MODIFIER|rsmC|b4371|transcript|b4371|protein_coding||c.*4160G&gt;A|||||4160|    GT:PL   1:255,0\nU00096.3    4616669 .   G   T   225.417 .   DP=88;VDB=0.58582;SGB=-0.693147;MQSBZ=0;MQ0F=0;AC=1;AN=1;DP4=0,0,25,31;MQ=60;ANN=T|missense_variant|MODERATE|yjjI|b4380|transcript|b4380|protein_coding|1/1|c.397C&gt;A|p.Leu133Ile|397/1551|397/1551|133/516||,T|upstream_gene_variant|MODIFIER|yjjW|b4379|transcript|b4379|protein_coding||c.-1126C&gt;A|||||1126|,T|upstream_gene_variant|MODIFIER|deoC|b4381|transcript|b4381|protein_coding||c.-654G&gt;T|||||654|,T|upstream_gene_variant|MODIFIER|deoA|b4382|transcript|b4382|protein_coding||c.-1560G&gt;T|||||1560|WARNING_TRANSCRIPT_NO_START_CODON,T|upstream_gene_variant|MODIFIER|deoB|b4383|transcript|b4383|protein_coding||c.-2934G&gt;T|||||2934|,T|upstream_gene_variant|MODIFIER|deoD|b4384|transcript|b4384|protein_coding||c.-4214G&gt;T|||||4214|,T|downstream_gene_variant|MODIFIER|osmY|b4376|transcript|b4376|protein_coding||c.*4668G&gt;T|||||4668|,T|downstream_gene_variant|MODIFIER|ytjA|b4568|transcript|b4568|protein_coding||c.*4380G&gt;T|||||4380|,T|downstream_gene_variant|MODIFIER|yjjU|b4377|transcript|b4377|protein_coding||c.*3185G&gt;T|||||3185|WARNING_TRANSCRIPT_NO_START_CODON,T|downstream_gene_variant|MODIFIER|yjjV|b4378|transcript|b4378|protein_coding||c.*2409G&gt;T|||||2409|WARNING_TRANSCRIPT_NO_START_CODON GT:PL   1:255,0\n</code></pre>"},{"location":"03_Whole_%28pan%29genome_analyses/","title":"III. Whole Genome and Pangenome Analyses","text":"<p>This chapter contains a manual on whole genome and pangenome analyses.</p> <p>We will use the <code>PanACoTA</code> tool to perform the pangenome analysis.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#instruction","title":"Instruction","text":"<p>Every step of this pipeline can be done in <code>terminal</code> except Step 6.1., which needs <code>Python</code>. It is recommended to use <code>Jupyter Notebook</code>. Just write <code>!</code> in the beggining of each cell to make it understand <code>bash</code> commands.</p> <p>To recreate any of the steps of this manual please install:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/envs/panacota.yaml\n</code></pre> <pre><code>conda env create -f panacota.yaml\n</code></pre> <p>And of cource do not forget to activate the envinronment!</p> <pre><code>conda activate panacota\n</code></pre>"},{"location":"03_Whole_%28pan%29genome_analyses/#introduction","title":"Introduction","text":"<p>Here we will work with <code>PanACoTA</code> pipeline. This tool has many dependecies:</p> <ul> <li>For <code>prepare</code> module: <code>mash</code> (to filter genomes)</li> <li>For <code>annotate</code> module: <code>prokka</code> and/or <code>prodigal</code> (to uniformly annotate your genomes)</li> <li>For <code>pangenome</code> module: <code>mmseqs</code> (to generate pangenomes)</li> <li>For <code>align</code> module: <code>mafft</code> (to align persistent genome)</li> <li>For <code>tree</code> module: At least one of those softwares, to infer a phylogenetic tree:<ul> <li><code>IQ Tree</code></li> <li><code>FastTreeMP</code></li> <li><code>FastME</code></li> <li><code>Quicktree</code></li> </ul> </li> </ul> <p>All of them but one will be installed with the <code>panacota.yaml</code> conda environment. The last one - <code>mash</code> please install yourself. For more details please visit <code>PanACoTA</code> GitHub repository</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#task","title":"Task","text":"Info <p>We've sequenced and assembled the genome. It's the genome of some organism, and we even know what kind of organism it is.</p> <ul> <li>We download the genomes of its close relatives from public databases.</li> <li>We annotate them all together (so that there is a homogeneous annotation).</li> <li>Build orthologous series.</li> <li>Extract the pangenome.</li> <li>Make genes alignment.</li> <li>Build a phylogenetic tree.</li> </ul> <p>We'll be working with the Shigella flexneri genome. It's genetically nested within Escherichia, but it's a very aggressive pathogen. The same pathogenicity factors are found in E. marmotae isolated from other mammals. So our target is Shigella flexneri. And for comparison, we want to download the genomes of E. marmotae isolated from marmosets and analyse them further.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-1-download-genomes-from-the-database-and-check-their-quality","title":"Step 1: Download genomes from the database and check their quality","text":"<p>As it was mention in the Introduction we will run <code>PanACoTA</code> pipeline. It has many dependecies and in the <code>panacota.yaml</code> cona environment all but one are already installed. The one missing is <code>mash</code>. It is needed for this step, but it is not available in <code>conda</code> or <code>pip</code>. It is distributed as binary. To install it on <code>Ubuntu</code> run this command in your terminal:</p> <pre><code>sudo apt install mash\n</code></pre> <p>For more details read the <code>mash</code> tutorial</p> <p><code>Mash</code> measures the distances between genomes:</p> <ul> <li>if the distances are any small (i.e. we have some copies).</li> <li>if the distances are too large (i.e. genomes so far away that nothing can be counted on them further).</li> </ul> <p>The programme discards them (this is a configurable parameter).</p> Info <ul> <li><code>GenBank</code> - in general, all possible <code>.fasta</code> files uploaded to <code>NCBI's GenBank</code> database.</li> <li><code>RefSeq</code> - an attempt to structure <code>GenBank</code>, a so-called \u2018quality mark\u2019 meaning that <code>NCBI</code> staff have analysed the data according to their own pipeline and approved its quality at a high level.</li> </ul> <p>Let's break down the command below in parts:</p> <ul> <li><code>PanACoTA</code> - the name of the tool we are running.</li> <li><code>prepare</code> - one of the modules of this tool.</li> <li>By key <code>-g</code> we pass what genomes we are downloading - quotes are very important.</li> <li>By key <code>-s</code> we choose between GenBank and RefSeq.</li> <li>By key <code>-l</code> we choose the level of assembly.</li> </ul> <p>Input</p> <pre><code>PanACoTA prepare -g 'Escherichia marmotae' -s refseq -l complete\n</code></pre> <p>Let's see what we have after executing this command</p> <p>Input</p> <pre><code>ls Escherichia_marmotae\n</code></pre> <p>Output</p> <pre><code>Database_init\nLSTINFO-Escherichia_marmotae-filtered-0.0001_0.06.txt\nPanACoTA_prepare_Escherichia_marmotae.log\nPanACoTA_prepare_Escherichia_marmotae.log.details\nPanACoTA_prepare_Escherichia_marmotae.log.err\nassembly_summary-Escherichia_marmotae.txt\ndiscarded-by-L90_nbcont-Escherichia_marmotae.lst\ndiscarded-by-minhash-Escherichia_marmotae-0.0001_0.06.txt\nmash_files\nrefseq\ntmp_files\n</code></pre> <ul> <li><code>PanACoTA_prepare_Escherichia_marmotae.log</code> - file with log of command execution.</li> <li><code>PanACoTA_prepare_Escherichia_marmotae.log.details</code> - file with detailed log of command execution.</li> <li><code>PanACoTA_prepare_Escherichia_marmotae.log.err</code> - error log (if there were any), it is always created, but if there were no errors, the file will be empty.</li> <li><code>assembly_summary-Escherichia_marmotae.txt</code> - statistics on a specific assembly of Escherichia marmotae.</li> <li><code>discarded-by-minhash-Escherichia_marmotae-0.0001_0.06.txt</code> - file with what <code>mash</code> discarded (it discarded anything closer than <code>0.0001</code> and anything further than <code>0.06</code>).</li> <li><code>LSTINFO-Escherichia_marmotae-filtered-0.0001e_0.06.txt</code> - a list of all the files that <code>PanACoTA</code> fragmented.</li> </ul> <p>Now let's look in the <code>Database_init</code> directory.</p> <p>Input</p> <pre><code>ls Escherichia_marmotae/Database_init\n</code></pre> <p>Output</p> <p><pre><code>GCF_002900365.1_ASM290036v1_genomic.fna\nGCF_013636045.1_ASM1363604v1_genomic.fna\nGCF_013636235.1_ASM1363623v1_genomic.fna\nGCF_013732895.1_ASM1373289v1_genomic.fna\nGCF_013745515.1_ASM1374551v1_genomic.fna\nGCF_013746655.1_ASM1374665v1_genomic.fna\nGCF_022592155.1_ASM2259215v1_genomic.fna\nGCF_029717905.1_ASM2971790v1_genomic.fna\nGCF_029719265.1_ASM2971926v1_genomic.fna\nGCF_029962465.1_ASM2996246v1_genomic.fna\nGCF_037055335.1_ASM3705533v1_genomic.fna\nGCF_900636405.1_41767_E01_genomic.fna\nGCF_900637015.1_46514_C01_genomic.fna\n</code></pre> Thus <code>PanACoTA</code> downloaded 12 complete genomes (nucleotide genomic sequences) of Escherichia marmotae from <code>RefSeq</code> into the <code>Escherichia_marmotae/Database_init directory</code>.</p> <p>Now we will add to all this our Shigella flexneri.</p> <p>Input</p> <pre><code>wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/007/405/GCF_000007405.1_ASM740v1/GCF_000007405.1_ASM740v1_genomic.fna.gz -P Escherichia_marmotae/Database_init/\n</code></pre> <p>Let's unpack the archive.</p> <p>Input</p> <pre><code>gzip -d Escherichia_marmotae/Database_init/GCF_000007405.1_ASM740v1_genomic.fna.gz\n</code></pre> <p>The next step of <code>PanACoTA</code> takes as input a text file with a list of files containing genomes. That's why we'll create it!</p> <p>Input</p> <pre><code>ls Escherichia_marmotae/Database_init/ &gt; listFile \n</code></pre> <p>Let's check this list</p> <p>Input</p> <pre><code>cat listFile\n</code></pre> <p>Output</p> <pre><code>GCF_000007405.1_ASM740v1_genomic.fna\nGCF_002900365.1_ASM290036v1_genomic.fna\nGCF_013636045.1_ASM1363604v1_genomic.fna\nGCF_013636235.1_ASM1363623v1_genomic.fna\nGCF_013732895.1_ASM1373289v1_genomic.fna\nGCF_013745515.1_ASM1374551v1_genomic.fna\nGCF_013746655.1_ASM1374665v1_genomic.fna\nGCF_022592155.1_ASM2259215v1_genomic.fna\nGCF_029717905.1_ASM2971790v1_genomic.fna\nGCF_029719265.1_ASM2971926v1_genomic.fna\nGCF_029962465.1_ASM2996246v1_genomic.fna\nGCF_037055335.1_ASM3705533v1_genomic.fna\nGCF_900636405.1_41767_E01_genomic.fna\nGCF_900637015.1_46514_C01_genomic.fna\n</code></pre> <p>That's right! These are the files that will be given as input in the next step of <code>PanACoTA</code> pipeline.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-2-annotate-the-genomes","title":"Step 2: Annotate the genomes","text":"<p>Running <code>PanACoTA</code> with the <code>annotate</code> mode. This mode of <code>PanACoTA</code> is basically a shell for using the <code>prokka</code> tool. Let's also break down the command below in parts:</p> <ul> <li><code>PanACoTA</code> - the name of the tool we are running.</li> <li><code>annotate</code> - module of this tool that annotates genomes.</li> <li>By key <code>-d</code> we pass the directory with the genomes.</li> <li>By key <code>-r</code> we specify where to store the output files.</li> <li>By key <code>-n</code> we set some four-character name for the data, which will then be used in the pipeline.</li> <li>By key <code>-l</code> we specify what exactly genomes from the directory in <code>-d</code> key must be annotated.</li> <li>By key <code>--threads</code> we specify how much threads this command can use (if use <code>0</code> - automatically uses all available cores).</li> </ul> Tip <p>It takes a long time to execute the command (it took me 19 minutes)</p> <p>Input</p> <pre><code>PanACoTA annotate -d Escherichia_marmotae/Database_init/ -r Annotation -n EsMa -l listFile --threads 24\n</code></pre> <p>Let's see what we got as a result of the annotation</p> <p>Input</p> <pre><code>ls Annotation\n</code></pre> <p>Output</p> <pre><code>Genes                   QC_L90-listFile.png\nLSTINFO                 QC_nb-contigs-listFile.png\nLSTINFO-.lst                Replicons\nPanACoTA-annotate_listFile.log      discarded-.lst\nPanACoTA-annotate_listFile.log.details  gff3\nPanACoTA-annotate_listFile.log.err  tmp_files\nProteins\n</code></pre> <p>We now have an <code>Annotation</code> folder, and in it:</p> <ul> <li><code>Proteins</code></li> <li><code>Genes</code></li> <li><code>Replicons</code></li> <li><code>gff3</code></li> <li><code>LSTINFO</code></li> </ul>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-21-proteins-directory","title":"Step 2.1. <code>Proteins</code> directory","text":"<p>Let's look at the <code>Annotation/Proteins/</code> directory. What is stored in it?</p> <p>Input</p> <pre><code>ls Annotation/Proteins/\n</code></pre> <p>Output</p> <pre><code>EsMa.0824.00001.prt  EsMa.0824.00006.prt  EsMa.0824.00011.prt\nEsMa.0824.00002.prt  EsMa.0824.00007.prt  EsMa.0824.00012.prt\nEsMa.0824.00003.prt  EsMa.0824.00008.prt  EsMa.0824.00013.prt\nEsMa.0824.00004.prt  EsMa.0824.00009.prt  EsMa.0824.00014.prt\nEsMa.0824.00005.prt  EsMa.0824.00010.prt  EsMa.All.prt\n</code></pre> <p>So, we have 15 files in this folder (14 files for each organism and 1 common file).</p> <ul> <li><code>EsMa</code> is the name we set in the <code>-n</code> key.</li> <li><code>0824</code> is the launch ID - August 24.</li> <li><code>00001-00014</code> - organism sequence number (IMPORTANT: the files are not always in the exact order in which they were uploaded to listFile).</li> </ul> <p>Let's take a look at <code>Annotation/Proteins/EsMa.0824.00001.prt</code>.</p> <p>Input</p> <pre><code>head -10 Annotation/Proteins/EsMa.0824.00001.prt\n</code></pre> <p>Output</p> <pre><code>&gt;EsMa.0824.00001.0001b_00001 2463 thrA | Bifunctional aspartokinase/homoserine dehydrogenase 1 | NA | similar to AA sequence:UniProtKB:P00561 | COG:COG0460\nMRVLKFGGTSVANAERFLRVADILESNARQGQVATVLSAPAKITNHLVAMIEKTISGQDA\nLPNISDAERIFAELLTGLAAAQPGFPLAQLKTFVDQEFAQIKHVLHGISLLGQCPDSINA\nALICRGEKMSIAIMAGVLEARGHNVTVIDPVEKLLAVGHYLESTVDIAESTRRIAASRIP\nADHMVLMAGFTAGNEKGELVVLGRNGSDYSAAVLAACLRADCCEIWTDVDGVYTCDPRQV\nPDARLLKSMSYQEAMELSYFGAKVLHPRTITPIAQFQIPCLIKNTGNPQAPGTLIGASRD\nEDELPVKGISNLNNMAMFSVSGPGMKGMVGMAARVFAAMSRARISVVLITQSSSEYSISF\nCVPQSDCVRAERAMQEEFYLELKEGLLEPLAVTERLAIISVVGDGMRTLRGISAKFFAAL\nARANINIVAIAQGSSERSISVVVNNDDATTGVRVTHQMLFNTDQVIEVFVIGVGGVGGAL\nLEQLKRQQSWLKNKHIDLRVCGVANSKALLTSVHGLNLENWQEELAQAKEPFNLGRLIRL\n</code></pre> <p>And inside each <code>.prt</code> file, we see the amino acid sequences of all the proteins that <code>PanACoTA</code> predicted for us! Let's turn our attention to line 1:</p> <p>Input</p> <pre><code>head -1 Annotation/Proteins/EsMa.0824.00001.prt\n</code></pre> <p>Output</p> <pre><code>&gt;EsMa.0824.00001.0001b_00001 2463 thrA | Bifunctional aspartokinase/homoserine dehydrogenase 1 | NA | similar to AA sequence:UniProtKB:P00561 | COG:COG0460\n</code></pre> <ul> <li><code>&gt;EsMa.0824.00001.</code> - the name of the genome in the <code>PanACoTA</code>'s annotation.</li> <li><code>0001b</code> - replicon number.</li> <li><code>_00001</code> - frame number.</li> <li><code>2463</code> - length.</li> <li><code>thrA</code> - protein's name.</li> <li><code>Bifunctional aspartokinase/homoserine dehydrogenase 1</code> - protein's function.</li> <li><code>similar to AA sequence:UniProtKB:P00561</code> - the basis for predicting the protein and its function.</li> <li><code>COG:COG0460</code> - COG ID.</li> </ul>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-22-lstinfo-lst-file","title":"Step 2.2. <code>LSTINFO-.lst</code> file","text":"<p>Now, let's look at the <code>Annotation/LSTINFO-.lst</code> file.</p> <p>Input</p> <pre><code>cat Annotation/LSTINFO-.lst\n</code></pre> <p>Output</p> <pre><code>gembase_name    orig_name   to_annotate gsize   nb_conts    L90\nEsMa.0824.00001 GCF_000007405.1_ASM740v1_genomic.fna    Annotation/tmp_files/GCF_000007405.1_ASM740v1_genomic.fna_prokka-split5N.fna    4599354 1   1\nEsMa.0824.00002 GCF_900636405.1_41767_E01_genomic.fna   Annotation/tmp_files/GCF_900636405.1_41767_E01_genomic.fna_prokka-split5N.fna   4857140 1   1\nEsMa.0824.00003 GCF_900637015.1_46514_C01_genomic.fna   Annotation/tmp_files/GCF_900637015.1_46514_C01_genomic.fna_prokka-split5N.fna   4450344 1   1\nEsMa.0824.00004 GCF_013636045.1_ASM1363604v1_genomic.fna    Annotation/tmp_files/GCF_013636045.1_ASM1363604v1_genomic.fna_prokka-split5N.fna    4637518 2   1\nEsMa.0824.00005 GCF_029962465.1_ASM2996246v1_genomic.fna    Annotation/tmp_files/GCF_029962465.1_ASM2996246v1_genomic.fna_prokka-split5N.fna    4669757 2   1\nEsMa.0824.00006 GCF_002900365.1_ASM290036v1_genomic.fna Annotation/tmp_files/GCF_002900365.1_ASM290036v1_genomic.fna_prokka-split5N.fna 4896291 3   1\nEsMa.0824.00007 GCF_013636235.1_ASM1363623v1_genomic.fna    Annotation/tmp_files/GCF_013636235.1_ASM1363623v1_genomic.fna_prokka-split5N.fna    4981845 3   1\nEsMa.0824.00008 GCF_013745515.1_ASM1374551v1_genomic.fna    Annotation/tmp_files/GCF_013745515.1_ASM1374551v1_genomic.fna_prokka-split5N.fna    4887958 3   1\nEsMa.0824.00009 GCF_022592155.1_ASM2259215v1_genomic.fna    Annotation/tmp_files/GCF_022592155.1_ASM2259215v1_genomic.fna_prokka-split5N.fna    5200167 3   1\nEsMa.0824.00010 GCF_013746655.1_ASM1374665v1_genomic.fna    Annotation/tmp_files/GCF_013746655.1_ASM1374665v1_genomic.fna_prokka-split5N.fna    5094503 4   1\nEsMa.0824.00011 GCF_037055335.1_ASM3705533v1_genomic.fna    Annotation/tmp_files/GCF_037055335.1_ASM3705533v1_genomic.fna_prokka-split5N.fna    5022908 4   1\nEsMa.0824.00012 GCF_029719265.1_ASM2971926v1_genomic.fna    Annotation/tmp_files/GCF_029719265.1_ASM2971926v1_genomic.fna_prokka-split5N.fna    5075061 5   1\nEsMa.0824.00013 GCF_013732895.1_ASM1373289v1_genomic.fna    Annotation/tmp_files/GCF_013732895.1_ASM1373289v1_genomic.fna_prokka-split5N.fna    5083937 6   1\nEsMa.0824.00014 GCF_029717905.1_ASM2971790v1_genomic.fna    Annotation/tmp_files/GCF_029717905.1_ASM2971790v1_genomic.fna_prokka-split5N.fna    4780041 7   1\n</code></pre> <ul> <li><code>EsMa.0824.00001</code> - the name that <code>PanACoTA</code> renamed the file to (by <code>-n</code> key).</li> <li><code>GCF_000007405.1_ASM740v1_genomic.fna</code> - the name from which <code>PanACoTA</code> was renaming.</li> <li><code>Annotation/tmp_files/GCF_000007405.1_ASM740v1_genomic.fna_prokka-split5N.fna</code>- a folder containing what <code>PanACoTA</code> eventually annotated.</li> <li><code>4599354</code> - genome size.</li> </ul>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-23-genes-directory","title":"Step 2.3. <code>Genes</code> directory","text":"<p>Let's take a look at the contents of the <code>Genes</code> directory.</p> <p>Input</p> <pre><code>ls Annotation/Genes/\n</code></pre> <p>Output</p> <pre><code>EsMa.0824.00001.gen  EsMa.0824.00006.gen  EsMa.0824.00011.gen\nEsMa.0824.00002.gen  EsMa.0824.00007.gen  EsMa.0824.00012.gen\nEsMa.0824.00003.gen  EsMa.0824.00008.gen  EsMa.0824.00013.gen\nEsMa.0824.00004.gen  EsMa.0824.00009.gen  EsMa.0824.00014.gen\nEsMa.0824.00005.gen  EsMa.0824.00010.gen\n</code></pre> <p>So we have 14 files in this folder (14 files for each organism).</p> <p>Input</p> <pre><code>head -10 Annotation/Genes/EsMa.0824.00001.gen\n</code></pre> <p>Output</p> <pre><code>&gt;EsMa.0824.00001.0001b_00001 2463 thrA | Bifunctional aspartokinase/homoserine dehydrogenase 1 | NA | similar to AA sequence:UniProtKB:P00561 | COG:COG0460\nATGCGAGTGTTGAAGTTCGGCGGTACATCAGTGGCAAATGCAGAACGTTTTCTGCGTGTT\nGCCGATATTCTGGAAAGCAATGCCAGGCAGGGGCAGGTGGCCACCGTCCTCTCTGCCCCC\nGCCAAAATCACCAACCACCTGGTGGCGATGATTGAAAAAACCATTAGCGGCCAGGATGCT\nTTACCCAATATCAGCGATGCCGAACGTATTTTTGCCGAACTTTTGACGGGACTCGCCGCC\nGCCCAGCCGGGGTTCCCGCTGGCGCAATTGAAAACTTTCGTCGATCAGGAATTTGCCCAA\nATAAAACATGTCCTGCATGGCATTAGTTTGTTGGGGCAGTGCCCGGATAGCATCAACGCT\nGCGCTGATTTGCCGTGGCGAGAAAATGTCGATCGCCATTATGGCCGGCGTGTTAGAAGCG\nCGTGGTCACAACGTTACCGTTATCGATCCGGTCGAAAAACTGCTGGCAGTGGGGCATTAC\nCTCGAATCTACCGTCGATATTGCTGAGTCCACCCGCCGTATTGCGGCAAGCCGCATTCCG\n</code></pre> <p>So here we have nucleotide sequences! The names of genes and proteins are the same!</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-24-replicons-directory","title":"Step 2.4. <code>Replicons</code> directory","text":"<p>We also have a directory called <code>Replicons</code>, but it's a boring directory that just holds actually the original nucleotide sequences, but just under code numbers specified in the <code>-n</code> key.</p> <p>Input</p> <pre><code>ls Annotation/Replicons/\n</code></pre> <p>Output</p> <pre><code>EsMa.0824.00001.fna  EsMa.0824.00006.fna  EsMa.0824.00011.fna\nEsMa.0824.00002.fna  EsMa.0824.00007.fna  EsMa.0824.00012.fna\nEsMa.0824.00003.fna  EsMa.0824.00008.fna  EsMa.0824.00013.fna\nEsMa.0824.00004.fna  EsMa.0824.00009.fna  EsMa.0824.00014.fna\nEsMa.0824.00005.fna  EsMa.0824.00010.fna\n</code></pre> <p>Input</p> <pre><code>head Annotation/Replicons/EsMa.0824.00001.fna\n</code></pre> <p>Output</p> <pre><code>&gt;EsMa.0824.00001.0001 4599354\nAGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTC\nTGATAGCAGCTTCTGAACTGGTTACCTGCCGTGAGTAAATTAAAATTTTATTGACTTAGG\nTCACTAAATACTTTAACCAATATAGGCATAGCGCACAGACAGATAAAAATTACAGAGTAC\nACAACATCCATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGT\nAACGGTGCGGGCTGACGCGTACAGGAAACACAGAAAAAAGCCCGCACCTGACAGTGCGGG\nCTTTTTTTTCGACCAAAGGTAACGAGGTAACAACCATGCGAGTGTTGAAGTTCGGCGGTA\nCATCAGTGGCAAATGCAGAACGTTTTCTGCGTGTTGCCGATATTCTGGAAAGCAATGCCA\nGGCAGGGGCAGGTGGCCACCGTCCTCTCTGCCCCCGCCAAAATCACCAACCACCTGGTGG\nCGATGATTGAAAAAACCATTAGCGGCCAGGATGCTTTACCCAATATCAGCGATGCCGAAC\n</code></pre>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-25-lstinfo-directory","title":"Step 2.5. <code>LSTINFO</code> directory","text":"<p>And we have a directory called <code>LSTINFO</code>.</p> <p>Input</p> <pre><code>ls Annotation/LSTINFO/\n</code></pre> <p>Output</p> <pre><code>EsMa.0824.00001.lst  EsMa.0824.00006.lst  EsMa.0824.00011.lst\nEsMa.0824.00002.lst  EsMa.0824.00007.lst  EsMa.0824.00012.lst\nEsMa.0824.00003.lst  EsMa.0824.00008.lst  EsMa.0824.00013.lst\nEsMa.0824.00004.lst  EsMa.0824.00009.lst  EsMa.0824.00014.lst\nEsMa.0824.00005.lst  EsMa.0824.00010.lst\n</code></pre> <p>Input</p> <pre><code>head -10 Annotation/LSTINFO/EsMa.0824.00001.lst\n</code></pre> <p>Output</p> <pre><code>336 2798    D   CDS EsMa.0824.00001.0001b_00001 thrA    | Bifunctional aspartokinase/homoserine dehydrogenase 1 | NA | similar to AA sequence:UniProtKB:P00561 | COG:COG0460\n2800    3732    D   CDS EsMa.0824.00001.0001i_00002 thrB    | Homoserine kinase | 2.7.1.39 | similar to AA sequence:UniProtKB:P00547 | COG:COG0083\n3733    5019    D   CDS EsMa.0824.00001.0001i_00003 thrC    | Threonine synthase | 4.2.3.1 | similar to AA sequence:UniProtKB:P00934 | COG:COG0498\n5233    5529    D   CDS EsMa.0824.00001.0001i_00004 NA  | hypothetical protein | NA | NA | NA\n5682    6458    C   CDS EsMa.0824.00001.0001i_00005 yaaA    | Peroxide stress resistance protein YaaA | NA | similar to AA sequence:UniProtKB:P0A8I3 | COG:COG3022\n6528    6896    C   CDS EsMa.0824.00001.0001i_00006 alsT_1  | Amino-acid carrier protein AlsT | NA | similar to AA sequence:UniProtKB:Q45068 | COG:COG1115\n6918    7958    C   CDS EsMa.0824.00001.0001i_00007 alsT_2  | Amino-acid carrier protein AlsT | NA | similar to AA sequence:UniProtKB:Q45068 | COG:COG1115\n8237    9190    D   CDS EsMa.0824.00001.0001i_00008 talB    | Transaldolase B | 2.2.1.2 | similar to AA sequence:UniProtKB:P0A870 | COG:COG0176\n9305    9892    D   CDS EsMa.0824.00001.0001i_00009 mog | Molybdopterin adenylyltransferase | 2.7.7.75 | similar to AA sequence:UniProtKB:P0AF03 | COG:COG0521\n9927    10493   C   CDS EsMa.0824.00001.0001i_00010 satP    | Succinate-acetate/proton symporter SatP | NA | similar to AA sequence:UniProtKB:P0AC98 | COG:COG1584\n</code></pre> <p>This is a tabular format of all annotated features in the organism! This is especially convenient if we work with genomes using programming languages (e.g. <code>Python</code> and <code>pandas</code>).</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-26-tmp_files-directory","title":"Step 2.6. <code>tmp_files</code> directory","text":"<p>Input</p> <p><pre><code>ls -U Annotation/tmp_files/ | head -10\n</code></pre> Output</p> <pre><code>GCF_000007405.1_ASM740v1_genomic.fna_prokka-split5N.fna\nGCF_000007405.1_ASM740v1_genomic.fna_prokka-split5N.fna-prokka.log\nGCF_000007405.1_ASM740v1_genomic.fna_prokka-split5N.fna-prokkaRes\nGCF_002900365.1_ASM290036v1_genomic.fna_prokka-split5N.fna\nGCF_002900365.1_ASM290036v1_genomic.fna_prokka-split5N.fna-prokka.log\nGCF_002900365.1_ASM290036v1_genomic.fna_prokka-split5N.fna-prokkaRes\nGCF_013636045.1_ASM1363604v1_genomic.fna_prokka-split5N.fna\nGCF_013636045.1_ASM1363604v1_genomic.fna_prokka-split5N.fna-prokka.log\nGCF_013636045.1_ASM1363604v1_genomic.fna_prokka-split5N.fna-prokkaRes\nGCF_013636235.1_ASM1363623v1_genomic.fna_prokka-split5N.fna\n</code></pre> <p>The <code>tmp_files</code> directory contains logs on temporary files. What is it for? If, let's say, something that should be there is not found in the genome under study, the first thing to do is to study these files - most likely <code>prokka</code> crashed with an error and you can read the details in these temporary files.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-3-build-orthological-series","title":"Step 3: Build orthological series","text":"<p>This command builds the pangenome. Let's also break down the command below in parts:</p> <ul> <li><code>PanACoTA</code> - the name of the tool we are running.</li> <li><code>pangenome</code> - module of this tool that builds the pangenome.</li> <li>By key <code>-l</code> we pass the <code>LSTINFO-.lst</code> file from the Step 2.2..</li> <li>By key <code>-n</code> we pass the four-character name for the data, which was set previously.</li> <li>By key <code>-d</code> we pass the directory with the proteins (since <code>PanACoTA</code> builds the pangenome by protein sequence similarity, it only needs the protein directory).</li> <li>By key <code>-o</code> we specify where to store the output files.</li> <li>By the key <code>-i</code> we establish the level of similarity (identity) of the sequences.</li> </ul> <p>Input</p> <pre><code>PanACoTA pangenome -l Annotation/LSTINFO-.lst -n EsMa -d Annotation/Proteins/ -o Pangenome -i 0.8 \n</code></pre> <p>Let's take a look at the log file.</p> <p>Input</p> <pre><code>cat Pangenome/PanACoTA-pangenome_EsMa.log\n</code></pre> <p>Output</p> <pre><code>[2024-08-25 18:54:07] :: INFO :: PanACoTA version 1.4.0\n[2024-08-25 18:54:07] :: INFO :: Command used\n     &gt; PanACoTA pangenome -l Annotation/LSTINFO-.lst -n EsMa -d Annotation/Proteins/ -o Pangenome -i 0.8\n[2024-08-25 18:54:07] :: INFO :: Building bank with all proteins to Annotation/Proteins/EsMa.All.prt\n[2024-08-25 18:54:08] :: INFO :: Will run MMseqs2 with:\n    - minimum sequence identity = 80.0%\n    - cluster mode 1\n[2024-08-25 18:54:08] :: INFO :: Creating database\n[2024-08-25 18:54:11] :: INFO :: Clustering proteins...\n[2024-08-25 18:54:36] :: INFO :: Converting mmseqs results to pangenome file\n[2024-08-25 18:54:36] :: INFO :: Pangenome has 9694 families.\n[2024-08-25 18:54:36] :: INFO :: Retrieving information from pan families\n[2024-08-25 18:54:36] :: INFO :: Generating qualitative and quantitative matrix, and summary file\n[2024-08-25 18:54:37] :: INFO :: DONE\n</code></pre> Info <p><code>[2024-08-25 18:54:36] :: INFO :: Pangenome has 9694 families.</code></p> <p>That is, in this command, <code>PanACoTA</code> counted a total of <code>9694</code> protein families.</p> <p>In this step, we took the annotated genomes, we took the proteins from them. And then the orthology table is constructed with them. The outcome of this step will be lists of genes grouped together. As output, we're going to see a bunch of logs, and one single table.</p> <p>Input</p> <pre><code>ls Pangenome/\n</code></pre> <p>Output</p> <pre><code>PanACoTA-pangenome_EsMa.log\nPanACoTA-pangenome_EsMa.log.details\nPanACoTA-pangenome_EsMa.log.err\nPanGenome-EsMa.All.prt-clust-0.8-mode1.lst\nPanGenome-EsMa.All.prt-clust-0.8-mode1.lst.bin\nPanGenome-EsMa.All.prt-clust-0.8-mode1.lst.quali.txt\nPanGenome-EsMa.All.prt-clust-0.8-mode1.lst.quanti.txt\nPanGenome-EsMa.All.prt-clust-0.8-mode1.lst.summary.txt\nmmseq_EsMa.All.prt_0.8-mode1.log\ntmp_EsMa.All.prt_0.8-mode1\n</code></pre> <p>The only file of interest is <code>PanGenome-EsMa.All.prt-clust-0.8-mode1.lst</code>. Let's take a look at it.</p> <p>Input</p> <pre><code>head -10 Pangenome/PanGenome-EsMa.All.prt-clust-0.8-mode1.lst\n</code></pre> <p>Output</p> <pre><code>1 EsMa.0824.00001.0001i_04241 EsMa.0824.00002.0001i_00106 EsMa.0824.00003.0001i_00093 EsMa.0824.00004.0001i_00095 EsMa.0824.00005.0001i_00094 EsMa.0824.00006.0001i_03340 EsMa.0824.00007.0001i_02672 EsMa.0824.00008.0001i_00094 EsMa.0824.00009.0001i_00094 EsMa.0824.00010.0001i_04572 EsMa.0824.00011.0001i_02424 EsMa.0824.00012.0001i_02999 EsMa.0824.00013.0001i_02846 EsMa.0824.00014.0001i_00094\n2 EsMa.0824.00001.0001i_03873 EsMa.0824.00002.0001i_00130 EsMa.0824.00003.0001i_00117 EsMa.0824.00004.0001i_00119 EsMa.0824.00005.0001i_00118 EsMa.0824.00006.0001i_03364 EsMa.0824.00007.0001i_02648 EsMa.0824.00008.0001i_00118 EsMa.0824.00009.0001i_00126 EsMa.0824.00010.0001i_04604 EsMa.0824.00011.0001i_02400 EsMa.0824.00012.0001i_03032 EsMa.0824.00013.0001i_02821 EsMa.0824.00014.0001i_00126\n3 EsMa.0824.00008.0002i_04583 EsMa.0824.00010.0002i_04636 EsMa.0824.00012.0002i_04658\n4 EsMa.0824.00008.0002i_04649 EsMa.0824.00010.0002i_04668 EsMa.0824.00012.0002i_04736\n5 EsMa.0824.00007.0003i_04731 EsMa.0824.00008.0002i_04616 EsMa.0824.00010.0002i_04700 EsMa.0824.00012.0002i_04701 EsMa.0824.00012.0003i_04789\n6 EsMa.0824.00010.0003i_04833\n7 EsMa.0824.00001.0001i_02181 EsMa.0824.00002.0001i_02692 EsMa.0824.00003.0001i_02407 EsMa.0824.00004.0001i_02595 EsMa.0824.00005.0001i_02480 EsMa.0824.00006.0001i_00413 EsMa.0824.00007.0001i_00212 EsMa.0824.00008.0001i_02711 EsMa.0824.00009.0001i_02866 EsMa.0824.00010.0001i_02477 EsMa.0824.00011.0001i_00009 EsMa.0824.00011.0001i_04359 EsMa.0824.00012.0001i_01000 EsMa.0824.00013.0001i_01030 EsMa.0824.00014.0001i_02416\n8 EsMa.0824.00005.0001i_02448 EsMa.0824.00011.0001i_00041 EsMa.0824.00011.0001i_04391 EsMa.0824.00011.0001i_04451\n9 EsMa.0824.00002.0001i_03089 EsMa.0824.00003.0001i_02788 EsMa.0824.00005.0001i_02414 EsMa.0824.00008.0001i_02644 EsMa.0824.00008.0001i_02862 EsMa.0824.00011.0001i_00075 EsMa.0824.00011.0001i_04425 EsMa.0824.00011.0001i_04485 EsMa.0824.00014.0001i_02479\n10 EsMa.0824.00001.0001i_02131 EsMa.0824.00002.0001i_02651 EsMa.0824.00003.0001i_02366 EsMa.0824.00004.0001i_02431 EsMa.0824.00005.0001i_02379 EsMa.0824.00006.0001i_00454 EsMa.0824.00007.0001i_00253 EsMa.0824.00008.0001i_02607 EsMa.0824.00009.0001i_02686 EsMa.0824.00010.0001i_02436 EsMa.0824.00011.0001i_00110 EsMa.0824.00012.0001i_00951 EsMa.0824.00013.0001i_00978 EsMa.0824.00014.0001i_02375\n</code></pre> <p>In this file, each line corresponds to one orthologous row. The identifiers of all the genes that fall into this row are written in the line with a separator. For example, in line 6 we have one gene - it means that it is a singleton (it is so one, and no one has anything similar). Long rows are orthologous groups with many genes in them.</p> <p>Further after this step, from the orthologous series, we identify the <code>core</code> - that is, the genes encoding proteins that occur in a single copy in each genome.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-4-extract-pangenome","title":"Step 4: Extract pangenome","text":"<p>Let's also break down the command below in parts:</p> <ul> <li><code>PanACoTA</code> - the name of the tool we are running.</li> <li><code>corepers</code> - module of this tool that identifies and extracts <code>core</code>.</li> <li>By key <code>-p</code> we pass the <code>PanGenome-EsMa.All.prt-clust-0.8-mode1.lst</code> file.</li> <li>By key <code>-o</code> we specify where to store the output files.</li> </ul> <p>Input</p> <pre><code>PanACoTA corepers -p Pangenome/PanGenome-EsMa.All.prt-clust-0.8-mode1.lst -o Coregenome\n</code></pre> <p>Let's look at the log file.</p> <p>Input</p> <pre><code>cat Coregenome/PanACoTA-corepers.log\n</code></pre> <p>Output</p> <pre><code>[2024-08-25 18:54:45] :: INFO :: PanACoTA version 1.4.0\n[2024-08-25 18:54:45] :: INFO :: Command used\n     &gt; PanACoTA corepers -p Pangenome/PanGenome-EsMa.All.prt-clust-0.8-mode1.lst -o Coregenome\n[2024-08-25 18:54:45] :: INFO :: Will generate a CoreGenome.\n[2024-08-25 18:54:45] :: INFO :: Retrieving info from binary file\n[2024-08-25 18:54:45] :: INFO :: Generating Persistent genome of a dataset containing 14 genomes\n[2024-08-25 18:54:45] :: INFO :: The core genome contains 2709 families, each one having exactly 14 members, from the 14 different genomes.\n[2024-08-25 18:54:45] :: INFO :: Persistent genome step done.\n</code></pre> Info <p><code>[2024-08-25 18:54:45] :: INFO :: The core genome contains 2709 families, each one having exactly 14 members, from the 14 different genomes.</code></p> <p>That is, out of <code>9694</code> protein families, <code>2709</code> are single-copy and universal families.</p> <p>Now let's take a look at the output.</p> <p>Input</p> <pre><code>ls Coregenome/\n</code></pre> <p>Output</p> <pre><code>PanACoTA-corepers.log\nPanACoTA-corepers.log.err\nPersGenome_PanGenome-EsMa.All.prt-clust-0.8-mode1.lst-all_1.lst\n</code></pre> <p>We only have logs and one table - <code>PersGenome_PanGenome-EsMa.All.prt-clust-0.8-mode1.lst-all_1.lst</code>. Let's take a look at it.</p> <p>Input</p> <pre><code>head -10 Coregenome/PersGenome_PanGenome-EsMa.All.prt-clust-0.8-mode1.lst-all_1.lst\n</code></pre> <p>Output</p> <pre><code>1 EsMa.0824.00001.0001i_04241 EsMa.0824.00002.0001i_00106 EsMa.0824.00003.0001i_00093 EsMa.0824.00004.0001i_00095 EsMa.0824.00005.0001i_00094 EsMa.0824.00006.0001i_03340 EsMa.0824.00007.0001i_02672 EsMa.0824.00008.0001i_00094 EsMa.0824.00009.0001i_00094 EsMa.0824.00010.0001i_04572 EsMa.0824.00011.0001i_02424 EsMa.0824.00012.0001i_02999 EsMa.0824.00013.0001i_02846 EsMa.0824.00014.0001i_00094\n2 EsMa.0824.00001.0001i_03873 EsMa.0824.00002.0001i_00130 EsMa.0824.00003.0001i_00117 EsMa.0824.00004.0001i_00119 EsMa.0824.00005.0001i_00118 EsMa.0824.00006.0001i_03364 EsMa.0824.00007.0001i_02648 EsMa.0824.00008.0001i_00118 EsMa.0824.00009.0001i_00126 EsMa.0824.00010.0001i_04604 EsMa.0824.00011.0001i_02400 EsMa.0824.00012.0001i_03032 EsMa.0824.00013.0001i_02821 EsMa.0824.00014.0001i_00126\n10 EsMa.0824.00001.0001i_02131 EsMa.0824.00002.0001i_02651 EsMa.0824.00003.0001i_02366 EsMa.0824.00004.0001i_02431 EsMa.0824.00005.0001i_02379 EsMa.0824.00006.0001i_00454 EsMa.0824.00007.0001i_00253 EsMa.0824.00008.0001i_02607 EsMa.0824.00009.0001i_02686 EsMa.0824.00010.0001i_02436 EsMa.0824.00011.0001i_00110 EsMa.0824.00012.0001i_00951 EsMa.0824.00013.0001i_00978 EsMa.0824.00014.0001i_02375\n11 EsMa.0824.00001.0001i_02083 EsMa.0824.00002.0001i_02617 EsMa.0824.00003.0001i_02332 EsMa.0824.00004.0001i_02399 EsMa.0824.00005.0001i_02347 EsMa.0824.00006.0001i_00487 EsMa.0824.00007.0001i_00287 EsMa.0824.00008.0001i_02575 EsMa.0824.00009.0001i_02653 EsMa.0824.00010.0001i_02404 EsMa.0824.00011.0001i_00142 EsMa.0824.00012.0001i_00918 EsMa.0824.00013.0001i_00944 EsMa.0824.00014.0001i_02342\n12 EsMa.0824.00001.0001i_01323 EsMa.0824.00002.0001i_02588 EsMa.0824.00003.0001i_02303 EsMa.0824.00004.0001i_02370 EsMa.0824.00005.0001i_02318 EsMa.0824.00006.0001i_01160 EsMa.0824.00007.0001i_00316 EsMa.0824.00008.0001i_02546 EsMa.0824.00009.0001i_02534 EsMa.0824.00010.0001i_02375 EsMa.0824.00011.0001i_00174 EsMa.0824.00012.0001i_00889 EsMa.0824.00013.0001i_00915 EsMa.0824.00014.0001i_02313\n14 EsMa.0824.00001.0001i_01389 EsMa.0824.00002.0001i_02519 EsMa.0824.00003.0001i_02241 EsMa.0824.00004.0001i_02307 EsMa.0824.00005.0001i_02256 EsMa.0824.00006.0001i_01096 EsMa.0824.00007.0001i_00379 EsMa.0824.00008.0001i_02424 EsMa.0824.00009.0001i_02389 EsMa.0824.00010.0001i_02244 EsMa.0824.00011.0001i_00240 EsMa.0824.00012.0001i_00759 EsMa.0824.00013.0001i_00851 EsMa.0824.00014.0001i_02250\n15 EsMa.0824.00001.0001i_01420 EsMa.0824.00002.0001i_02486 EsMa.0824.00003.0001i_02209 EsMa.0824.00004.0001i_02275 EsMa.0824.00005.0001i_02224 EsMa.0824.00006.0001i_01062 EsMa.0824.00007.0001i_00411 EsMa.0824.00008.0001i_02391 EsMa.0824.00009.0001i_02356 EsMa.0824.00010.0001i_02211 EsMa.0824.00011.0001i_00272 EsMa.0824.00012.0001i_00727 EsMa.0824.00013.0001i_00819 EsMa.0824.00014.0001i_02217\n16 EsMa.0824.00001.0001i_01485 EsMa.0824.00002.0001i_02455 EsMa.0824.00003.0001i_02177 EsMa.0824.00004.0001i_02244 EsMa.0824.00005.0001i_02192 EsMa.0824.00006.0001i_01030 EsMa.0824.00007.0001i_00442 EsMa.0824.00008.0001i_02360 EsMa.0824.00009.0001i_02325 EsMa.0824.00010.0001i_02180 EsMa.0824.00011.0001i_00304 EsMa.0824.00012.0001i_00696 EsMa.0824.00013.0001i_00787 EsMa.0824.00014.0001i_02174\n20 EsMa.0824.00001.0001i_01791 EsMa.0824.00002.0001i_02262 EsMa.0824.00003.0001i_01989 EsMa.0824.00004.0001i_02098 EsMa.0824.00005.0001i_01999 EsMa.0824.00006.0001i_00822 EsMa.0824.00007.0001i_00574 EsMa.0824.00008.0001i_02152 EsMa.0824.00009.0001i_02124 EsMa.0824.00010.0001i_01983 EsMa.0824.00011.0001i_00496 EsMa.0824.00012.0001i_00561 EsMa.0824.00013.0001i_00575 EsMa.0824.00014.0001i_02021\n22 EsMa.0824.00001.0001i_01879 EsMa.0824.00002.0001i_02202 EsMa.0824.00003.0001i_01929 EsMa.0824.00004.0001i_02038 EsMa.0824.00005.0001i_01936 EsMa.0824.00006.0001i_00757 EsMa.0824.00007.0001i_00637 EsMa.0824.00008.0001i_02089 EsMa.0824.00009.0001i_02064 EsMa.0824.00010.0001i_01923 EsMa.0824.00011.0001i_00560 EsMa.0824.00012.0001i_00501 EsMa.0824.00013.0001i_00512 EsMa.0824.00014.0001i_01961\n</code></pre> <p>So here we are left with only those genes, those orthologues, which are in a single copy in all the organisms we have analysed.</p> <p>At this step, it is possible to build more than just coregens. The <code>corepers</code> module has many more arguments, such as:</p> <ul> <li><code>-t</code> : % (between 0 and 1) of the persistent genome: a family is considered as persistent if it contains exactly one member in at least tol% of the genomes, and is absent in all other genomes. Default value for t is 1, meaning that all genomes must have a unique member. This corresponds to the coregenome (so no need to put this option if you want a coregenome). More relaxed definitions of a persistent genome can be used by using -X or -M options (see below). <li><code>-X</code>: add this option if you want to relax a little the definition of the persistent genome, to get a mixed persistent genome. With -X option, a family is considered as persistent if at least tol% (tol defined by -t  parameter, see above) of the genomes have exactly one member in the family, but the other genomes can have either 0, either several members in the family. This is useful to add the families where, in some genomes, 1 protein has been split in several parts, because of sequencing or assembly error(s). <li><code>-M</code>: not compatible with -X. With this option, you get the multi persistent genome. It includes the strict and mixed persistent, but is even wider: the only condition for a family to be persistent is that it must have at least one member in at least tol% (tol still defined by -t  parameter) of the genomes (independent of the copy number)."},{"location":"03_Whole_%28pan%29genome_analyses/#step-5-aligning-the-sequence-of-core-gene-sequences","title":"Step 5: Aligning the sequence of core gene sequences","text":"Info <p>For each of our objects, we have an amino acid sequence and a nucleotide sequence. That is, we can do alignments of both. For biological analysis, the protein sequence is preferred because:</p> <ol> <li>Larger alphabet = more letter variants - 20 vs. 4 for nucleotide sequences.</li> <li>Amino acids have a more conservative structure (nucleotides are more variable, there are nonsynonymous substitutions, and amino acids are under stronger selection and it is easier for us to match conservative parts).</li> </ol> <p>However, when aligning amino acid sequences, we find it difficult to \u2018go back\u2019 and account for nucleotide substitutions. But there is a trick - we take the nucleotide sequences, translate them into amino acids and sort of align the amino acids, preserving the original triplets of nucleotides that were underneath those amino acids.</p> <p>Then:</p> <ul> <li>We can account for honest correct reading frame shifts - like a single nucleotide dropout in a nucleotide alignment (i.e. we allow for a situation that is impossible in an amino acid alignment).</li> <li>And at the same time we have information about the amino acid structure of the protein - a combination of two levels of information.</li> </ul> <p>Let's also break down the command below in parts:</p> <ul> <li><code>PanACoTA</code> - the name of the tool we are running.</li> <li><code>align</code> - module of this tool that aligns sequences with <code>mafft</code>.</li> <li>By key <code>-c</code> we pass the <code>PersGenome_PanGenome-EsMa.All.prt-clust-0.8-mode1.lst-all_1.lst</code> file.</li> <li>By key <code>-l</code> we pass the <code>LSTINFO-.lst</code> file from the Step 2.2..</li> <li>By key <code>-n</code> we pass the four-character name for the data, which was set previously.</li> <li>By key <code>-d</code> we pass the path to the output directory from Step 2..</li> <li>By key <code>-o</code> we specify where to store the output files.</li> </ul> <p>Input</p> <pre><code>PanACoTA align -c Coregenome/PersGenome_PanGenome-EsMa.All.prt-clust-0.8-mode1.lst-all_1.lst -l Annotation/LSTINFO-.lst -n EsMa -d Annotation/ -o Alignment\n</code></pre> <p>Let's go into the directory and look at the results.</p> <p>Input</p> <pre><code>ls Alignment\n</code></pre> <p>Output</p> <pre><code>Align-EsMa  PanACoTA-align_EsMa.log      PanACoTA-align_EsMa.log.err\nList-EsMa   PanACoTA-align_EsMa.log.details  Phylo-EsMa\n</code></pre> <p>We see a lot of log files. But now we are interested in the contents of the <code>Align-EsMa</code> directory.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-51-align-esma-directory","title":"Step 5.1. <code>Align-EsMa</code> directory","text":"<p>Input</p> <pre><code>ls -U Alignment/Align-EsMa | head -20\n</code></pre> <p>Output</p> <pre><code>EsMa-complete.nucl.cat.aln\nEsMa-current.1.gen\nEsMa-current.1.miss.lst\nEsMa-current.1.prt\nEsMa-current.10.gen\nEsMa-current.10.miss.lst\nEsMa-current.10.prt\nEsMa-current.1000.gen\nEsMa-current.1000.miss.lst\nEsMa-current.1000.prt\nEsMa-current.1007.gen\nEsMa-current.1007.miss.lst\nEsMa-current.1007.prt\nEsMa-current.1009.gen\nEsMa-current.1009.miss.lst\nEsMa-current.1009.prt\nEsMa-current.1011.gen\nEsMa-current.1011.miss.lst\nEsMa-current.1011.prt\nEsMa-current.1012.gen\nls: write error: Broken pipe\n</code></pre> <p>There are a lot of files in this folder (more than 1000), so we displayed only 20 of them on the screen. But now each separate file is not one organism (as it was in the previous steps), but one orthologous series (and it contains sequences from different organisms that were glued together).</p> <ul> <li><code>.prt</code> files correspond to protein, i.e. there will be amino acid sequences inside.</li> <li><code>.gen</code> files correspond to nucleotides, so there will be nucleotide sequences inside.</li> </ul>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-52-phylo-esma-directory","title":"Step 5.2. <code>Phylo-EsMa</code> directory","text":"<p>And now let's have a look at the contents of the <code>Phylo-EsMa</code> directory.</p> <p>Input</p> <pre><code>ls Alignment/Phylo-EsMa/\n</code></pre> <p>Output</p> <pre><code>EsMa.nucl.grp.aln\n</code></pre> <p><code>EsMa.nucl.grp.aln</code> is the alignment itselft, the main result of running the <code>PanACoTA</code>'s pipeline <code>align</code> module. It is the concatenate of the core genes alignment. It is from this alignment that we will build the phylogenetic tree in the next step.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-6-build-a-phylogenomic-tree","title":"Step 6: Build a phylogenomic tree","text":"<p>Let's also break down the command below in parts:</p> <ul> <li><code>PanACoTA</code> - the name of the tool we are running.</li> <li><code>tree</code> - module of this tool for phylogenetic tree construction.</li> <li>By key <code>-a</code> we pass the alignment file (<code>EsMa.nucl.grp.aln</code>).</li> <li>By key <code>-s</code> we specify which tree building tool we want to use.</li> <li>By key <code>-o</code> we specify where to store the output files.</li> </ul> <p>Input</p> <pre><code>PanACoTA tree -a Alignment/Phylo-EsMa/EsMa.nucl.grp.aln -s iqtree2 -o Tree\n</code></pre> <p>Let's look at the output!</p> <p>Input</p> <pre><code>ls Tree\n</code></pre> <p>Output</p> <pre><code>EsMa.nucl.grp.aln.iqtree_tree.bionj   EsMa.nucl.grp.aln.iqtree_tree.treefile\nEsMa.nucl.grp.aln.iqtree_tree.ckp.gz  PanACoTA-tree-iqtree2.log\nEsMa.nucl.grp.aln.iqtree_tree.iqtree  PanACoTA-tree-iqtree2.log.details\nEsMa.nucl.grp.aln.iqtree_tree.log     PanACoTA-tree-iqtree2.log.err\nEsMa.nucl.grp.aln.iqtree_tree.mldist\n</code></pre> <ul> <li><code>PanACoTA-tree-iqtree2.log</code>.</li> <li><code>PanACoTA-tree-iqtree2.log.details</code>.</li> <li><code>PanACoTA-tree-iqtree2.log.err</code>.</li> </ul> <p>It's all <code>PanACoTA</code>'s own logs</p> <ul> <li><code>EsMa.nucl.grp.aln.iqtree_tree.bionj</code> - this file contains the initial tree representation (tree draft).</li> <li><code>EsMa.nucl.grp.aln.iqtree_tree.treefile</code> - the very tree file we are interested in.</li> </ul> <p>Let's take a look at it!</p> <p>Input</p> <pre><code>cat Tree/EsMa.nucl.grp.aln.iqtree_tree.treefile\n</code></pre> <p>Output</p> <pre><code>(EsMa.0824.00001:0.0899533237,((EsMa.0824.00002:0.0014558718,(((EsMa.0824.00003:0.0012307785,EsMa.0824.00012:0.0012870353):0.0002683664,(EsMa.0824.00004:0.0013314298,(EsMa.0824.00006:0.0026908476,((EsMa.0824.00009:0.0000384090,EsMa.0824.00010:0.0000274042):0.0015596552,EsMa.0824.00013:0.0014403274):0.0002421241):0.0003947757):0.0002574774):0.0000880096,(EsMa.0824.00007:0.0012606069,EsMa.0824.00008:0.0011876549):0.0002556339):0.0001349309):0.0002322047,EsMa.0824.00014:0.0012843745):0.0012230243,(EsMa.0824.00005:0.0000163401,EsMa.0824.00011:0.0001690095):0.0009982711);\n</code></pre> <p>This is a tree in <code>Newick</code> format.</p>"},{"location":"03_Whole_%28pan%29genome_analyses/#step-61-tree-visualization","title":"Step 6.1. Tree visualization","text":"<p>For more details please visit Phylogenetics handbook. Here we will not use <code>iTOL</code> or <code>FigTree</code> but we will visualize the tree in the fastest way possible - using pseudo-graphics.</p> <p>Import <code>Phylo</code> module from <code>Biopython</code>.</p> <p>Input</p> <pre><code>from Bio import Phylo\n</code></pre> <p>Read the <code>EsMa.nucl.grp.aln.iqtree_tree.treefile</code> file to the <code>tree</code> variable.</p> <p>Input</p> <pre><code>tree = Phylo.read(\"Tree/EsMa.nucl.grp.aln.iqtree_tree.treefile\", \"newick\")\n</code></pre> <p>Visualize the tree!</p> <p>Input</p> <pre><code>Phylo.draw_ascii(tree)\n</code></pre> <p>Output</p> <pre><code>  __________________________________________________________ EsMa.0824.00001\n |\n , EsMa.0824.00002\n |\n |, EsMa.0824.00003\n ||\n || EsMa.0824.00012\n ||\n |, EsMa.0824.00004\n ||\n ||_ EsMa.0824.00006\n ||\n_||, EsMa.0824.00009\n |,|\n ||| EsMa.0824.00010\n ||\n || EsMa.0824.00013\n ||\n |, EsMa.0824.00007\n ||\n || EsMa.0824.00008\n |\n | EsMa.0824.00014\n |\n , EsMa.0824.00005\n |\n | EsMa.0824.00011\n</code></pre> <p>That's right! The longest branch is Shigella flexneri.</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/","title":"Overview","text":"<p>This chapter contains a manual on phylogenetic analysis </p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#instruction","title":"Instruction","text":"<p>To recreate any of the part of this manual please install:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/envs/qc.yaml\n</code></pre> <pre><code>conda env create -f phylo.yaml\n</code></pre> <p>And of cource do not forget to activate the envinronment!</p> <pre><code>conda activate phylo\n</code></pre> Warning <p>Disclaimer: when using <code>ete3</code> on <code>WSL</code> it will crash with error if you try to render any kind of picture (unless you have tunned <code>X11</code> forwarding). It is recommended to use <code>Ubuntu</code> or <code>macOS</code> for steps with <code>ete3</code>. Anyway there is always an alternative!</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#08-tanglegram","title":"08 Tanglegram","text":"<p>In the Tanglegram chapter there is guide how to make co-phylogeny plots using <code>R</code> by several ways: (1) manually creating it with <code>ggtree</code>; (2) easily creating small tanglegram with <code>cophyloplot()</code> function in <code>ape</code> and (3) creating large tanglegram with <code>dendextend</code>.</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#07-visualization-pro","title":"07 Visualization Pro","text":"<p>In the Visualization Pro chapter there is guide how to make a 1st class publication ready quality tree visualization using <code>ggtree</code> in <code>R</code>. By the end of the guide the circular ML-tree annotated with <code>tip-points</code>, <code>tip-labels</code> and <code>heatmaps</code> is created. The ideas from the first lesson continue here.</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#06-phylogenomics","title":"06 Phylogenomics","text":"<p>In the Phylogenomics chapter there is guide how to reconstruct phylogeny using more than just one gene with two examples of pipelines. The 1st is about using mitochondrial genes and manual work with data. The 2nd is about using proteomes and extracting single-copy orthologs with <code>Proteinortho</code>. The main concern in phylogenomics studies is storing the data and naming the sequences properly. This manual pays a lot attention to it and provides insights on using <code>BBMap</code> to achieve this goal.</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#05-rooting-and-comparing-trees-dating","title":"05 Rooting and comparing trees &amp; Dating","text":"<p>In the Root Date chapter there is guide how to root trees using different approaches (by a known external clade / <code>midpoint rooting</code> / <code>non-reversible</code> model), how to compare these approaches and how to perform root-supporte tree visualisation (<code>rootstrap</code>). Also there is a mini-project on dating the common ancestor of smoky leopards with \"full-circle\" study: downloading the data from NCBI using <code>efetch</code>, aligning the sequences with <code>mafft</code>, trimming with <code>trimal</code> and tree construnction with <code>iqtree2</code> followed by visualization and analysis in GUI apps: <code>Beauti</code>, <code>Tracer</code>, <code>TreeAnnotator</code> and <code>FigTree</code>.</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#04-preparing-the-alignment-and-building-trees","title":"04 Preparing the alignment and building trees","text":"<p>In the Trees chapter there is guide how to prepare the alignment by cutting bad areas out of with <code>trimAl</code>, how to select the model with <code>ModelTest-NG</code> and <code>ModelFinder</code>, how to perform a tree search with <code>RaxML-NG</code> and <code>IQ-TREE</code> and how to do topology assesment with <code>bootstrap</code>.</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#03-multiple-sequence-alignment","title":"03 Multiple sequence alignment","text":"<p>In the MSA chapter there is guide how to perform multiple sequence alignment using all possible tools (<code>clustalw</code>, <code>clustalo</code> <code>muscle</code>, <code>mafft</code>, <code>kalign</code>, <code>tcoffee</code>, <code>prank</code>).</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#02-working-with-ncbi","title":"02 Working with NCBI","text":"<p>In the Mining data chapter there is guide how to work with NCBI using all possible ways - <code>R</code> (<code>reutils</code>), <code>Python</code> (<code>Bio::Entrez</code>) and <code>bash</code> (<code>esearch</code>).</p>"},{"location":"IV.%20Phylogenetics/04_00_Overview/#01-drawing-trees","title":"01 Drawing Trees","text":"<p>In the Intro Trees chapter there is guide how to draw phylogenetic trees using both <code>R</code> (<code>ape</code>, <code>ggtree</code>) and <code>Python</code> (<code>Bio::Phylo</code>, <code>ete3</code>).</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/","title":"Drawing Trees","text":"<p>This chapter contains a manual on drawing simple phylogenetic trees.</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#instruction","title":"Instruction","text":""},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#part-1-language-r","title":"Part 1: Language - <code>R</code>","text":""},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#part-11-libraryape","title":"Part 1.1: <code>library(ape)</code>","text":""},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-1-read-tree-abcde-from-text-into-simpletree-object","title":"Step 1: Read tree <code>(((A,B),(C,D)),E);</code> from text into <code>simpletree</code> object","text":"<p>Input</p> <pre><code>simpletree &lt;- read.tree(text = \"(((A,B), (C,D)), E);\")\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-2-draw-simpletree-using-standard-function-from-ape-package","title":"Step 2: Draw <code>simpletree</code> using standard function from <code>ape</code> package","text":"<p>Input</p> <pre><code>plot.phylo(simpletree)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-3-save-this-tree-in-raster-format-png-and-vector-format-svg-or-pdf","title":"Step 3: Save this tree in raster format (png) and vector format (svg or pdf)","text":"<p>Input</p> <pre><code>png(\"simpletree.png\")\nplot.phylo(simpletree)\ndev.off()\n\nsvg(\"simpletree.svg\", width = 4, height = 4)\nplot.phylo(simpletree)\ndev.off()\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-4-read-the-file-httpswwwjasondaviescomtree-of-lifelifetxt-into-the-treeoflife-object","title":"Step 4: Read the file https://www.jasondavies.com/tree-of-life/life.txt into the <code>treeoflife</code> object","text":"<p>Input</p> <pre><code>treeoflife &lt;- read.tree(\"https://www.jasondavies.com/tree-of-life/life.txt\")\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-5-draw-a-treeoflife-using-a-standard-function-from-the-ape-package-and-save-this-tree-in-any-format-we-like","title":"Step 5: Draw a <code>treeoflife</code> using a standard function from the <code>ape</code> package and save this tree in any format we like","text":"<p>Input</p> <pre><code>plot.phylo(treeoflife, cex = 0.2)\n\npng(filename = \"treeOfLife.png\", width = 20, height = 20, units = \"cm\", res = 600)\nplot.phylo(treeoflife, cex = 0.2)\ndev.off()\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-6-draw-treeoflife-unrooted-or-circular","title":"Step 6: Draw <code>treeoflife</code> unrooted or circular","text":"<p>Input</p> <pre><code>plot.phylo(treeoflife, type = \"unrooted\", no.margin = T, cex = 0.2)\n\nplot.phylo(treeoflife, type = \"radial\", cex = 0.2)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#part-12-libraryggtree","title":"Part 1.2: <code>library(ggtree)</code>","text":""},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-7-draw-treeoflife-using-ggtree-with-minimal-settings","title":"Step 7: Draw treeoflife using <code>ggtree</code> with minimal settings","text":"<p>Input</p> <pre><code>treeoflife_text &lt;- readLines(\"https://www.jasondavies.com/tree-of-life/life.txt\")\n\ntreeoflife &lt;- ggtree::read.tree(text = treeoflife_text)\nggtree(treeoflife)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-8-draw-treeoflife-with-ggtree-so-that-the-inscriptions-are-readable","title":"Step 8: Draw treeoflife with <code>ggtree</code> so that the inscriptions are readable","text":"<p>Input</p> <pre><code>ggtree(treeoflife) + geom_tiplab(size = 1)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-9-draw-treeoflife-in-a-circular-shape-with-readable-inscriptions","title":"Step 9: Draw treeoflife in a circular shape with readable inscriptions","text":"<p>Input</p> <pre><code>ggtree(treeoflife) + layout_circular() + geom_tiplab(size = 2)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-10-draw-treeoflife-with-additional-highlighting-of-some-part-of-it","title":"Step 10: Draw treeoflife with additional highlighting of some part of it","text":"<p>Input</p> <pre><code>treeoflife &lt;- groupOTU(treeoflife, c(\"Homo_sapiens\", \"Pan_troglodytes\"))\nggtree(treeoflife) + layout_circular() +\n  geom_tiplab2(size = 2) + geom_tippoint(aes(alpha = group), col = \"red\") +\n  scale_color_manual(values = c(0,1), aesthetics = \"alpha\") +\n  theme(legend.position = 'null')\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#part-2-language-python","title":"Part 2: Language - <code>Python</code>","text":""},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#part-21-biophylo","title":"Part 2.1:  <code>Bio::Phylo</code>","text":"<p>Input</p> <pre><code>import random\nfrom io import StringIO\n\nimport matplotlib\nimport requests\nfrom Bio import Phylo\nfrom ete3 import Tree, TreeStyle, NodeStyle\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-11-read-the-tree-httpswwwjasondaviescomtree-of-lifelifetxt","title":"Step 11: Read the tree https://www.jasondavies.com/tree-of-life/life.txt","text":"<p>Input</p> <pre><code>raw_tree = StringIO(requests.get('https://www.jasondavies.com/tree-of-life/life.txt').text)\ntree1 = Phylo.read(raw_tree, \"newick\")\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-12-draw-this-tree-with-pseudo-graphics-draw_ascii","title":"Step 12: Draw this tree with pseudo-graphics (draw_ascii)","text":"<p>Input</p> <pre><code>Phylo.draw_ascii(tree1)\n</code></pre> <p>Output</p> <pre><code>                             , Escherichia_coli_EDL933\n                             |\n                             | Escherichia_coli_O157_H7\n                             |\n                             , Escherichia_coli_O6\n                             |\n                             | Escherichia_coli_K12\n                             |\n                             , Shigella_flexneri_2a_2457T\n                             |\n                             | Shigella_flexneri_2a_301\n                             |\n                             , Salmonella_enterica\n                             |\n                             | Salmonella_typhi\n                             |\n                             | Salmonella_typhimurium\n                             |\n                             , Yersinia_pestis_Medievalis\n                             |\n                             , Yersinia_pestis_KIM\n                             |\n                            ,| Yersinia_pestis_CO92\n                            ||\n                            || Photorhabdus_luminescens\n                            ||\n                            ||   ___ Blochmannia_floridanus\n                            || ,|\n                            || ||____ Wigglesworthia_brevipalpis\n                            ||_|\n                            |  |___ Buchnera_aphidicola_Bp\n                            |  |\n                            |  | , Buchnera_aphidicola_APS\n                            |  |_|\n                            |    | Buchnera_aphidicola_Sg\n                            |\n                            |, Pasteurella_multocida\n                            ||\n                            || Haemophilus_influenzae\n                           ,||\n                           ||| Haemophilus_ducreyi\n                           ||\n                           ||, Vibrio_vulnificus_YJ016\n                           |||\n                           ||| Vibrio_vulnificus_CMCP6\n                          ,|||\n                          ||,| Vibrio_parahaemolyticus\n                          ||||\n                          |||| Vibrio_cholerae\n                          |||\n                         ,||| Photobacterium_profundum\n                         |||\n                         |||_ Shewanella_oneidensis\n                         ||\n                         || , Pseudomonas_putida\n                         ||,|\n                         |||| Pseudomonas_syringae\n                         | |\n                         | | Pseudomonas_aeruginosa\n                         |\n                         |    , Xylella_fastidiosa_700964\n                         |   _|\n                        ,|  | | Xylella_fastidiosa_9a5c\n                        ||__|\n                        ||  |, Xanthomonas_axonopodis\n                        ||  ||\n                        ||   | Xanthomonas_campestris\n                        ||\n                        ||___ Coxiella_burnetii\n                        |\n                       _|   , Neisseria_meningitidis_A\n                      | |  ,|\n                      | | ,|| Neisseria_meningitidis_B\n                      | | ||\n                      | | || Chromobacterium_violaceum\n                      | |,|\n                      | |||  , Bordetella_pertussis\n                      | ||| _|\n                      | |||| , Bordetella_parapertussis\n                      | |||| |\n                      |  | | | Bordetella_bronchiseptica\n                      |  | |\n                      |  | |_ Ralstonia_solanacearum\n                      |  |\n                      |  |__ Nitrosomonas_europaea\n                     ,|\n                     ||      , Agrobacterium_tumefaciens_Cereon\n                     ||     ,|\n                     ||    ,|| Agrobacterium_tumefaciens_WashU\n                     ||    ||\n                     ||    || Rhizobium_meliloti\n                     ||   ,|\n                     ||   ||, Brucella_suis\n                     ||   |,|\n                     ||   ||| Brucella_melitensis\n                     ||  ,||\n                     ||  |||_ Rhizobium_loti\n                     ||  ||\n                     || _|| , Rhodopseudomonas_palustris\n                     ||| ||_|\n                    ,||| |  | Bradyrhizobium_japonicum\n                    |||| |\n                    || | |__ Caulobacter_crescentus\n                    || |\n                    || |  ______ Wolbachia_sp._wMel\n                    || |_|\n                    ||   |    , Rickettsia_prowazekii\n                    ||   |____|\n                    ||        | Rickettsia_conorii\n                    ||\n                    ||         , Helicobacter_pylori_J99\n                    ||        _|\n                    ||      ,| | Helicobacter_pylori_26695\n                    ||      ||\n                    ||     ,|| Helicobacter_hepaticus\n                    ||     ||\n                    ||_____|| Wolinella_succinogenes\n                    |      |\n                    |      |_ Campylobacter_jejuni\n                    |\n                    | _____ Desulfovibrio_vulgaris\n                    ||\n                    || __ Geobacter_sulfurreducens\n                    |||\n                    |||_____ Bdellovibrio_bacteriovorus\n                   ,||\n                   |||   __ Acidobacterium_capsulatum\n                   |||__|\n                   ||   |___ Solibacter_usitatus\n                   ||\n                   ||______ Fusobacterium_nucleatum\n                   ||\n                   ||  ____ Aquifex_aeolicus\n                   ||_|\n                   || |___ Thermotoga_maritima\n                   ||\n                   ||     __ Thermus_thermophilus\n                   || ___|\n                   |||   |___ Deinococcus_radiodurans\n                   |||\n                   |||______ Dehalococcoides_ethenogenes\n                   |||\n                   |||     _ Nostoc_sp._PCC_7120\n                   |||    |\n                   |||   ,|_ Synechocystis_sp._PCC6803\n                   |||   ||\n                   | |   || Synechococcus_elongatus\n                   | |   |\n                   | |  ,|   , Synechococcus_sp._WH8102\n                   | |  ||  ,|\n                   | |  ||  || Prochlorococcus_marinus_MIT9313\n                   | |  ||  |\n                   | |__||__|_ Prochlorococcus_marinus_SS120\n                   |    |   |\n                   |    |   |_ Prochlorococcus_marinus_CCMP1378\n                   |    |\n                   |    |__ Gloeobacter_violaceus\n                   |\n                   |     ____ Gemmata_obscuriglobus\n                   |  __|\n                   | |  |____ Rhodopirellula_baltica\n                   | |\n                   |,|      , Leptospira_interrogans_L1-130\n                   ||| _____|\n                   ||||     | Leptospira_interrogans_56601\n                   ||||\n                   || |     ___ Treponema_pallidum\n                   || |   _|\n                   || |__| |_ Treponema_denticola\n                   ||    |\n                   ||    |____ Borrelia_burgdorferi\n                   ||\n                   ||           , Tropheryma_whipplei_TW08/27\n                   ||      _____|\n                   ||    _|     | Tropheryma_whipplei_Twist\n                   ||   | |\n                   ||   | |___ Bifidobacterium_longum\n                   ||   |\n                   ||   |    , Corynebacterium_glutamicum_13032\n                   ||   |   ,|\n                   ||   |   || Corynebacterium_glutamicum\n                   ||   |   |\n                   ||___|  _| Corynebacterium_efficiens\n                   ||   | | |\n                   ||   | | | Corynebacterium_diphtheriae\n                   ||   | |\n                   ||   |,| , Mycobacterium_bovis\n                   ||   ||| |\n                   ||   ||| , Mycobacterium_tuberculosis_CDC1551\n                   ||   ||| |\n                   ||   ||| | Mycobacterium_tuberculosis_H37Rv\n                   ||   |||_|\n                   ||    |  | Mycobacterium_leprae\n                   ||    |  |\n                   ||    |  | Mycobacterium_paratuberculosis\n                   ||    |\n                   ||    | , Streptomyces_avermitilis\n                   ||    |_|\n                   ||      | Streptomyces_coelicolor\n  _________________||\n |                 || ______ Fibrobacter_succinogenes\n |                 |,|\n |                 ||| ____ Chlorobium_tepidum\n |                 ||||\n |                 || |    , Porphyromonas_gingivalis\n |                 || |____|\n |                 ||      |_ Bacteroides_thetaiotaomicron\n |                 ||\n |                 ||         , Chlamydophila_pneumoniae_TW183\n |                 ||        ,|\n |                 ||        |, Chlamydia_pneumoniae_J138\n |                 ||        ||\n |                 ||       ,|, Chlamydia_pneumoniae_CWL029\n |                 ||       |||\n |                 ||       ||| Chlamydia_pneumoniae_AR39\n |                 ||_______||\n |                 |        || Chlamydophila_caviae\n |                 |        |\n |                 |        |, Chlamydia_muridarum\n |                 |        ||\n |                 |         | Chlamydia_trachomatis\n |                 |\n |                 |  _ Thermoanaerobacter_tengcongensis\n |                 | |\n |                 |_|  _ Clostridium_tetani\n |                 | | |\n |                 | |_|_ Clostridium_perfringens\n |                 |   |\n |                 |   |_ Clostridium_acetobutylicum\n |                 |\n |                 |         ___ Mycoplasma_mobile\n |                 |      __|\n |                 |     |  |___ Mycoplasma_pulmonis\n |                 |     |\n |                 |     |         _ Mycoplasma_pneumoniae\n |                 |    ,|     ___|\n |                 |    ||   _|   |_ Mycoplasma_genitalium\n |                 |    ||  | |\n |                 |    || ,| |__ Mycoplasma_gallisepticum\n |                 |   _|| ||\n |                 |  | ||_||____ Mycoplasma_penetrans\n |                 |  | |  |\n |                 | ,| |  |____ Ureaplasma_parvum\n |                 | || |\n |                 | || |____ Mycoplasma_mycoides\n |                 | ||\n |                 | ||_____ Phytoplasma_Onion_yellows\n |                 | |\n |                 | |   , Listeria_monocytogenes_F2365\n |                 | |  ,|\n |                 | | ,|| Listeria_monocytogenes_EGD\n |                 | | ||\n |                 | | || Listeria_innocua\n |                 | | |\n |                 | |,|, Oceanobacillus_iheyensis\n |                 | ||,|\n |                 | |||| Bacillus_halodurans\n |                 | |||\n |                 | ||| , Bacillus_cereus_ATCC_14579\n |                 |_||| |\n |                   |||_| Bacillus_cereus_ATCC_10987\n |                   ||| |\n |                   ||| | Bacillus_anthracis\n |                   |||\n |                   |||_ Bacillus_subtilis\n |                   ||\n |                   ||  , Staphylococcus_aureus_MW2\n |                   ||  |\n |                   ||  , Staphylococcus_aureus_N315\n |                   ||__|\n |                   ||  | Staphylococcus_aureus_Mu50\n |                   ||  |\n_|                   ||  | Staphylococcus_epidermidis\n |                   ||\n |                   ||   , Streptococcus_agalactiae_III\n |                   ||   |\n |                   ||   | Streptococcus_agalactiae_V\n |                   ||   |\n |                    |   , Streptococcus_pyogenes_M1\n |                    |   |\n |                    |   , Streptococcus_pyogenes_MGAS8232\n |                    |   |\n |                    |   , Streptococcus_pyogenes_MGAS315\n |                    |   |\n |                    |   | Streptococcus_pyogenes_SSI-1\n |                    |  ,|\n |                    |  || Streptococcus_mutans\n |                    |  ||\n |                    | ,|, Streptococcus_pneumoniae_R6\n |                    | |||\n |                    | ||| Streptococcus_pneumoniae_TIGR4\n |                    |,||\n |                    |||| Lactococcus_lactis\n |                    |||\n |                    ||| Enterococcus_faecalis\n |                     |\n |                     | __ Lactobacillus_johnsonii\n |                     ||\n |                      |_ Lactobacillus_plantarum\n |\n |                      ____ Thalassiosira_pseudonana\n |                     |\n |                     |  __ Cryptosporidium_hominis\n |                     |_|\n |                     | |___ Plasmodium_falciparum\n |                     |\n |                     |  , Oryza_sativa\n |                    ,| _|\n |                    |,| | Arabidopsis_thaliana\n |                    |||\n |                    |||____ Cyanidioschyzon_merolae\n |                    ||\n |                    ||____ Dictyostelium_discoideum\n |                    ||\n |                    ||     , Eremothecium_gossypii\n |                    ||   __|\n |                    || _|  | Saccharomyces_cerevisiae\n |                    ||| |\n |                    ||| |__ Schizosaccharomyces_pombe\n |                    |||\n |                    |||  , Anopheles_gambiae\n |                    ||| ,|\n |                    ||| || Drosophila_melanogaster\n |                    ||| |\n |                   _||| | , Takifugu_rubripes\n |                  | | |,|,|\n |                  | | ||||| Danio_rerio\n |                  | | ||||\n |                  | | ||||, Rattus_norvegicus\n |                  | | |||,|\n |                  | | || || Mus_musculus\n |                  | | || |\n |                  | | || |, Homo_sapiens\n |                  | |  | ||\n |            ______| |  | || Pan_troglodytes\n |           |      | |  | |\n |           |      | |  | | Gallus_gallus\n |           |      | |  |\n |           |      | |  |  , Caenorhabditis_elegans\n |           |      | |  |__|\n |           |      | |     | Caenorhabditis_briggsae\n |           |      | |\n |           |      | |_____ Leishmania_major\n |           |      |\n |           |      |_______ Giardia_lamblia\n |___________|\n             |       __________ Nanoarchaeum_equitans\n             |      |\n             |      |        _ Sulfolobus_tokodaii\n             |     _|   ____|\n             |    | | ,|    |__ Sulfolobus_solfataricus\n             |    | | ||\n             |    | |_||_____ Aeropyrum_pernix\n             |    |   |\n             |    |   |_______ Pyrobaculum_aerophilum\n             |    |\n             |____|          , Thermoplasma_volcanium\n                  |  ________|\n                  | |        | Thermoplasma_acidophilum\n                  | |\n                  | |   ____ Methanobacterium_thermautotrophicum\n                  | | ,|\n                  | | ||____ Methanopyrus_kandleri\n                  |_| |\n                    | |    __ Methanococcus_maripaludis\n                    | |___|\n                    |,|   | Methanococcus_jannaschii\n                    |||\n                    |||    , Pyrococcus_horikoshii\n                    |||   ,|\n                    |||___|| Pyrococcus_abyssi\n                     |    |\n                     |    | Pyrococcus_furiosus\n                     |\n                     | ____ Archaeoglobus_fulgidus\n                     ||\n                      |  _______ Halobacterium_sp._NRC-1\n                      |_|\n                        |   , Methanosarcina_acetivorans\n                        |___|\n                            | Methanosarcina_mazei\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-13-draw-a-tree-with-draw","title":"Step 13: Draw a tree with draw","text":"<p>Input</p> <pre><code>Phylo.draw(tree1, do_show = False)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-14-save-the-tree-image-in-raster-png-and-vector-svgpdf-formats","title":"Step 14: Save the tree image in raster (png) and vector (svg/pdf) formats","text":"<p>Input</p> <pre><code>Phylo.draw(tree1, do_show = False)\nmatplotlib.pyplot.savefig(\"py_tree1_phylo.png\")\nmatplotlib.pyplot.savefig(\"py_tree1_phylo.pdf\")\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-15-draw-the-tree-in-a-more-or-less-readable-form","title":"Step 15: Draw the tree in a more or less readable form","text":"<p>Input</p> <pre><code>matplotlib.rc('font', size=1) matplotlib.pyplot.figure(figsize=(24,12))\nPhylo.draw(tree1, do_show = False) matplotlib.pyplot.savefig(\"py_tree1_phylo_enhanced.png\", dpi=600)\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#part-22-python-ete-ete3","title":"Part 2.2: <code>Python: ETE (ETE3)</code>","text":""},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-16-read-a-simple-tree-abcde-from-the-text","title":"Step 16: Read a simple tree (((A,B),(C,D)),E) from the text","text":"<p>Input</p> <pre><code>simpletree = Tree(\"(((A,B), (C,D)), E);\")\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-17-save-this-tree-to-a-file","title":"Step 17: Save this tree to a file","text":"<p>Input</p> <pre><code>simpletree.render(\"simpletree.png\", w=183, units=\"mm\") ;\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-18-read-the-tree-httpswwwjasondaviescomtree-of-lifelifetxt-and-draw-this-tree-with-default-settings","title":"Step 18: Read the tree https://www.jasondavies.com/tree-of-life/life.txt and draw this tree with default settings","text":"<p>Input</p> <pre><code>raw_tree = requests.get('https://www.jasondavies.com/tree-of-life/life.txt').text tree2 = Tree(raw_tree, format=1)\ntree2.render(\"py_tree2_ete3.pdf\") ;\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-19-draw-this-tree-circular","title":"Step 19: Draw this tree circular","text":"<p>Input</p> <pre><code>circular_style = TreeStyle()\ncircular_style.mode = \"c\"\ncircular_style.scale = 20\ntree2.render(\"py_tree2_ete3_circ.pdf\", tree_style=circular_style) ;\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_01_Intro_Trees/#step-20-draw-this-treeoflife-with-additional-highlighting-of-some-part-of-your-choice","title":"Step 20: Draw this treeoflife with additional highlighting of some part of your choice","text":"<p>Input</p> <pre><code>nst1 = NodeStyle()\nnst1[\"bgcolor\"] = \"LightSteelBlue\"\nn1 = tree2.get_common_ancestor(\"Homo_sapiens\", \"Danio_rerio\") n1.set_style(nst1)\ntree2.render(\"py_tree2_ete3_vertebrates.png\", tree_style=circular_style) ;\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/","title":"Working with NCBI","text":"<p>This chapter contains a manual on working with NCBI's databases using Python, Bash and R.</p>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#instruction","title":"Instruction","text":"Note <p>Before working with NCBI using <code>Python</code> or <code>R</code> languages user must call the library and set the email.</p> PythonR <pre><code>from Bio import Entrez\nEntrez.email = 'example@example.com'\n</code></pre> <pre><code>library(reutils)\noptions(reutils.email = \"example@example.com\")\n</code></pre> <p>Do not forget to change the <code>example@example.com</code> to your actuall email address!</p>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#step-1-find-articles-in-pubmed-for-a-query-of-interest-to-you-and-return-abstracts-of-those-articles-in-plain-text-format","title":"Step 1: Find articles in PubMed for a query of interest to you and return abstracts of those articles in plain text format","text":"<p>Input</p> PythonBashR <pre><code>handle = Entrez.esearch(db = \"pubmed\", term = \"Cyclophilin A AND Open reading frame AND Real-time PCR\")\nrecord = Entrez.read(handle)\nprint(record)\nmshandle = Entrez.efetch(db=\"pubmed\", id=record[\"IdList\"][0:2], rettype=\"abstract\", retmode=\"text\")\nprint(mshandle.read())\n</code></pre> <pre><code>esearch -email example@example.com \\\n-db pubmed \\\n-query \"Cyclophilin A AND Open reading frame AND Real-time PCR\" \\\n| efetch -mode text -format abstract\n</code></pre> <pre><code>ms &lt;- esearch(db = \"pubmed\", term = \"Cyclophilin A AND Open reading frame AND Real-time PCR\")\nabstr &lt;- efetch(ms, rettype = \"abstract\")\nabstr\nwrite(content(abstr), \"abstracts.txt\")\n</code></pre> <p>Output</p> PythonBashR <pre><code>{'Count': '3', 'RetMax': '3', 'RetStart': '0', 'IdList': ['29097323', '19041262', '18819019'], 'TranslationSet': [{'From': 'Cyclophilin A', 'To': '\"cyclophilin a\"[MeSH Terms] OR \"cyclophilin a\"[All Fields]'}, {'From': 'Open reading frame', 'To': '\"open reading frames\"[MeSH Terms] OR (\"open\"[All Fields] AND \"reading\"[All Fields] AND \"frames\"[All Fields]) OR \"open reading frames\"[All Fields] OR (\"open\"[All Fields] AND \"reading\"[All Fields] AND \"frame\"[All Fields]) OR \"open reading frame\"[All Fields]'}, {'From': 'Real-time PCR', 'To': '\"real-time polymerase chain reaction\"[MeSH Terms] OR (\"real-time\"[All Fields] AND \"polymerase\"[All Fields] AND \"chain\"[All Fields] AND \"reaction\"[All Fields]) OR \"real-time polymerase chain reaction\"[All Fields] OR (\"real\"[All Fields] AND \"time\"[All Fields] AND \"pcr\"[All Fields]) OR \"real time pcr\"[All Fields]'}], 'QueryTranslation': '(\"cyclophilin a\"[MeSH Terms] OR \"cyclophilin a\"[All Fields]) AND (\"open reading frames\"[MeSH Terms] OR (\"open\"[All Fields] AND \"reading\"[All Fields] AND \"frames\"[All Fields]) OR \"open reading frames\"[All Fields] OR (\"open\"[All Fields] AND \"reading\"[All Fields] AND \"frame\"[All Fields]) OR \"open reading frame\"[All Fields]) AND (\"real time polymerase chain reaction\"[MeSH Terms] OR (\"real time\"[All Fields] AND \"polymerase\"[All Fields] AND \"chain\"[All Fields] AND \"reaction\"[All Fields]) OR \"real time polymerase chain reaction\"[All Fields] OR (\"real\"[All Fields] AND \"time\"[All Fields] AND \"pcr\"[All Fields]) OR \"real time pcr\"[All Fields])'}\n1. Fish Shellfish Immunol. 2018 Jan;72:383-388. doi: 10.1016/j.fsi.2017.10.053. \nEpub 2017 Oct 31.\n\nMolecular identification and expression analysis of a novel cyclophilin a gene \nin the red swamp crayfish, Procambarus clarkii.\n\nZhu J(1), Lin F(2), Li F(2), Wang Y(3).\n\nAuthor information:\n(1)College of Animal Sciences, Zhejiang University, Hangzhou, 310058, China; \nSchool of Life Sciences, RanHuzhou University, Huzhou, 313000, China.\n(2)Zhejiang Institute of Freshwater Fisheries, Huzhou, 313001, China.\n(3)College of Animal Sciences, Zhejiang University, Hangzhou, 310058, China. \nElectronic address: ywang@zju.edu.cn.\n\nCyclophilin A (Cyp A) is the main intracellular receptor of cyclosporin A (CsA) \nbelonging to the immunophilin family, which is known as an effective \nimmunosuppressive drug. This study aimed to gain insights into the structure and \nbiological function of cyclophilin A in the red swamp crayfish, Procambarus \nclarkii (PcCypA). We cloned PcCypA by homology cloning and anchored polymerase \nchain reaction (PCR), and assessed its mRNA and protein expression levels in \ndifferent tissues using quantitative real-time PCR and western blot analysis, \nrespectively. The full-length DNA contained a 5' untranslated region (UTR) \ncomprising 108 base pairs (bp), an open reading frame of 495 bp encoding a \npolypeptide of 164 amino acids with an estimated molecular mass of 17.3 kDa, and \na 3' UTR of 281 bp including a significant poly(A) plus tail sequence. The \npredicted amino acid sequence of PcCypA shared high identity with CypA in other \norganisms. PcCypA transcripts were detected in the hepatopancreas, gill, heart, \nmuscle, testis, and ovary of crayfish, with the highest expression levels in the \nheart. Western blot analysis found one 17-kDa band in all of the tissues \nexamined, except for the ovary. Molecular identification and expression analysis \nof PcCypA will facilitate further studies of the immune defense mechanisms in \nred swamp crayfish, and provide new insights into freshwater invertebrate \nimmunology.\n\nCopyright \u00a9 2017 Elsevier Ltd. All rights reserved.\n\nDOI: 10.1016/j.fsi.2017.10.053\nPMID: 29097323 [Indexed for MEDLINE]\n\n\n2. Fish Shellfish Immunol. 2009 Jan;26(1):115-21. doi: 10.1016/j.fsi.2008.03.022.\nEpub 2008 Apr 7.\n\nMolecular cloning and mRNA expression of cyclophilin A gene in black tiger \nshrimp (Penaeus monodon).\n\nQiu L(1), Jiang S, Huang J, Wang W, Zhu C, Su T.\n\nAuthor information:\n(1)The South China Sea Fisheries Research Institute, Chinese Academy of Fishery \nSciences, Guangzhou, PR China.\n\nThe techniques of homology cloning and anchored PCR were used to clone the \ncyclophilin A (CypA) gene from black tiger shrimp (Penaeus monodon). The \nfull-length cDNA of black tiger shrimp CypA (btsCypA) contained a 5' \nuntranslated region (UTR) of 81 bp, an ORF (open reading frame) of 495 bp \nencoding a polypeptide of 164 amino acids with an estimated molecular mass of \n17.68 kDa and a 3' UTR of 308 bp. The predicted amino acid sequence of btsCypA \nshared high identity with CypA in other organisms. A quantitative reverse \ntranscriptase Real-Time PCR (qRT-PCR) assay was developed to assess the mRNA \nexpression of btsCypA in different tissues and the temporal expression of \nbtsCypA in the hepatopancreas challenged by lipopolyssacharide (LPS). \nHigher-level mRNA expression of btsCypA was detected in the tissues of \nhepatopancreas and blood. The expression of btsCypA in the hepatopancreas was up \nregulated after stimulated by LPS. The results indicated that btsCypA was a \nconstitutive and inducible expressed protein and could be induced by LPS.\n\nDOI: 10.1016/j.fsi.2008.03.022\nPMID: 19041262 [Indexed for MEDLINE]\n</code></pre> <pre><code>1. Fish Shellfish Immunol. 2018 Jan;72:383-388. doi: 10.1016/j.fsi.2017.10.053. \nEpub 2017 Oct 31.\n\nMolecular identification and expression analysis of a novel cyclophilin a gene \nin the red swamp crayfish, Procambarus clarkii.\n\nZhu J(1), Lin F(2), Li F(2), Wang Y(3).\n\nAuthor information:\n(1)College of Animal Sciences, Zhejiang University, Hangzhou, 310058, China; \nSchool of Life Sciences, RanHuzhou University, Huzhou, 313000, China.\n(2)Zhejiang Institute of Freshwater Fisheries, Huzhou, 313001, China.\n(3)College of Animal Sciences, Zhejiang University, Hangzhou, 310058, China. \nElectronic address: ywang@zju.edu.cn.\n\nCyclophilin A (Cyp A) is the main intracellular receptor of cyclosporin A (CsA) \nbelonging to the immunophilin family, which is known as an effective \nimmunosuppressive drug. This study aimed to gain insights into the structure and \nbiological function of cyclophilin A in the red swamp crayfish, Procambarus \nclarkii (PcCypA). We cloned PcCypA by homology cloning and anchored polymerase \nchain reaction (PCR), and assessed its mRNA and protein expression levels in \ndifferent tissues using quantitative real-time PCR and western blot analysis, \nrespectively. The full-length DNA contained a 5' untranslated region (UTR) \ncomprising 108 base pairs (bp), an open reading frame of 495 bp encoding a \npolypeptide of 164 amino acids with an estimated molecular mass of 17.3 kDa, and \na 3' UTR of 281 bp including a significant poly(A) plus tail sequence. The \npredicted amino acid sequence of PcCypA shared high identity with CypA in other \norganisms. PcCypA transcripts were detected in the hepatopancreas, gill, heart, \nmuscle, testis, and ovary of crayfish, with the highest expression levels in the \nheart. Western blot analysis found one 17-kDa band in all of the tissues \nexamined, except for the ovary. Molecular identification and expression analysis \nof PcCypA will facilitate further studies of the immune defense mechanisms in \nred swamp crayfish, and provide new insights into freshwater invertebrate \nimmunology.\n\nCopyright \u00a9 2017 Elsevier Ltd. All rights reserved.\n\nDOI: 10.1016/j.fsi.2017.10.053\nPMID: 29097323 [Indexed for MEDLINE]\n\n\n2. Fish Shellfish Immunol. 2009 Jan;26(1):115-21. doi: 10.1016/j.fsi.2008.03.022.\nEpub 2008 Apr 7.\n\nMolecular cloning and mRNA expression of cyclophilin A gene in black tiger \nshrimp (Penaeus monodon).\n\nQiu L(1), Jiang S, Huang J, Wang W, Zhu C, Su T.\n\nAuthor information:\n(1)The South China Sea Fisheries Research Institute, Chinese Academy of Fishery \nSciences, Guangzhou, PR China.\n\nThe techniques of homology cloning and anchored PCR were used to clone the \ncyclophilin A (CypA) gene from black tiger shrimp (Penaeus monodon). The \nfull-length cDNA of black tiger shrimp CypA (btsCypA) contained a 5' \nuntranslated region (UTR) of 81 bp, an ORF (open reading frame) of 495 bp \nencoding a polypeptide of 164 amino acids with an estimated molecular mass of \n17.68 kDa and a 3' UTR of 308 bp. The predicted amino acid sequence of btsCypA \nshared high identity with CypA in other organisms. A quantitative reverse \ntranscriptase Real-Time PCR (qRT-PCR) assay was developed to assess the mRNA \nexpression of btsCypA in different tissues and the temporal expression of \nbtsCypA in the hepatopancreas challenged by lipopolyssacharide (LPS). \nHigher-level mRNA expression of btsCypA was detected in the tissues of \nhepatopancreas and blood. The expression of btsCypA in the hepatopancreas was up \nregulated after stimulated by LPS. The results indicated that btsCypA was a \nconstitutive and inducible expressed protein and could be induced by LPS.\n\nDOI: 10.1016/j.fsi.2008.03.022\nPMID: 19041262 [Indexed for MEDLINE]\n\n\n3. Mol Biol Rep. 2009 Jul;36(6):1637-45. doi: 10.1007/s11033-008-9363-8. Epub\n2008  Sep 26.\n\nA cyclophilin A inducible expressed in gonad of zhikong scallop Chlamys farreri.\n\nSong X(1), Wang L, Song L, Zhao J, Zhang H, Zheng P, Qiu L, Liu X, Wu L.\n\nAuthor information:\n(1)College of Animal Science and Technology, Northwest A&amp;F University, Yangling, \nShaanxi, 712100, China.\n\nCyclophilin A (CypA), a receptor for the immunosuppressive agent cyclosporin A \n(CsA), is a cis-trans peptidyl-prolyl isomerase (PPIase) which accelerates the \ncis-trans isomerization of prolyl-peptide bonds, interacts with a variety of \nproteins and therefore regulates their activities. One CypA (designated CfCypA) \ncDNA was cloned from Chlamys farreri by expressed sequence tag (EST) and rapid \namplification of cDNA ends (RACE) techniques. The full-length cDNA of CfCypA \nconsisted of 1,248 nucleotides with a canonical polyadenylation signal sequence \nAATAAA, a poly (A) tail, and an open reading frame (ORF) of 495 nucleotides \nencoding a polypeptide of 164 amino acids. The deduced amino acid sequence \nshared high similarity with CypA from the other species, indicating that CfCypA \nshould be a new member of the CypA family. Quantitative real-time (RT) PCR was \nemployed to assess the mRNA expression of CfCypA in various tissues and its \ntemporal expression in haemocytes and gonad of scallops challenged with Vibrio \nanguillarum. The mRNA transcripts of CfCypA could be detected in all the \nexamined tissues with highest expression level in gonad. After bacterial \nchallenge, the expression level of CfCypA was almost unchanged in haemocytes, \nbut up-regulated in gonad and increased to the peak (22.59-fold; P &lt; 0.05) at 4 \nh post-injection, and then dropped to the original level at 8 h post-injection. \nThese results indicated that CfCypA was constitutive expressed in haemocytes, \nbut could be induced in gonad, and perhaps played a critical role in response to \nthe bacterial challenge in gonad.\n\nDOI: 10.1007/s11033-008-9363-8\nPMID: 18819019 [Indexed for MEDLINE]\n</code></pre> <pre><code>## Object of class 'efetch'\n## 1. Fish Shellfish Immunol. 2018 Jan;72:383-388. doi: 10.1016/j.fsi.2017.10.053.\n## Epub 2017 Oct 31.\n##\n## Molecular identification and expression analysis of a novel cyclophilin a gene\n## in the red swamp crayfish, Procambarus clarkii.\n##\n## Zhu J(1), Lin F(2), Li F(2), Wang Y(3).\n##\n## Author information:\n## (1)College of Animal Sciences, Zhejiang University, Hangzhou, 310058, China;\n## School of Life Sciences, RanHuzhou University, Huzhou, 313000, China.\n## (2)Zhejiang Institute of Freshwater Fisheries, Huzhou, 313001, China.\n## ...\n## EFetch query using the 'pubmed' database.\n## Query url: 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?=efe...'\n## Retrieval type: 'abstract', retrieval mode: 'text'\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#step-2-find-organism-id-by-name-in-the-taxonomy-database","title":"Step 2: Find organism ID by name in the taxonomy database","text":"<p>Input</p> PythonBashR <pre><code>handle = Entrez.esearch(db = \"taxonomy\", term = \"Procambarus clarkii\") record = Entrez.read(handle)\nprint(record)\nprint(record['IdList'])\n</code></pre> <pre><code>esearch -email example@example.com \\\n-db taxonomy -query \"Procambarus clarkii\" \\\n| esummary | grep TaxId\n</code></pre> <pre><code>esearch(db = \"taxonomy\", term = \"Procambarus clarkii\")\n</code></pre> <p>Output</p> PythonBashR <pre><code>{'Count': '1', 'RetMax': '1', 'RetStart': '0', 'IdList': ['6728'], 'TranslationSet': [], 'TranslationStack': [{'Term': 'Procambarus clarkii[All Names]', 'Field': 'All Names', 'Count': '1', 'Explode': 'N'}, 'GROUP'], 'QueryTranslation': 'Procambarus clarkii[All Names]'}\n['6728']\n</code></pre> <pre><code>&lt;TaxId&gt;6728&lt;/TaxId&gt;\n&lt;AkaTaxId&gt;0&lt;/AkaTaxId&gt;\n</code></pre> <pre><code>## Object of class 'esearch'\n## List of UIDs from the 'taxonomy' database.\n## [1] \"6728\"\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#step-3-query-the-nucleotide-sequence-database-by-gene-name-and-return-a-table-with-uids","title":"Step 3: Query the nucleotide sequence database by gene name and return a table with UIDs","text":"<p>Input</p> PythonBashR <pre><code>handle = Entrez.esearch(db=\"nucleotide\", term=\"cyclophilin AND Procambarus clarkii[orgn]\")\nrecord = Entrez.read(handle)\nfor rec in record[\"IdList\"]:\n    temphandle = Entrez.read(Entrez.esummary(db=\"nucleotide\", id=rec, retmode=\"text\"))\n    print(temphandle[0]['Id']+\"\\t\"+temphandle[0]['Caption']+\"\\t\"+str(int(temphandle[0]['Length'])))#+\"\\n\")\n</code></pre> <pre><code>esearch -email example@example.com \\\n-db nucleotide -query \"cyclophilin AND Procambarus clarkii[orgn]\" \\\n| esummary -mode xml \\\n| xtract -pattern DocumentSummary -element Id Caption Slen\n</code></pre> <pre><code>crcnp &lt;- esearch(db = \"nucleotide\", term = \"cyclophilin AND Procambarus clarkii[orgn]\") \nsu &lt;- esummary(crcnp)\ncosu &lt;- content(su, \"parsed\")\nas.data.frame(cosu[,c(\"Id\", \"Caption\", \"Slen\")])\n</code></pre> <p>Output</p> PythonBashR <pre><code>1940114972  MT601694    636\n429843488   JX878886    495\n</code></pre> <pre><code>1940114972  MT601694    636\n429843488   JX878886    495\n</code></pre> <pre><code>## Id Caption Slen\n## 1 1940114972 MT601694 636\n## 2 429843488 JX878886 495\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#step-4-give-the-nucleotide-or-protein-sequence-database-a-text-query-and-then-return-the-sequences-in-fasta-format-which-we-write-to-a-file","title":"Step 4: Give the nucleotide or protein sequence database a text query and then return the sequences in fasta format, which we write to a file","text":"<p>Input</p> PythonBashR <pre><code>handle = Entrez.esearch(db=\"protein\", term=\"cyclophilin AND Procambarus clarkii[orgn]\")\nrecord = Entrez.read(handle)\nEntrez.efetch(db=\"protein\", id=record[\"IdList\"], retmode=\"text\", rettype=\"fasta\").read()\nwith open(\"cyclophilin.fasta\", \"w\") as ouf:\n    for rec in record[\"IdList\"]:\n        lne = Entrez.efetch(db=\"protein\", id=rec, retmode=\"text\", rettype=\"fasta\").read()\n        ouf.write(lne+\"\\n\")\nwith open(\"cyclophilin.fasta\", \"r\") as fastaf:\n    snippet = [next(fastaf) for x in range(5)]\n    print(snippet)\n</code></pre> <pre><code>esearch -email example@example.com \\\n-db protein -query \"cyclophilin AND Procambarus clarkii[orgn]\" \\\n| efetch -format fasta -mode text &gt;cyclophilin.fa\nhead cyclophilin.fa\n</code></pre> <pre><code>s &lt;- esearch(db = \"protein\", term = \"cyclophilin AND Procambarus clarkii[orgn]\") \nf &lt;- efetch(uid = s[1:10], db = \"protein\", rettype = \"fasta\", retmode = \"text\")\nwrite(content(f), \"cyclophilin.fa\")\nfastaf &lt;- readLines(\"cyclophilin.fa\")\nhead(fastaf)\n</code></pre> <p>Output</p> PythonBashR <pre><code>['&gt;QPM92673.1 cyclophilin [Procambarus clarkii]\\n', 'MKALVAVVALLVIFSVFNRADGQAGESKGPKVTHKVFFDITIGGVPKGTVVIGLFGSTVPRTAQNFFELA\\n', 'QKPVGEGYKGSVFHRVIKDFMIQGGDFTRGDGTGGRSIYGERFADENFKLKHFGAGWLSMANAGKDTNGS\\n', 'QFFITTNKTTWLDGKHVVFGKVLAGMPIIREIEASATDGRDRPVAEVKIVDSRGEALSQPFESVAKEDAT\\n', 'D\\n']\n</code></pre> <pre><code>&gt;QPM92673.1 cyclophilin [Procambarus clarkii]\nMKALVAVVALLVIFSVFNRADGQAGESKGPKVTHKVFFDITIGGVPKGTVVIGLFGSTVPRTAQNFFELA\nQKPVGEGYKGSVFHRVIKDFMIQGGDFTRGDGTGGRSIYGERFADENFKLKHFGAGWLSMANAGKDTNGS\nQFFITTNKTTWLDGKHVVFGKVLAGMPIIREIEASATDGRDRPVAEVKIVDSRGEALSQPFESVAKEDAT\nD\n&gt;AGA16578.1 cyclophilin A [Procambarus clarkii]\nMGNPQVFFDITANGKPLGRIVMELRADVVPKTAENFRALCTGEKGFGYKGSTFHRVIPNFMCQGGDFTAG\nNGTGGKSIYGSKFADENFQLPHDGPGILSMANAGPNTNGSQFFLCTVRTNWLDGKHVVLGKVTEGMDVVR\nQIEGYGKPSGETSAKIVVANCGQL\n</code></pre> <pre><code>## [1] \"&gt;QPM92673.1 cyclophilin [Procambarus clarkii]\"\n## [2] \"MKALVAVVALLVIFSVFNRADGQAGESKGPKVTHKVFFDITIGGVPKGTVVIGLFGSTVPRTAQNFFELA\"\n## [3] \"QKPVGEGYKGSVFHRVIKDFMIQGGDFTRGDGTGGRSIYGERFADENFKLKHFGAGWLSMANAGKDTNGS\"\n## [4] \"QFFITTNKTTWLDGKHVVFGKVLAGMPIIREIEASATDGRDRPVAEVKIVDSRGEALSQPFESVAKEDAT\"\n## [5] \"D\"\n## [6] \"\"\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#step-5-download-the-protein-corresponding-to-the-known-nucleotide-uid","title":"Step 5: Download the protein corresponding to the known nucleotide UID","text":"<p>Input</p> PythonBashR <pre><code>lhandle = Entrez.elink(dbfrom=\"nucleotide\", db=\"protein\", id=\"429843488\") \nlrecord = Entrez.read(lhandle)\nprothandle = lrecord[0][\"LinkSetDb\"][0]['Link'][0]['Id']\nrrecord = Entrez.efetch(db=\"protein\", id=prothandle, rettype=\"fasta\", retmode=\"text\")\nwith open (\"prot_from_nt.fasta\", \"w\") as ouf:\n    ouf.write(rrecord.read()+\"\\n\")\nwith open(\"prot_from_nt.fasta\", \"r\") as fastaf:\n    snippet = [next(fastaf) for x in range(5)]\n    print(snippet)\n</code></pre> <pre><code>elink -id 429843488 -db nuccore \\\n-target protein | efetch -format fasta -mode text \\\n&gt; prot_from_nt.fa\nhead prot_from_nt.fa\n</code></pre> <pre><code>lnk1 &lt;- elink(uid = \"429843488\", dbFrom = \"nucleotide\", dbTo = \"protein\")\nprotein &lt;- efetch(lnk1, rettype = \"fasta\", retmode = \"text\")\nwrite(content(protein), \"prot_from_nt.fa\")\nread_protein &lt;- readLines(\"prot_from_nt.fa\")\nhead(read_protein)\n</code></pre> <p>Output</p> PythonBashR <pre><code>['&gt;AGA16578.1 cyclophilin A [Procambarus clarkii]\\n', 'MGNPQVFFDITANGKPLGRIVMELRADVVPKTAENFRALCTGEKGFGYKGSTFHRVIPNFMCQGGDFTAG\\n', 'NGTGGKSIYGSKFADENFQLPHDGPGILSMANAGPNTNGSQFFLCTVRTNWLDGKHVVLGKVTEGMDVVR\\n', 'QIEGYGKPSGETSAKIVVANCGQL\\n', '\\n']\n</code></pre> <pre><code>&gt;AGA16578.1 cyclophilin A [Procambarus clarkii]\nMGNPQVFFDITANGKPLGRIVMELRADVVPKTAENFRALCTGEKGFGYKGSTFHRVIPNFMCQGGDFTAG\nNGTGGKSIYGSKFADENFQLPHDGPGILSMANAGPNTNGSQFFLCTVRTNWLDGKHVVLGKVTEGMDVVR\nQIEGYGKPSGETSAKIVVANCGQL\n</code></pre> <pre><code>## [1] \"&gt;AGA16578.1 cyclophilin A [Procambarus clarkii]\"\n## [2] \"MGNPQVFFDITANGKPLGRIVMELRADVVPKTAENFRALCTGEKGFGYKGSTFHRVIPNFMCQGGDFTAG\"\n## [3] \"NGTGGKSIYGSKFADENFQLPHDGPGILSMANAGPNTNGSQFFLCTVRTNWLDGKHVVLGKVTEGMDVVR\"\n## [4] \"QIEGYGKPSGETSAKIVVANCGQL\"\n## [5] \"\"\n## [6] \"\"\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_02_Mining_Data/#step-6-download-all-sequences-from-the-pmid-job-and-write-them-to-a-fasta-file","title":"Step 6: Download all sequences from the PMID ... job and write them to a fasta file","text":"<p>Input</p> PythonBashR <pre><code>lhandle = Entrez.elink(dbfrom=\"pubmed\", db=\"nucleotide\", id=\"19041262\")\nlrecord = Entrez.read(lhandle)\nids = []\nfor el in lrecord[0][\"LinkSetDb\"][0][\"Link\"]:\n    ids.append(el['Id'])\nrrecord = Entrez.efetch(db=\"nucleotide\", id=ids[:4], rettype=\"fasta\", retmode=\"text\")\nwith open (\"py_fasta_pmid.fasta\", \"w\") as ouf:\n    ouf.write(rrecord.read()+\"\\n\")\nwith open(\"py_fasta_pmid.fasta\", \"r\") as fastaf:\n    snippet = [next(fastaf) for x in range(5)]\n    print(snippet)\n</code></pre> <pre><code>elink -db pubmed -target nucleotide -id 19041262 \\\n| efetch -format fasta -mode text &gt; py_fasta_pmid.fa\nhead py_fasta_pmid.fa\n</code></pre> <pre><code>ms2 &lt;- esearch(term = \"Cyclophilin A AND Open reading frame AND Real-time PCR\", db = \"pubmed\")\nlnk &lt;- elink(ms2[2], dbFrom = \"pubmed\", dbTo = \"nuccore\")\nf2 &lt;- efetch(lnk, rettype = \"fasta\", retmode = \"text\")\nwrite(content(f2), \"py_fasta_pmid_R.fa\")\nread_seq &lt;- readLines(\"py_fasta_pmid_R.fa\")\nhead(read_seq)\n</code></pre> <p>Output</p> PythonBashR <pre><code>['&gt;EU164775.1 Penaeus monodon cyclophilin A mRNA, complete cds\\n', 'CTCGTCCTCGGTTCCCGGCGATCCTCTGGAGATTGTTGCCGTAGATGGACTTGCGAGCAGACCTACACCA\\n', 'ACTTAGCCACCATGGGCAACCCCAAAGTCTTTTTCGACATTACCGCTGACAACCAGCCCGTTGGCAGGAT\\n', 'CGTCATGGAGCTCCGCGCCGACGTGGTCCCCAAGACCGCCGAGAACTTCCGGTCGCTGTGCACGGGCGAG\\n', 'AAGGGCTTCGGCTACAAGGGTTCCTGCTTCCACCGCGTGATCCCCAACTTCATGTGTCAGGGAGGCGACT\\n']\n</code></pre> <pre><code>&gt;EU164775.1 Penaeus monodon cyclophilin A mRNA, complete cds\nCTCGTCCTCGGTTCCCGGCGATCCTCTGGAGATTGTTGCCGTAGATGGACTTGCGAGCAGACCTACACCA\nACTTAGCCACCATGGGCAACCCCAAAGTCTTTTTCGACATTACCGCTGACAACCAGCCCGTTGGCAGGAT\nCGTCATGGAGCTCCGCGCCGACGTGGTCCCCAAGACCGCCGAGAACTTCCGGTCGCTGTGCACGGGCGAG\nAAGGGCTTCGGCTACAAGGGTTCCTGCTTCCACCGCGTGATCCCCAACTTCATGTGTCAGGGAGGCGACT\nTCACCGCCGGCAACGGCACGGGCGGCAAGTCCATCTACGGCAACAAATTCGAGGACGAGAACTTCGCACT\nGAAGCACACCGGCCCCGGCACCCTGTCCATGGCCAACGCCGGCCCCAACACCAACGGGTCGCAATTCTTC\nATCTGCACCGTCAAAACCCCCTGGCTGGACAACAAGCACGTGGTTTTCGGCTCCGTGGTGGAGGGCATGG\nACATCGTGCGCCAGGTCGAGGGTTTCGGCACCCCCAACGGCTCTTGCAAGCGGAAAGTGATGATCGCCAA\nCTGCGGCCAGCTGTAAAGTTTCAGAACATTCCCCCTTAGCCGCCCACCCCTTTTTTTTTTGATGTAATTG\n</code></pre> <pre><code>## [1] \"&gt;EU164775.1 Penaeus monodon cyclophilin A mRNA, complete cds\"\n## [2] \"CTCGTCCTCGGTTCCCGGCGATCCTCTGGAGATTGTTGCCGTAGATGGACTTGCGAGCAGACCTACACCA\"\n## [3] \"ACTTAGCCACCATGGGCAACCCCAAAGTCTTTTTCGACATTACCGCTGACAACCAGCCCGTTGGCAGGAT\"\n## [4] \"CGTCATGGAGCTCCGCGCCGACGTGGTCCCCAAGACCGCCGAGAACTTCCGGTCGCTGTGCACGGGCGAG\"\n## [5] \"AAGGGCTTCGGCTACAAGGGTTCCTGCTTCCACCGCGTGATCCCCAACTTCATGTGTCAGGGAGGCGACT\"\n## [6] \"TCACCGCCGGCAACGGCACGGGCGGCAAGTCCATCTACGGCAACAAATTCGAGGACGAGAACTTCGCACT\"\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/","title":"Multiple Sequence Alignment","text":"<p>This chapter contains a manual on aligning multiple sequences at once.</p>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#instruction","title":"Instruction","text":"Question <p>Where to get the data?</p> <p>Download it from GitHub repository:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/04_Phylogenetics/04_03_MSA.zip\n</code></pre> <pre><code>unzip 04_03_MSA.zip &amp;&amp; rm -rf 04_03_MSA.zip\n</code></pre> <p>For this work, we will use the alignments of SUP35 gene.</p> <p>As we will be working with several tools we will compare them. We will compare them based on:</p> <ul> <li>Running time.</li> <li>Alignment length.</li> </ul> <p>These are not the best metrics to compare the alignments. Yet for the purposes of this manual they do well.</p>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#step-1-run-6-possible-alignment-algorithms-for-10-dna-sequences","title":"Step 1: Run 6 possible alignment algorithms for 10 DNA sequences","text":"<p>Input</p> <code>clustalw</code><code>muscle</code><code>mafft</code><code>kalign</code><code>t_coffee</code><code>prank</code> <pre><code>time clustalw -INFILE=data/SUP35_10seqs.fa \\\n    -OUTPUT=FASTA \\\n    -OUTFILE=10_DNA_seqs/02_SUP35_10seqs.clustalw.fa\n</code></pre> <pre><code>time muscle -align data/SUP35_10seqs.fa \\\n    -output 10_DNA_seqs/02_SUP35_10seqs_muscle.fa\n</code></pre> <pre><code>time mafft --auto data/SUP35_10seqs.fa &gt;\\\n    10_DNA_seqs/02_SUP35_10seqs_mafft.fa\n</code></pre> <pre><code>time kalign &lt;data/SUP35_10seqs.fa &gt;\\\n    10_DNA_seqs/02_SUP35_10seqs_kalign.fa\n</code></pre> <pre><code>time t_coffee -infile=data/SUP35_10seqs.fa \\\n    -outfile=10_DNA_seqs/02_SUP35_10seqs_tcoffee.fa \\\n    -output=fasta_aln\n</code></pre> <pre><code>time prank -d=data/SUP35_10seqs.fa \\\n    -o=10_DNA_seqs/02_SUP35_10seqs_prank.fa \\\n    -codon\n</code></pre> <p>Now let's use a simple script to assess the alignment length.</p> <p>Input</p> <pre><code>from Bio import AlignIO\nimport os\n</code></pre> <p>Input</p> <pre><code>folder_path = '10_DNA_seqs'\nalignment_files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if file.endswith('.fa')]\n\nfor file in alignment_files:\n    alignment = AlignIO.read(file, 'fasta')\n    alignment_length = alignment.get_alignment_length()\n    print(f\"Alignment length in file {file}: {alignment_length}\")\n</code></pre> <p>Output</p> <pre><code>Alignment length in file 10_DNA_seqs/02_SUP35_10seqs_tcoffee.fa: 2210\nAlignment length in file 10_DNA_seqs/02_SUP35_10seqs_mafft.fa: 2166\nAlignment length in file 10_DNA_seqs/02_SUP35_10seqs.clustalw.fa: 2148\nAlignment length in file 10_DNA_seqs/02_SUP35_10seqs_kalign.fa: 2152\nAlignment length in file 10_DNA_seqs/02_SUP35_10seqs_muscle.fa: 2333\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#comparative-table","title":"Comparative table","text":"Question <p>Which algorithm is better to use?</p> Tool Time Alignment length <code>clustalw</code> 5.641 s 2148 <code>muscle</code> 5.009 s 2333 <code>mafft</code> 4.382 s 2166 <code>kalign</code> 0.475 s 2152 <code>t_coffee</code> 20.869 s 2210 <code>prank</code> &gt;10 min NA Success <p>It's best to use <code>muscle</code>!</p>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#how-to-fix-the-alignment","title":"How to fix the alignment","text":"Question <p>What's wrong with the alignment of <code>SUP35_10seqs_strange_aln.fa</code> and how to fix it?</p> <p>Let's take a look at this alignment in <code>UGENE</code></p> <p>It can be seen that the sequence <code>SUP35_Spar_A12_Liti_</code> is strange. Most likely it is a reverse, i.e. it is reverse complementary.</p> <p>Let's do a couple of youtz, youtz, youtz.</p> <p>It's beautiful!</p>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#step-2-run-6-possible-alignment-algorithms-for-250-dna-sequences","title":"Step 2: Run 6 possible alignment algorithms for 250 DNA sequences","text":"<p>Input</p> <code>clustalw</code><code>muscle</code><code>mafft</code><code>kalign</code><code>t_coffee</code><code>prank</code> <pre><code>time clustalw -INFILE=data/SUP35_250seqs.fa \\\n    -OUTPUT=FASTA \\\n    -OUTFILE=250_DNA_seqs/05_SUP35_250seqs.clustalw.fa\n</code></pre> <pre><code>time muscle -align data/SUP35_250seqs.fa \\\n    -output 250_DNA_seqs/05_SUP35_250seqs_muscle.fa\n</code></pre> <pre><code>time mafft --auto data/SUP35_250seqs.fa &gt;\\\n    250_DNA_seqs/05_SUP35_250seqs_mafft.fa\n</code></pre> <pre><code>time kalign &lt;data/SUP35_250seqs.fa &gt;\\\n    250_DNA_seqs/05_SUP35_250seqs_kalign.fa\n</code></pre> <pre><code>time t_coffee -infile=data/SUP35_250seqs.fa \\\n    -outfile=250_DNA_seqs/05_SUP35_250seqs_tcoffee.fa \\\n    -output=fasta_aln\n</code></pre> <pre><code>time prank -d=data/SUP35_250seqs.fa \\\n    -o=250_DNA_seqs/05_SUP35_250seqs_prank.fa \\\n    -codon\n</code></pre> <p>Now let's use a simple script to assess the alignment length.</p> <p>Input</p> <pre><code>folder_path = '250_DNA_seqs'\nalignment_files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if file.endswith('.fa')]\n\nfor file in alignment_files:\n    alignment = AlignIO.read(file, 'fasta')\n    alignment_length = alignment.get_alignment_length()\n    print(f\"Alignment length in file {file}: {alignment_length}\")\n</code></pre> <p>Output</p> <pre><code>Alignment length in file 250_DNA_seqs/05_SUP35_250seqs.clustalw.fa: 2179\nAlignment length in file 250_DNA_seqs/05_SUP35_250seqs_mafft.fa: 2322\nAlignment length in file 250_DNA_seqs/05_SUP35_250seqs_muscle.fa: 2365\nAlignment length in file 250_DNA_seqs/05_SUP35_250seqs_kalign.fa: 2210\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#comparative-table_1","title":"Comparative table","text":"Question <p>Has our choice of algorithm changed?</p> Tool Time Alignment length <code>clustalw</code> 48:41.97 min 2179 <code>muscle</code> 30:44.42 min 2365 <code>mafft</code> 41.962 s 2322 <code>kalign</code> 7.996 s 2210 <code>t_coffee</code> &gt;1 h NA <code>prank</code> &gt;1 h NA Succes <p>All the sympathies are on the side of <code>kalign</code> for the reason that it aligned 250 sequences in 8 seconds. But to be fair, <code>mafft</code> is not bad either. Its alignment is longer, and its working time is 42 seconds, not 30 or 48 minutes...</p>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#step-25-how-to-get-amino-acid-sequences-from-nucleotide-sequences-translate","title":"Step 2.5: How to get amino acid sequences from nucleotide sequences (translate)?","text":""},{"location":"IV.%20Phylogenetics/04_03_MSA/#option-1-transeq","title":"Option 1: <code>transeq</code>","text":"<p>The simplest and fastest variant. With its help, we \"stupidly\" do the translation starting from the first nucleotide and up to the last one.</p> <p>Input</p> <pre><code>transeq -sequence data/SUP35_10seqs.fa -outseq data/SUP35_10seqs.t.faa\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#option-2-getorf","title":"Option 2: <code>getorf</code>","text":"<p><code>getorf</code> operates based on the assumption that it was given a sequence that has an open reading frame. <code>getorf</code> is not highly intelligent. Anything that starts with a methionine and ends with a stop codon is an open reading frame! It needs to tune our representation, otherwise we get a bunch of junk. Especially in fairly long sequences. But if we know how long this junk should be and we need to predict proteins quickly from our data of some Sanger sequencing, it is a very good option!</p> <p>Input</p> <pre><code>getorf -sequence data/SUP35_10seqs.fa -outseq data/SUP35_10seqs.g.faa -noreverse -minsize 500\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#step-3-run-7-possible-alignment-algorithms-for-10-protein-sequences","title":"Step 3: Run 7 possible alignment algorithms for 10 protein sequences","text":"<p>Input</p> <code>clustalw</code><code>clustalo</code><code>muscle</code><code>mafft</code><code>kalign</code><code>t_coffee</code><code>prank</code> <pre><code>time clustalw -INFILE=data/SUP35_10seqs.g.faa \\\n    -OUTFILE=10_protein_seqs/08_SUP35_10seqs.clustalw.faa \\\n    -OUTPUT=FASTA \\\n    -TYPE=protein\n</code></pre> <pre><code>time clustalo --infile=data/SUP35_10seqs.g.faa \\\n    --outfile=10_protein_seqs/08_SUP35_10seqs.clustalo.faa \\\n    --verbose\n</code></pre> <pre><code>time muscle -align data/SUP35_10seqs.g.faa \\\n    -output 10_protein_seqs/08_SUP35_10seqs_muscle.faa\n</code></pre> <pre><code>time mafft --auto data/SUP35_10seqs.g.faa &gt;\\\n    10_protein_seqs/08_SUP35_250seqs_mafft.fa\n</code></pre> <pre><code>time kalign &lt;data/SUP35_10seqs.g.faa &gt;\\\n    10_protein_seqs/08_SUP35_10seqs_kalign.faa\n</code></pre> <pre><code>time t_coffee -infile=data/SUP35_10seqs.g.faa \\\n    -outfile=10_protein_seqs/08_SUP35_10seqs_tcoffee.faa \\\n    -output=fasta_aln\n</code></pre> <pre><code>time prank -d=data/SUP35_10seqs.g.faa \\\n    -o=10_protein_seqs/08_SUP35_10seqs_prank.faa\n</code></pre> <p>Now let's use a simple script to assess the alignment length.</p> <p>Input</p> <pre><code>folder_path = '10_protein_seqs'\nalignment_files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if file.endswith('.fa') | file.endswith('.faa') | file.endswith('.fas')]\n\nfor file in alignment_files:\n    alignment = AlignIO.read(file, 'fasta')\n    alignment_length = alignment.get_alignment_length()\n    print(f\"Alignment length in file {file}: {alignment_length}\")\n</code></pre> <p>Output</p> <pre><code>Alignment length in file 10_protein_seqs/08_SUP35_250seqs_mafft.fa: 759\nAlignment length in file 10_protein_seqs/08_SUP35_10seqs_muscle.faa: 765\nAlignment length in file 10_protein_seqs/08_SUP35_10seqs_kalign.faa: 721\nAlignment length in file 10_protein_seqs/08_SUP35_10seqs_tcoffee.faa: 752\nAlignment length in file 10_protein_seqs/08_SUP35_10seqs.clustalw.faa: 719\nAlignment length in file 10_protein_seqs/08_SUP35_10seqs.clustalo.faa: 757\nAlignment length in file 10_protein_seqs/08_SUP35_10seqs_prank.faa.best.fas: 776\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#comparative-table_2","title":"Comparative table","text":"Question <p>What is the best algorithm to use?</p> Tool Time Alignment length <code>clustalw</code> 0.684 s 719 <code>clustalo</code> 0.742 s 757 <code>muscle</code> 0.582 s 765 <code>mafft</code> 0.754 s 759 <code>kalign</code> 0.062 s 721 <code>t_coffee</code> 2.697 s 752 <code>prank</code> 4:50.84 min 776 Succes <p>This is where <code>muscle</code> is the best. It worked for less than 1 second and its length is quite respectable.</p>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#practice-1","title":"Practice 1","text":"Question <p>How to add 2 more nucleotide sequences to an alignment of 250 nucleotide sequences, previously aligning them, with <code>mafft</code>?</p> <p>Input</p> <pre><code>mafft --auto data/SUP35_2addseqs.fa &gt; 252_DNA_seqs/10_SUP35_2addseqs_mafft.fa\nmafft --add 252_DNA_seqs/10_SUP35_2addseqs_mafft.fa 250_DNA_seqs/05_SUP35_250seqs_mafft.fa &gt; 252_DNA_seqs/10_SUP35_252seqs_mafft.fa\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#practice-2","title":"Practice 2","text":"Question <p>Extract from NCBI all sequences for the query \"Parapallasea 18S\" (Parapallasea is a taxon and 18S is a gene) and save to the file fasta</p> <p>Input</p> <pre><code>esearch -db nucleotide -query \"Parapallasea 18S\" | efetch -format fasta &gt;data/Parapallasea_18.fa\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#option-1-muscle","title":"Option 1: <code>muscle</code>","text":"<p>Input</p> <pre><code>muscle -align data/Parapallasea_18.fa -output data/Parapallasea_18.fa.muscle.aln\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#option-2-mafft","title":"Option 2: <code>mafft</code>","text":"<p>Input</p> <pre><code>mafft --auto data/Parapallasea_18.fa &gt; data/Parapallasea_18.fa.mafft.aln\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_03_MSA/#practice-3","title":"Practice 3","text":"Question <p>Create a blast database from a set of <code>Ommatogammarus_flavus_transcriptome_assembly.fa</code> sequences, and search this database for the protein sequence <code>Acanthogammarus_victorii_COI.faa</code> and record the results in a table (tab-separated text)</p> Warning <p>Attention: the origin of the sequence is mitochondrial. What is important to consider when searching?</p> <p>Extract the sequence with the best match into a separate file.</p> <p>Input</p> <pre><code>makeblastdb -in data/Ommatogammarus_flavus_transcriptome_assembly.fa -dbtype nucl -parse_seqids\n</code></pre> <p>The gene is mitochondrial. Accordingly, the genetic code is different, and since here we are dealing with the communication between the protein query and the nucleotide base, it may matter. Not catastrophic here. But it is better to use the <code>-db_gencode 5</code> option, because this way the identity will be higher.</p> <p>Input</p> <pre><code>tblastn -query data/Acanthogammarus_victorii_COI.faa -db data/Ommatogammarus_flavus_transcriptome_assembly.fa -outfmt 6 -db_gencode 5\n## fields: qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore\n</code></pre> <p>Output</p> <pre><code>Acanthogammarus_victorii_COI    TRINITY_DN8878_c0_g1_i2 89.621  501 52  0   9   509 3   1505    0.0 781\nAcanthogammarus_victorii_COI    TRINITY_DN58613_c0_g1_i1    50.000  20  9   1   206 225 32  88  6.3 20.8\n</code></pre> <p>Percentage of identity is 89.621! Yay!</p> <p>Input</p> <pre><code>blastdbcmd -db data/Ommatogammarus_flavus_transcriptome_assembly.fa -entry TRINITY_DN8878_c0_g1_i2 -out data/Ommatogammarus_flavus_COI.fa\n</code></pre> <p>Input</p> <pre><code>cat data/Ommatogammarus_flavus_COI.fa\n</code></pre> <p>Output</p> <pre><code>&gt;TRINITY_DN8878_c0_g1_i2 len=1505\nCGACCAACCACAAAGATATTGGCACTCTTTATTTTATGCTAGGGCTCTGGTCTGGGTTAGTCGGAACCTCCATAAGACTT\nATCCTCCGCTCAGAACTTAGTGCGCCGGGTAGCCTGATTGGTGATGATCAACTGTATAACGTAATGGTAACCTCCCATGC\nTTTTATTATAATTTTTTTTATAGTTATGCCTATCATAATTGGCGGGTTTGGTAACTGGCTGCTTCCTTTAATACTAGGTA\nGACCTGATATAGCCTTCCCTCGAATAAACAACATGAGCTTTTGACTACTACCTCCTTCCCTTACACTTCTTATATCTAGA\nAGCTTAGTAGAAAGAGGAGTCGGCACAGGTTGAACTGTCTACCCTCCTTTATCTGGGTCTACAGCCCATAGAGGTAGCGC\nTGTAGATTTGGCTATTTTCTCACTTCATTTAGCCGGAGCTTCCTCTATCTTAGGGGCTGTAAATTTTATTTCTACCGCCA\nTTAATATGCGAGCGCCTGGGATAAAATTAGACCAAATGCCTTTATTCGTCTGAGCTATTATTATTACTACCGTCCTCCTA\nGTCTTATCCCTACCAGTCCTAGCTGGGGCCATTACGATACTACTTACAGACCGTAACATAAATACCTCTTTTTTTGACCC\nTAGTGGGGGGGGTGACCCTATCCTATACCAACACTTATTTTGATTTTTTGGGCACCCAGAGGTGTATATTTTAATCCTGC\nCTGCATTTGGCATAATCTCTCATATTGTTAGACAGGAGTCCGGTAAAAAAGAAACATTTGGCCCCCTAGGGATAATTTAT\nGCTATATTAGCTATTGGGTTCCTCGGATTTATTGTGTGAGCCCATCATATGTTTACAGTCGGTATGGATGTAGATACCCG\nAGCCTATTTTACATCAGCTACAATAATTATTGCAGTCCCCACCGGCATCAAAGTATTTAGGTGACTAGGTACTCTACAAG\nGCGGAAAAATTAACTTTTCTCCAGCTCTAATTTGAAGACTAGGTTTTATTTTCCTTTTCTCTATTGGAGGTTTAACTGGA\nGTTATATTAGCTAACTCATCAATTGACATCGTACTACACGACACTTACTATGTAGTTGCCCACTTTCATTATGTTTTATC\nTATGGGGGCTGTTTTCGGTATTTTTGCGGGGTTTGCTTACTGGTTTCCACTATTTACAGGTATAACTATCAATCCTATCC\nTAGCTAAAATTCATTTTTACGTCATATTCATGGGAGTAAACTTAACTTTTTTCCCCCAACATTTCCTTGGTTTAACGGGC\nATACCTCGGCGATACTCAGACTATCCTGACTTCTTCACAGCCTGAAATATTGTTTCCTCCTTAGGCTCTTATATCTCTGT\nTTTAGCTATAGTGATCTTTATTGCTATAATCATAGAAGCTTTTATCTCTAAGCGGTCCGCTTTATTTTCCTTAACCTTGT\nCGTCTGCTTTAGAGTGGTACCACTCATACCCGCCAGCCGACCATAGCTACAACGATACCCCTATT\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_04_Trees/","title":"Preparing the alignment and building trees","text":""},{"location":"IV.%20Phylogenetics/04_04_Trees/#instruction","title":"Instruction","text":"Question <p>Where to get the data?</p> <p>Download it from GitHub repository:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/04_Phylogenetics/04_04_Trees.zip\n</code></pre> <pre><code>unzip 04_04_Trees.zip &amp;&amp; rm -rf 04_04_Trees.zip\n</code></pre> <p>These are the data we will be working with:</p> <pre><code>Archive:  04_04_Trees.zip\n   creating: data/\n  inflating: data/SUP35_10seqs.fa\n</code></pre> <p>For this work, we will use the alignment of SUP35 gene obtained by <code>prank</code> considering codons.</p> <p>Input</p> <pre><code>prank -codon -d=data/SUP35_10seqs.fa -o=data/SUP35_aln_prank.best.fas -F\n</code></pre> <p>Tree building overview</p>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-1-cut-bad-areas-out-of-the-alignment-using-trimal","title":"Step 1: Cut bad areas out of the alignment using <code>trimAl</code>","text":"<p>Input</p> <pre><code>trimal -in data/SUP35_aln_prank.best.fas -out data/SUP35_aln_prank.trim.fas -automated1\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-2-fit-an-evolution-model-in-modeltest-modeltest-ng","title":"Step 2: fit an evolution model in <code>ModelTest</code> (<code>ModelTest-NG</code>)","text":"<p>Input</p> <pre><code>modeltest-ng -i data/SUP35_aln_prank.trim.fas -o data/modeltest/SUP35_trim_modeltest\n</code></pre> <p>Output</p> <pre><code>                     Model         Score        Weight\n   BIC             TIM3+G4    18180.5614        0.3950\n   AIC           TIM3+I+G4    18041.1550        0.5377\n  AICc           TIM3+I+G4    18041.1550        0.5377\n</code></pre> <p>In total we see that the <code>TIM3+G4</code> is recognised as the best model!</p>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-3-build-an-ml-tree-in-raxml-ng-using-the-selected-model","title":"Step 3: Build an ML-tree in RAxML-NG using the selected model","text":"<p>First, let's check that our tree is being built at all</p> <p>Input</p> <pre><code>raxml-ng --check --msa data/SUP35_aln_prank.trim.fas  --model TIM3+G4 --prefix data/raxml/SUP35_raxml_test\n</code></pre> <p>Output</p> <pre><code>Alignment can be successfully read by RAxML-NG.\n</code></pre> <p>Great! Let's go!</p> <p>Input</p> <pre><code>raxml-ng --msa data/SUP35_aln_prank.trim.fas --model TIM3+G4 --prefix data/raxml/SUP35_raxml --threads 2 --seed 222  --outgroup SUP35_Kla_AB039749\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-4-draw-the-resulting-tree-the-best-ml-tree","title":"Step 4: Draw the resulting tree (the best ML tree)","text":"<p>For drawing trees we will use a simple prewritten R script. Let's take a look at it to understand how it works:</p> draw_tree.R<pre><code>#!/usr/bin/env Rscript\nargs &lt;- commandArgs(trailingOnly=TRUE)\n\nlibrary(ggtree)\ntr &lt;- read.tree(args[1]) ##SUP35_raxml.raxml.bestTree\nggtree(tr) + geom_tiplab() + xlim(0,2) + \n  geom_treescale()\n\nggsave(args[2])\n</code></pre> <p>Input</p> <pre><code>Rscript scripts/draw_tree.R data/raxml/SUP35_raxml.raxml.bestTree imgs/SUP35_raxml.png\n</code></pre> <p>Output</p>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-5-model-selection-in-modelfinder-iq-tree","title":"Step 5: Model selection in ModelFinder (IQ-TREE)","text":"<p>Input</p> <pre><code>iqtree2 -m MFP -s data/SUP35_aln_prank.trim.fas --prefix data/modelfinder/SUP35_MF2\nhead -42 data/modelfinder/SUP35_MF2.iqtree | tail -6\n</code></pre> <p>Output</p> <pre><code>Best-fit model according to BIC: TIM3+F+G4\n\nList of models sorted by BIC scores: \n\nModel                  LogL         AIC      w-AIC        AICc     w-AICc         BIC      w-BIC\nTIM3+F+G4         -8993.686   18035.372 +   0.0517   18035.972 +   0.0549   18170.092 +    0.737\n</code></pre> <p>We see that the model <code>TIM3+F+G4</code> is recognised as the best!</p> Question <p>Do the models selected by ModelTest and ModelFinder differ, and how much?</p> Success <p>In general, we got the same thing. Only ModelFinder also threw in information about the empirical frequencies of the letters themselves in the alignment.</p> ModelTest ModelFinder Model TIM3+G4 TIM3+F+G4 BIC 18180.5614 18170.092"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-6-build-an-ml-tree-in-iq-tree-using-the-selected-model","title":"Step 6: Build an ML tree in IQ-TREE using the selected model","text":"<p>Input</p> <pre><code>iqtree2 -m TIM3+F+G4 -s data/SUP35_aln_prank.trim.fas --prefix data/iqtree/SUP35_iqtree\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-7-draw-the-resulting-tree-the-best-ml-tree","title":"Step 7: Draw the resulting tree (the best ML tree)","text":"<p>Input</p> <pre><code>Rscript draw_tree.R data/iqtree/SUP35_iqtree.treefile imgs/SUP35_iqtree.png\n</code></pre> <p>Output</p> <p>The trees obtained with RAxML and IQTREE are fundamentally similar. They have different views on how well the outer groups diverge, and they have different topologies.</p>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-8-comparison-of-likelihood-log-likelihood-of-trees-obtained-with-different-models-and-before-and-after-filtering","title":"Step 8: Comparison of likelihood (log likelihood) of trees obtained with different models and before and after filtering","text":"Question <p>What conclusion can be drawn from this?</p> <p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.best.fas -pre data/iqtree_unfilt/SUP35_iqtree_unfilt\ngrep \"Log-likelihood\" data/iqtree_unfilt/SUP35_iqtree_unfilt.iqtree\n</code></pre> <p>Output</p> <pre><code>Log-likelihood of the tree: -9696.9044 (s.e. 160.3706)\n</code></pre> <p>Input</p> <pre><code>grep \"Log-likelihood\" data/iqtree/SUP35_iqtree.iqtree\n</code></pre> <p>Output</p> <pre><code>Log-likelihood of the tree: -8993.1633 (s.e. 149.1347)\n</code></pre> <p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.best.fas -m JC -pre data/iqtree_JC/SUP35_iqtree_JC\ngrep \"Log-likelihood\" data/iqtree_JC/SUP35_iqtree_JC.iqtree\n</code></pre> <p>Output</p> <pre><code>Log-likelihood of the tree: -10482.7253 (s.e. 176.1729)\n</code></pre> Unfilt TIM3+F+G4 JC Log-likelihood -9696.9044 -8993.1633 -10482.7253 <ul> <li>Before filtering Log-likelihood = -9696.9044</li> <li>When using the <code>TIM3+F+G4</code> model = -8993.1633</li> <li>When using <code>JC</code> model = -10482.7253</li> </ul> Success <p>That said, the topology is the same everywhere! Anyway, if we only need to look at the topology, we can run iqtree with either model...</p>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-9-generation-of-100-replicas-of-a-regular-bootstrap","title":"Step 9: Generation of 100 replicas of a regular bootstrap","text":"<p>Input</p> <pre><code>time iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -redo -pre data/iqtree_bootstrap/SUP35_TIM3_b -b 100\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-10-generation-of-1000-ultrafast-bootstrap-replicas","title":"Step 10: Generation of 1000 ultrafast bootstrap replicas","text":"<p>Input</p> <pre><code>time iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -redo -pre data/iqtree_ultrafast_bootstrap/SUP35_TIM3_ufb -bb 1000\n</code></pre> Question <p>What is the difference between normal and ultrafast bootstrap runtimes and the values obtained?</p> <p>Input</p> <pre><code>bootstrap_100 = 3 * 60 + 17\nultrafast_bootstrap_1000 = 3.258\n\nprint(f'Generation of ultrafast bootstrap is faster: {bootstrap_100 / ultrafast_bootstrap_1000} times')\n</code></pre> <p>Output</p> <pre><code>Generation of ultrafast bootstrap is faster: 60.46654389195826 times\n</code></pre> Success <p>Generating 100 replicas of regular bootstrap took 3:17.00, while generating 1000 replicas of ultrafast bootstrap took 3.258. That's a huge difference!</p>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-11-running-the-previous-command-but-with-generation-1000-ultrafast-bootstrap-1000-alrt-abayes","title":"Step 11: Running the previous command, but with generation: 1000 ultrafast bootstrap + 1000 alrt + abayes","text":"<p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -pre data/iqtree_ufb_alrt_abayes/SUP35_TIM3_B_alrt_abayes -bb 1000 -alrt 1000 -abayes\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_04_Trees/#step-12-drawing-the-resulting-tree-with-three-supports","title":"Step 12: Drawing the resulting tree with three supports","text":"<p>For this step we will use a bit different R script. Let's take a look at it:</p> draw_tree_max.R<pre><code>args &lt;- commandArgs(trailingOnly=TRUE)\n\nlibrary(ggtree)\ntree_alrt_abayes_ufb &lt;- read.tree(args[1])\nggtree(tree_alrt_abayes_ufb) + \n  geom_tiplab() + geom_nodelab() +\n  geom_treescale() + xlim(0, 0.9)\n# funny labels\nlabel &lt;- tree_alrt_abayes_ufb$node.label\nalrt &lt;- as.numeric(sapply(strsplit(label, \"/\"), FUN = \"[\", 1)) #sun\nabayes &lt;- as.numeric(sapply(strsplit(label, \"/\"), FUN = \"[\", 2)) #yin yang\nufb &lt;- as.numeric(sapply(strsplit(label, \"/\"), FUN = \"[\", 3)) #star\nlarge_alrt &lt;- ifelse(alrt &gt; 70, intToUtf8(9728), \"\")\nlarge_abayes &lt;- ifelse(abayes &gt; 0.7, intToUtf8(9775), \"\")\nlarge_ufb &lt;- ifelse(ufb &gt; 95, intToUtf8(9733), \"\")\nnewlabel &lt;- paste0(large_alrt, large_abayes, large_ufb)\ntree_alrt_abayes_ufb$node.label &lt;- newlabel\nggtree(tree_alrt_abayes_ufb) + \n  geom_tiplab() + geom_nodelab(nudge_x = -.01, nudge_y = .1) +\n  geom_treescale() + xlim(0, 0.9)\n\nggsave(args[2])\n</code></pre> <p>Input</p> <pre><code>Rscript scripts/draw_tree_max.R data/iqtree_ufb_alrt_abayes/SUP35_TIM3_B_alrt_abayes.treefile imgs/SUP35_TIM3_B_alrt_abayes.png\n</code></pre> <p>Output</p> <p>All values \u200b\u200b- <code>alrt</code>, <code>abayes</code> and <code>ufb</code> are positively correlated - that is, if the indicators are high, then they are all high, as a rule. But this is not proportional. In the tree above, the indicator values \u200b\u200bare replaced with the symbols of the sun, yin-yang and asterisk for educational purposes. In real life they don\u2019t use this, but giving bare numbers through a slash is also not comme il faut...</p>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/","title":"Rooting and comparing trees; Dating","text":""},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#instruction","title":"Instruction","text":"Question <p>Where to get the data?</p> <p>Download it from GitHub repository:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/04_Phylogenetics/04_05_Root_Date.zip\n</code></pre> <pre><code>unzip 04_05_Root_Date.zip &amp;&amp; rm -rf 04_05_Root_Date.zip\n</code></pre> <p>These are the data and scripts we will be working with:</p> <pre><code>Archive:  04_05_Root_Date.zip\n   creating: scripts/\n  inflating: scripts/draw_tree.R     \n  inflating: scripts/draw_tree_max.R  \n   creating: data/\n  inflating: data/SUP35_aln_prank.trim.fas\n</code></pre> <p>For this work, we will use a filtered alignment (this is the same one we got in the Trees step)</p>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#part-1-rooting-trees","title":"Part 1: Rooting trees","text":""},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#step-1-rooting-a-tree-by-a-known-external-clade-in-iq-tree","title":"Step 1: Rooting a tree by a known external clade in <code>IQ-TREE</code>","text":"<p>Our goal in this part of the manual is to compare different rooting methods. That's why we shall start by making different trees. First, let's make a 1000 ufb tree.</p> <p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -pre data/iqtree_ufb/SUP35_TIM3_ufb -bb 1000\n</code></pre> <p>Then let's make a <code>-bb 1000 -alrt 1000 -abayes</code> tree.</p> <p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -pre data/iqtree_ufb_alrt_abayes/SUP35_TIM3_ufb_alrt_abayes -bb 1000 -alrt 1000 -abayes\n</code></pre> <p>Finally, let's make a tree rooted by the outgroup!</p> <p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -pre data/iqtree_root_outgroup/SUP35_TIM3_root_outgroup -bb 1000 -alrt 1000 -abayes  -o SUP35_Kla_AB039749,SUP35_Agos_ATCC_10895_NM_211584\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#step-2-rooting-a-tree-using-midpoint-rooting","title":"Step 2: Rooting a tree using <code>midpoint rooting</code>","text":"<p>There are two ways to root the tree at the midpoint: by using Python or R. Below we will use prewritten scripts. Let's take a look at them:</p> PythonR midpoint_root.py<pre><code>import sys\nfrom ete3 import Tree\nintre = sys.argv[1]\ntre = Tree(intre, quoted_node_names=True)\nmidpoint = tre.get_midpoint_outgroup()\ntre.set_outgroup(midpoint)\nprint(tre.write())\n</code></pre> midpoint_root.R<pre><code>#install.packages(\"phytools\")\nlibrary(phytools)\ntree_alrt_abayes_ufb &lt;- read.tree(\"iqtree_ufb_alrt_abayes/SUP35_TIM3_ufb_alrt_abayes.treefile\")\nmidpoint.root(tree_alrt_abayes_ufb)\nwrite.tree(tree_alrt_abayes_ufb, \"iqtree_ufb_alrt_abayes/SUP35_TIM3_ufb_alrt_abayes_rooted.treefile\")\n</code></pre> <p>Input</p> Python scriptR script <pre><code>python3 scripts/midpoint_root.py data/iqtree_ufb/SUP35_TIM3_ufb.treefile &gt;data/iqtree_ufb/SUP35_TIM3_ufb_midpoint.treefile\n</code></pre> <pre><code>Rscript scripts/midpoint_root.R\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#step-21-visualisation-of-the-rooted-trees","title":"Step 2.1: Visualisation of the rooted trees","text":"<p>For drawing trees we will use a simple prewritten R script. Let's take a look at it to understand how it works:</p> draw_tree.R<pre><code>#!/usr/bin/env Rscript\nargs &lt;- commandArgs(trailingOnly=TRUE)\n\nlibrary(ggtree)\ntr &lt;- read.tree(args[1]) ##SUP35_raxml.raxml.bestTree\nggtree(tr) + geom_tiplab() + xlim(0,2) + \n  geom_treescale()\n\nggsave(args[2])\n</code></pre> <p>Input</p> <pre><code>Rscript scripts/draw_tree.R data/iqtree_ufb/SUP35_TIM3_ufb.treefile imgs/SUP35_TIM3_ufb.png\nRscript scripts/draw_tree.R data/iqtree_ufb/SUP35_TIM3_ufb_midpoint.treefile imgs/SUP35_TIM3_ufb_midpoint.png\nRscript scripts/draw_tree.R data/iqtree_root_outgroup/SUP35_TIM3_root_outgroup.treefile imgs/SUP35_TIM3_root_outgroup.png\nRscript scripts/draw_tree.R data/iqtree_ufb_alrt_abayes/SUP35_TIM3_ufb_alrt_abayes_rooted.treefile imgs/SUP35_TIM3_ufb_alrt_abayes_rooted.png\n</code></pre> <p>Output</p> SUP35_TIM3_ufb.png SUP35_TIM3_ufb_midpoint.png SUP35_TIM3_root_outgroup.png SUP35_TIM3_ufb_alrt_abayes_rooted.png <ul> <li>Unrooted and rooted by external group are completely identical. 0 differences.</li> <li>Rooted by <code>midpoint</code> looks neater. Topology looks better.</li> </ul>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#step-3-rooting-a-tree-using-an-irreversible-non-reversible-model-iq-tree2","title":"Step 3: Rooting a tree using an irreversible (<code>non-reversible</code>) model (<code>iq-tree2</code>)","text":"<p>If we have a rather complex tree structure (it is huge, there are long branches, imbalance in sampling by different taxa), rooting the tree by external group will not give us the result we expect. There are more intelligent models for this. One of them is the easy-to-apply <code>non-reversible</code> model <code>iq-tree2</code>. The idea is that they allow you to predict where the root was! This, by analogy with <code>bootstrap</code> is called <code>rootstrap</code>.</p> <p>Input</p> <pre><code>iqtree2 -s data/SUP35_aln_prank.trim.fas -m TIM3+F+G4 -pre data/iqtree_root_auto/SUP35_TIM3_root_auto --model-joint 12.12 -B 1000\n# -B 1000 -  it's not `bootstrap`, it's how many times to run `rootstrap`\n</code></pre> <p>Input</p> <pre><code>cat data/iqtree_root_auto/SUP35_TIM3_root_auto.rootstrap.nex\n# - contains information about the algorithm's confidence in where the root is located\n</code></pre> <p>Output</p> <pre><code>#NEXUS\n[ This file is best viewed in FigTree. ]\nbegin trees;\n  tree tree_1 = ((SUP35_Kla_AB039749:0.2581582648[&amp;id=\"2\",rootstrap=\"26.8\"],SUP35_Agos_ATCC_10895_NM_211584:0.3420323394[&amp;id=\"3\",rootstrap=\"5.4\"]):0.1209998432[&amp;id=\"1\",rootstrap=\"42.4\"],(((((((SUP35_Scer_74-D694_GCA_001578265.1:0.0004800339[&amp;id=\"11\",rootstrap=\"0\"],SUP35_Scer_beer078_CM005938:0.0000010000[&amp;id=\"12\",rootstrap=\"0\"]):0.0000010000[&amp;id=\"10\",rootstrap=\"0\"],SUP35_Sbou_unique28_CM003560:0.0004800702[&amp;id=\"13\",rootstrap=\"0\"]):0.0463459057[&amp;id=\"9\",rootstrap=\"0\"],SUP35_Spar_A12_Liti:0.0325384431[&amp;id=\"14\",rootstrap=\"0.1\"]):0.0354767121[&amp;id=\"8\",rootstrap=\"0.2\"],SUP35_Smik_IFO1815T_30:0.0736998639[&amp;id=\"15\",rootstrap=\"0.6\"]):0.0322607827[&amp;id=\"7\",rootstrap=\"0.5\"],SUP35_Skud_IFO1802T_36:0.0970836557[&amp;id=\"16\",rootstrap=\"0.7\"]):0.0154599513[&amp;id=\"6\",rootstrap=\"1.8\"],SUP35_Sarb_H-6_chrXIII_CM001575:0.0787155739[&amp;id=\"17\",rootstrap=\"4.8\"]):0.0099429593[&amp;id=\"5\",rootstrap=\"8.6\"],SUP35_Seub_CBS12357_chr_II_IV_DF968535:0.0912344001[&amp;id=\"18\",rootstrap=\"5.1\"]):0.1942253516[&amp;id=\"4\",rootstrap=\"42.4\"]):0.0000010000[&amp;id=\"0\",rootstrap=\"42.4\"];\nend;\n</code></pre> <p>This is basically a <code>Newick</code> file, but strange <code>Newick</code>  because it has square brackets in it. Programs that read <code>Newick</code> format will not be able to read this tree. According to the developers of <code>iqtree</code> it is better to read this tree in <code>FigTree</code>.</p>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#step-4-root-supported-tree-visualisation-rootstrap","title":"Step 4: Root-supported tree visualisation (<code>rootstrap</code>)","text":"Question <p>What can we say about the algorithm's confidence in root selection?</p> <p>Input</p> <pre><code>figtree data/iqtree_root_auto/SUP35_TIM3_root_auto.rootstrap.nex\n</code></pre> <p>Output</p> Success <p>It can't say anything specific about where the tree splits. There's a 42.4% chance the root is either in one place or the other.</p>"},{"location":"IV.%20Phylogenetics/04_05_Root_Date/#part-2-dating","title":"Part 2: Dating","text":"Abstract <p>Analyze the age of the common ancestor of the two species of smoky leopards from the article https://doi.org/10.1016/j.cub.2006.08.066 based on sequencing data of the <code>atp8</code> gene region, relying on known data on the frequency of substitutions in mtDNA (approximately 2% per million years) in <code>beauti</code> and <code>beast</code></p> <ul> <li>Check the quality in <code>Tracer</code></li> <li>Combine trees in <code>treeannotator</code>.</li> <li>Draw the final tree.</li> <li>Be sure to show estimates of the age of the common ancestor at the nodes!</li> </ul> <p>Input</p> <pre><code>efetch -db popset -id 126256179 -format fasta &gt;data/atp8/felidae_atp8.fa\n</code></pre> <p>Input</p> <pre><code>cut -d ' ' -f 1,2,3 data/atp8/felidae_atp8.fa | sed -e 's/ /_/g' &gt; data/atp8/felidae_atp8.renamed.fa\n</code></pre> <p>Input</p> <pre><code>mafft --auto data/atp8/felidae_atp8.renamed.fa &gt;data/atp8/felidae_atp8.aln\n</code></pre> <p>Input</p> <pre><code>trimal -in data/atp8/felidae_atp8.aln -out data/atp8/felidae_atp8.trim.fas -nogaps\n</code></pre> <p>Input</p> <pre><code>iqtree2 -s data/atp8/felidae_atp8.trim.fas -o EF437591.1_Felis_catus -alrt 1000 -abayes\n</code></pre> <p>Input</p> <pre><code>from Bio import Phylo\n</code></pre> <p>Input</p> <pre><code>tree = Phylo.read(\"data/atp8/felidae_atp8.trim.fas.treefile\", \"newick\")\n</code></pre> <p>Input</p> <pre><code>Phylo.draw_ascii(tree)\n</code></pre> <p>Output</p> <pre><code>                                          , EF437567.1_Neofelis_nebulosa\n                                          |\n                                          | EF437569.1_Neofelis_nebulosa\n                                          |\n                                          | EF437570.1_Neofelis_nebulosa\n                                          |\n                                   _______| EF437568.1_Neofelis_nebulosa\n                                  |       |\n  ________________________________|       |_ EF437571.1_Neofelis_nebulosa\n |                                |\n |                                |            , EF437572.1_Neofelis_diardi\n |                                |____________|\n |                                             | EF437573.1_Neofelis_diardi\n |\n |                             __ EF437581.1_Panthera_onca\n |                           ,|\n_|                      _____||____ EF437587.1_Panthera_tigris\n |                     |     |\n |            _________|     |_______ EF437583.1_Uncia_uncia\n |           |         |\n |___________|         |________ EF437585.1_Panthera_leo\n |           |\n |           |______________ EF437589.1_Panthera_pardus\n |\n |______________ EF437591.1_Felis_catus\n</code></pre> <p>The outside group is the house cat. Because everyone else is a big cat. Fundamentally our tree is similar to that published in articles. In foreign colleagues the tree was based on several genes, we take only 1 piece of data.</p> <p>Beauti</p> <p><code>Beauti</code> is the GUI application. So I will just provide as many screenshots as possible.</p> <p>When loading the file, we select that we have nucleotide sequences</p> <p>Everything is okay.</p> <p>In <code>Site model</code> select TN93 and empirical frequencies</p> <p>In <code>Clock model</code> we choose 0.02. Why? Because we rely on the known data on the frequency of substitutions in mtDNA (approximately 2% per million years)</p> <p>Everything is okay.</p> <p>Save everything to <code>felidae_2percent.xml</code>.</p> <p>Input</p> <pre><code>beast data/atp8/felidae_2percent.xml\n</code></pre> <p>Tracer</p> <p><code>Tracer</code> is the GUI application. So I will just provide as many screenshots as possible.</p> <p>All <code>ESS</code> scores are in perfect order.</p> <p>The so-called \"hairy caterpillar\".</p> <p>TreeAnnotator</p> <p><code>TreeAnnotator</code> is the GUI application. So I will just provide as many screenshots as possible.</p> <p>Set parameters, and set <code>input</code> and <code>output</code>. Useful hint - output can be named the same way, but not .trees, just .tree!</p> <p>FigTree</p> <p><code>FigTree</code> is the GUI application. So I will just provide as many screenshots as possible.</p> <p>Fiddled with the parameters and got these results.</p> Success <p>Well. The common ancestor of our smoky leopards is about 2.5 million years old.</p> Question <p>Compare the results of this analysis (age of the last common ancestor of Neofelis) with published articles (https://www.science.org/doi/10.1126/sciadv.adh9143, https://www.sciencedirect.com/science/article/pii/S2589004222019198). What conclusions can be drawn?</p> Success <p>In the first article - https://www.science.org/doi/10.1126/sciadv.adh9143 there was a full genome analysis. Their estimate of the age of the common ancestor of smoky leopards is 2.2 million years. And we hit 100 nucleotides pretty good!</p> <p>But in the second article - https://www.sciencedirect.com/science/article/pii/S2589004222019198 - the age of the ancestor is 5.1 million years old.... Well. Interesting. Can't explain it yet.</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/","title":"Phylogenomics","text":""},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#instruction","title":"Instruction","text":"Question <p>In this chapter we will use a lot of prewritten scripts and even some images for visualization. Where to get them?</p> <p>Download it from GitHub repository:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/04_Phylogenetics/04_06_Phylogenomics.zip\n</code></pre> <pre><code>unzip 04_06_Phylogenomics.zip &amp;&amp; rm -rf 04_06_Phylogenomics.zip\n</code></pre> <p>These are the scripts and images we will be working with:</p> <pre><code>Archive:  04_06_Phylogenomics.zip\n   creating: photos/\n  inflating: photos/Canis lupus familiaris.jpeg  \n  inflating: photos/Equus caballus.jpeg  \n  inflating: photos/Felis catus.jpeg  \n  inflating: photos/Macaca mulatta.jpeg  \n  inflating: photos/Marmota marmota.jpeg  \n  inflating: photos/Mus musculus.jpeg  \n  inflating: photos/Mus spretus.jpeg  \n  inflating: photos/Myotis lucifugus.jpeg  \n  inflating: photos/Ornithorhynchus anatinus.jpeg  \n  inflating: photos/Ovis aries.jpeg  \n  inflating: photos/Physeter catodon.jpeg  \n  inflating: photos/Vombatus ursinus.jpeg  \n   creating: scripts/\n  inflating: scripts/draw_tree.R     \n  inflating: scripts/draw_tree_icons.R  \n  inflating: scripts/draw_tree_photos.R  \n  inflating: scripts/one_gene_tree.sh  \n  inflating: scripts/write_family_names.R\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#introduction","title":"Introduction","text":"<p>This guide is about reconstructing phylogeny using more than just one gene.</p> <p>During this work there are several trees constructed. Some are good, some are bad. If you are interested in comparing the phylogenies - see 04_08_Tanglegram</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#part-1-phylogeny-of-selected-mammalian-species-based-on-mitochondrial-genomes","title":"Part 1. Phylogeny of selected mammalian species based on mitochondrial genomes.","text":"Abstract <p>Objective: construct a phylogeny for 13 mitochondrial protein-coding genes using a supermatrix of concatenated genes</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-1-preparation","title":"Step 1: Preparation","text":"<p>First we create the directories to store the data There will be 2 parts of <code>Phylogenomics</code> manual, that's why we will store mitochondrion data to the <code>part_1</code> directory</p> <p>Input</p> <pre><code>mkdir data/\nmkdir data/part_1/\n</code></pre> <p>Now create <code>mitochondrions</code> directory to store exactly the data we will be working with</p> <p>Input</p> <pre><code>mkdir data/part_1/mitochondrions/\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-2-downloading-the-data","title":"Step 2: Downloading the data","text":"<p>Download mitochondrial protein-coding genes of Physeter catodon</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_002503 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Physeter_catodon_mt_prot.fa \n</code></pre> <p>Download mitochondrial protein-coding genes of Ovis aries</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_001941 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Ovis_aries_mt_prot.fa \n</code></pre> <p>Download mitochondrial protein-coding genes of Equus caballus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_001640 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Equus_caballus_mt_prot.fa \n</code></pre> <p>Download mitochondrial protein-coding genes of Felis catus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_001700 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Felis_catus_mt_prot.fa \n</code></pre> <p>Download mitochondrial protein-coding genes of Canis lupus familiaris</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_002008 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Canis_lupus_familiaris_mt_prot.fa \n</code></pre> <p>Download mitochondrial protein-coding genes of Myotis lucifugus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_029849 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Myotis_lucifugus_mt_prot.fa \n</code></pre> <p>Download mitochondrial protein-coding genes of Mus spretus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_025952 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Mus_spretus_mt_prot.fa  \n</code></pre> <p>Download mitochondrial protein-coding genes of Mus musculus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_005089 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Mus_musculus_mt_prot.fa  \n</code></pre> <p>Download mitochondrial protein-coding genes of Marmota marmota</p> <p>Input</p> <pre><code>esearch -db nuccore -query MN935776 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Marmota_marmota_mt_prot.fa\n</code></pre> <p>Download mitochondrial protein-coding genes of Macaca mulatta</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_005943 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Macaca_mulatta_mt_prot.fa\n</code></pre> <p>Download mitochondrial protein-coding genes of Ornithorhynchus anatinus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_000891 | efetch -format fasta_cds_aa &gt; \\\n  data/part_1/mitochondrions/Ornithorhynchus_anatinus_mt_prot.fa\n</code></pre> <p>Download mitochondrial protein-coding genes of Vombatus ursinus</p> <p>Input</p> <pre><code>esearch -db nuccore -query NC_003322 | efetch -format fasta_cds_aa &gt; data/part_1/mitochondrions/Vombatus_ursinus_mt_prot.fa\n</code></pre> <p>Now let's check the <code>data/part_1/mitochondrions/</code> directory!</p> <p>Input</p> <pre><code>ls data/part_1/mitochondrions/\n</code></pre> <p>Output</p> <pre><code>Canis_lupus_familiaris_mt_prot.fa  Mus_spretus_mt_prot.fa\nEquus_caballus_mt_prot.fa      Myotis_lucifugus_mt_prot.fa\nFelis_catus_mt_prot.fa         Ornithorhynchus_anatinus_mt_prot.fa\nMacaca_mulatta_mt_prot.fa      Ovis_aries_mt_prot.fa\nMarmota_marmota_mt_prot.fa     Physeter_catodon_mt_prot.fa\nMus_musculus_mt_prot.fa        Vombatus_ursinus_mt_prot.fa\n</code></pre> <p>All right! We have all the data we need to work with, but... Let's take a look at how the sequences are named in these files.</p> <p>Input</p> <pre><code>head -1 data/part_1/mitochondrions/Canis_lupus_familiaris_mt_prot.fa\n</code></pre> <p>Output</p> <pre><code>&gt;lcl|NC_002008.4_prot_NP_008471.1_1 [gene=ND1] [locus_tag=KEF55_p13] [db_xref=GeneID:804476] [protein=NADH dehydrogenase subunit 1] [transl_except=(pos:955..956,aa:TERM)] [protein_id=NP_008471.1] [location=2747..3702] [gbkey=CDS]\n</code></pre> <p>Total mess! Yes, there are a lot of information, but any tool will complain that this is too muchWe need to rename the sequences! For that let's create another directory called <code>mitochondrions_renamed</code></p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-3-1st-seqs-renaming","title":"Step 3: 1st seqs renaming","text":"<p>Input</p> <pre><code>mkdir data/part_1/mitochondrions_renamed/\n</code></pre> <p>Now let's rename <code>&gt;lcl|NC_002008.4_prot_NP_008471.1_1 [gene=ND1]...</code> to just <code>&gt;ND1</code> and store renamed files in another directory (<code>data/part_1/mitochondrions_renamed/</code>).</p> <p>Input</p> <pre><code>%%bash\n\nfor file in data/part_1/mitochondrions/*mt_prot.fa\ndo sed -e 's/.*ND1.*/&gt;ND1/' $file | sed -e 's/.*ND2.*/&gt;ND2/' | sed -e 's/.*ND3.*/&gt;ND3/' | sed -e 's/.*ND4].*/&gt;ND4/' | sed -e 's/.*ND4L].*/&gt;ND4L/' | sed -e 's/.*ND5.*/&gt;ND5/' |  sed -e 's/.*ND6.*/&gt;ND6/' | sed -e 's/.*COX1.*/&gt;COX1/' | sed -e 's/.*COX2.*/&gt;COX2/'  | sed -e 's/.*COX3.*/&gt;COX3/' | sed -e 's/.*ATP6.*/&gt;ATP6/'  | sed -e 's/.*ATP8.*/&gt;ATP8/' | sed -e 's/.*CYTB.*/&gt;CYTB/' &gt;data/part_1/mitochondrions_renamed/$(basename \"$file\" _mt_prot.fa)_renamed_mt_prot.fa\ndone\n</code></pre> <p>Let's check <code>mitochondrions_renamed</code> directory!</p> <p>Input</p> <pre><code>ls data/part_1/mitochondrions_renamed/\n</code></pre> <p>Output</p> <pre><code>Canis_lupus_familiaris_renamed_mt_prot.fa\nEquus_caballus_renamed_mt_prot.fa\nFelis_catus_renamed_mt_prot.fa\nMacaca_mulatta_renamed_mt_prot.fa\nMarmota_marmota_renamed_mt_prot.fa\nMus_musculus_renamed_mt_prot.fa\nMus_spretus_renamed_mt_prot.fa\nMyotis_lucifugus_renamed_mt_prot.fa\nOrnithorhynchus_anatinus_renamed_mt_prot.fa\nOvis_aries_renamed_mt_prot.fa\nPhyseter_catodon_renamed_mt_prot.fa\nVombatus_ursinus_renamed_mt_prot.fa\n</code></pre> <p>Hooray! we have all 12 files with renamed sequences! Anyway let's check that we did everything fine...</p> <p>Input</p> <pre><code>head -1 data/part_1/mitochondrions_renamed/Canis_lupus_familiaris_renamed_mt_prot.fa\n</code></pre> <p>Output</p> <pre><code>&gt;ND1\n</code></pre> <p>Yep! That's just it! But it is still not perfect... Let's rename <code>&gt;ND1</code> to <code>&gt;species_ND1</code> For that we need to install <code>BBMap</code>!</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-4-install-bbmap","title":"Step 4: Install <code>BBMap</code>","text":"<p>Download <code>.tar.gz</code> archive.</p> <p>Input</p> <pre><code>wget https://sourceforge.net/projects/bbmap/files/latest/download -O BBMap.tar.gz\n</code></pre> <p>Unpack it.</p> <p>Input</p> <pre><code>tar -xvzf BBMap.tar.gz\n</code></pre> <p>Delete the initial archive.</p> <p>Input</p> <pre><code>rm -rf BBMap.tar.gz\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-5-2nd-seqs-renaming","title":"Step 5: 2nd seqs renaming","text":"<p>To store our final files let's create the <code>mitochondrions_renamed_final</code> directory.</p> <p>Input</p> <pre><code>mkdir data/part_1/mitochondrions_renamed_final/\n</code></pre> <p>Now we rename sequences from <code>&gt;ND1</code> to <code>&gt;species_ND1</code> (it works for every gene). The <code>BBMap</code> tool will take species name from the file name (e.g. <code>Canis_lupus_familiaris_renamed_mt_prot.fa</code> = <code>Canis_lupus_familiaris</code>).</p> <p>Input</p> <pre><code>%%bash\n\nfor file in data/part_1/mitochondrions_renamed/*mt_prot.fa\ndo export species_name=$(basename $file _renamed_mt_prot.fa)\nbbmap/rename.sh in=$file prefix=\"$species_name\" addprefix=true out=data/part_1/mitochondrions_renamed_final/$species_name.mt_prots.fa ignorejunk=true ;\ndone\n</code></pre> <p>Now let's check <code>data/part_1/mitochondrions_renamed_final/</code> directory!</p> <p>Input</p> <pre><code>ls data/part_1/mitochondrions_renamed_final/\n</code></pre> <p>Output</p> <pre><code>Canis_lupus_familiaris.mt_prots.fa  Mus_spretus.mt_prots.fa\nEquus_caballus.mt_prots.fa      Myotis_lucifugus.mt_prots.fa\nFelis_catus.mt_prots.fa         Ornithorhynchus_anatinus.mt_prots.fa\nMacaca_mulatta.mt_prots.fa      Ovis_aries.mt_prots.fa\nMarmota_marmota.mt_prots.fa     Physeter_catodon.mt_prots.fa\nMus_musculus.mt_prots.fa        Vombatus_ursinus.mt_prots.fa\n</code></pre> <p>Yay! All the 12 files! Finally, let's check the sequences names!</p> <p>Input</p> <pre><code>head -1 data/part_1/mitochondrions_renamed_final/Canis_lupus_familiaris.mt_prots.fa\n</code></pre> <p>Output</p> <pre><code>&gt;Canis_lupus_familiaris_ND1\n</code></pre> <p>Just perfect! That's what we need!</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-6-phylogenomics-on-the-mitochondrial-proteins","title":"Step 6: Phylogenomics on the mitochondrial proteins","text":"<p>For the 1st step let's create the directory where we will store <code>.txt</code> files with gene names and call it <code>gene_names</code></p> <p>Input</p> <pre><code>mkdir data/part_1/gene_names/\n</code></pre> <p>Now we will reconstruct the phylogeny 2 times:</p> <ol> <li>Only on <code>CYTB</code> protein.</li> <li>On every protein.</li> </ol>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#cytb-phylogeny","title":"CYTB phylogeny","text":"<p>Extract the <code>CYTB</code> gene names from each file we have. And write it to the <code>CYTB_names.txt</code> file.</p> <p>Input</p> <pre><code>grep CYTB data/part_1/mitochondrions_renamed_final/*mt_prots.fa --no-filename | cut -c2- &gt; data/part_1/gene_names/CYTB_names.txt\n</code></pre> <p>Now let's chek the <code>CYTB_names.txt</code> file.</p> <p>Input</p> <pre><code>head -10 data/part_1/gene_names/CYTB_names.txt\n</code></pre> <p>Output</p> <pre><code>Canis_lupus_familiaris_CYTB\nEquus_caballus_CYTB\nFelis_catus_CYTB\nMacaca_mulatta_CYTB\nMarmota_marmota_CYTB\nMus_musculus_CYTB\nMus_spretus_CYTB\nMyotis_lucifugus_CYTB\nOrnithorhynchus_anatinus_CYTB\nOvis_aries_CYTB\n</code></pre> <p>Excellent! Now let's extract <code>CYTB</code> sequences only!</p> <p>For that we will create a directory called <code>mt_genes</code> and there will be 2 sub-directories:</p> <ol> <li><code>sep</code> - there will be stored 12 genes separately for each one of the species we are working with.</li> <li><code>merged</code> - there will be stored a merged <code>.fasta</code> file with 12 genes in 1 file.</li> </ol> <p>Input</p> <pre><code>mkdir data/part_1/mt_genes/\nmkdir data/part_1/mt_genes/sep/\nmkdir data/part_1/mt_genes/merged/\n</code></pre> <p>Now we extract <code>CYTB</code> gene sequences from the species mitochondrions using <code>BBMap</code> and previously created <code>CYTB_names.txt</code> file.</p> <p>Input</p> <pre><code>%%bash\n\nfor file in data/part_1/mitochondrions_renamed_final/*.mt_prots.fa\ndo bbmap/filterbyname.sh in=$file out=data/part_1/mt_genes/sep/$(basename \"$file\" .mt_prots.fa).CYTB.aa.fa include=t names=data/part_1/gene_names/CYTB_names.txt overwrite=true ignorejunk=true\ndone\n</code></pre> <p>Merge 12 separate sequences to 1 <code>.fasta</code> file with 12 sequences!</p> <p>Input</p> <pre><code>cat data/part_1/mt_genes/sep/*CYTB.aa.fa &gt; data/part_1/mt_genes/merged/CYTB.aa.fa\n</code></pre> <p>Now let's align 12 <code>CYTB</code> gene sequences! For that let's create the <code>mt_aligns</code> directory.</p> <p>Input</p> <pre><code>mkdir data/part_1/mt_aligns/\n</code></pre> <p>Now let's do the alignment with <code>MAFFT</code>.</p> <p>Input</p> <pre><code>mafft --auto data/part_1/mt_genes/merged/CYTB.aa.fa &gt; data/part_1/mt_aligns/CYTB.aa.aln\n</code></pre> <p>Done! And the final step - phylogeny reconstruction with <code>IQ-TREE</code>! For that let's create another directory to store tree files.</p> <p>Input</p> <pre><code>mkdir data/part_1/CYTB_tree/\n</code></pre> <p>Run the <code>IQ-TREE</code>!</p> <p>Input</p> <pre><code>iqtree2 -s data/part_1/mt_aligns/CYTB.aa.aln --prefix data/part_1/CYTB_tree/CYTB -alrt 1000 -abayes -o Ornithorhynchus_anatinus_CYTB,Vombatus_ursinus_CYTB --redo\n</code></pre> <p>Now let's make the directory to store all the images.</p> <p>Input</p> <pre><code>mkdir imgs\n</code></pre> <p>And finally let's visualize the tree with <code>ggtree</code> in <code>R</code>!</p> <p>But first let's take a look at the script we will use for visualization:</p> draw_tree.R<pre><code>#!/usr/bin/env Rscript\nargs &lt;- commandArgs(trailingOnly=TRUE)\n\nlibrary(ggtree)\n\ntr &lt;- read.tree(args[1])\n\nggtree(tr) + geom_tiplab() + \n  xlim(0,1) + geom_label2(aes(subset=!isTip, label=label), col=\"red4\", size=2, fill=\"white\", label.size=0.2) + \n  geom_treescale()\n\nggsave(args[2], width = 8, height=6)\n</code></pre> <p>Input</p> <pre><code>Rscript scripts/draw_tree.R data/part_1/CYTB_tree/CYTB.treefile imgs/CYTB_tree.png\n</code></pre> <p>Let's take a look at it:</p> <p>Well... This is a total mess... The bat is closer to the cat... The dog is almost a brother to the sheep... What's wrong? We did the phylogeny using <code>CYTB</code> gene only!!! That's the problem. But how do we reconstruct the phylogeny with every mitochondrial gene? Watch'n'learn...</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#all-mitochondrial-genes-phylogeny","title":"All mitochondrial genes phylogeny","text":"<p>We already have all the data we need in <code>mitochondrions_renamed_final</code> directory We just need to repeat all the steps we did with <code>CYTB</code> gene but now using every other gene We can do it manually, but it is BORING! That's why let's take a look on <code>one_gene_tree.sh</code> script:</p> <p>Input</p> <pre><code>cat scripts/one_gene_tree.sh\n</code></pre> <p>Output</p> one_gene_tree.sh<pre><code>grep $gene$ data/part_1/mitochondrions_renamed_final/*mt_prots.fa --no-filename | cut -c2- &gt; data/part_1/gene_names/$(basename \"$gene\")_names.txt\nfor file in data/part_1/mitochondrions_renamed_final/*.mt_prots.fa; do bbmap/filterbyname.sh in=$file out=data/part_1/mt_genes/sep/$(basename \"$file\" .mt_prots.fa).$gene.aa.fa include=t names=data/part_1/gene_names/$gene_names.txt overwrite=true ignorejunk=true; done\ncat data/part_1/mt_genes/sep/*$gene.aa.fa &gt; data/part_1/mt_genes/merged/$gene.aa.fa\nmafft --auto data/part_1/mt_genes/merged/$gene.aa.fa &gt; data/part_1/mt_aligns/$gene.aa.aln\n</code></pre> <p>It looks just perfect! It does all the steps from creating <code>$gene$_names.txt</code> file to aligning the seqs with <code>MAFFT</code>. Now let's launch this script with 12 other genes!</p> <p>COX1 gene</p> <p>Input</p> <pre><code>export gene=COX1; scripts/one_gene_tree.sh\n</code></pre> <p>ND2 gene</p> <p>Input</p> <pre><code>export gene=ND2; scripts/one_gene_tree.sh\n</code></pre> <p>ND3 gene</p> <p>Input</p> <pre><code>export gene=ND3; scripts/one_gene_tree.sh\n</code></pre> <p>ND4 gene</p> <p>Input</p> <pre><code>export gene=ND4; scripts/one_gene_tree.sh\n</code></pre> <p>ND4L gene</p> <p>Input</p> <pre><code>export gene=ND4L; scripts/one_gene_tree.sh\n</code></pre> <p>ND5 gene</p> <p>Input</p> <pre><code>export gene=ND5; scripts/one_gene_tree.sh\n</code></pre> <p>ND6 gene</p> <p>Input</p> <pre><code>export gene=ND6; scripts/one_gene_tree.sh\n</code></pre> <p>COX2 gene</p> <p>Input</p> <pre><code>export gene=COX2; scripts/one_gene_tree.sh\n</code></pre> <p>COX3 gene</p> <p>Input</p> <pre><code>export gene=COX3; scripts/one_gene_tree.sh\n</code></pre> <p>ATP6 gene</p> <p>Input</p> <pre><code>export gene=ATP6; scripts/one_gene_tree.sh\n</code></pre> <p>ATP8 gene</p> <p>Input</p> <pre><code>export gene=ATP8; scripts/one_gene_tree.sh\n</code></pre> <p>ND1 gene</p> <p>Input</p> <pre><code>export gene=ND1; scripts/one_gene_tree.sh\n</code></pre> <p>Perfect! Now let's check how did the script work. let's check the <code>mt_aligns</code> directory.</p> <p>Input</p> <pre><code>ls data/part_1/mt_aligns/\n</code></pre> <p>Output</p> <pre><code>ATP6.aa.aln  COX2.aa.aln  ND1.aa.aln  ND4.aa.aln   ND6.aa.aln\nATP8.aa.aln  COX3.aa.aln  ND2.aa.aln  ND4L.aa.aln\nCOX1.aa.aln  CYTB.aa.aln  ND3.aa.aln  ND5.aa.aln\n</code></pre> <p>Yay! There are 13 alignments. But we cannot lauch <code>IQ-TREE</code> right now... Because:</p> <p>Input</p> <pre><code>head -1 data/part_1/mt_aligns/ATP6.aa.aln\n</code></pre> <p>Output</p> <pre><code>&gt;Canis_lupus_familiaris_ATP6\n</code></pre> <p>Input</p> <pre><code>head -1 data/part_1/mt_aligns/ND6.aa.aln\n</code></pre> <p>Output</p> <pre><code>&gt;Canis_lupus_familiaris_ND6\n</code></pre> <p>Because organisms names are not uniform. In <code>ATP6.aa.aln</code> file Canis lupus familiaris is called <code>Canis_lupus_familiaris_ATP6</code> and in <code>ND6.aa.aln</code> file it is called <code>Canis_lupus_familiaris_ND6</code>. We need to make it <code>Canis_lupus</code> everywhere!</p> <p>For that let's make a directory where we will store renamed alignments.</p> <p>Input</p> <pre><code>mkdir data/part_1/mt_aligns_renamed/\n</code></pre> <p>And now let's just rename them!</p> <p>Input</p> <pre><code>for file in data/part_1/mt_aligns/*aln; do cut -d_ -f1,2 $file &gt; data/part_1/mt_aligns_renamed/$(basename \"$file\" .aa.aln)_renamed.aa.aln; done\n</code></pre> <p>Input</p> <pre><code>head -1 data/part_1/mt_aligns_renamed/ATP6_renamed.aa.aln\n</code></pre> <p>Output</p> <pre><code>&gt;Canis_lupus\n</code></pre> <p>Input</p> <pre><code>head -1 data/part_1/mt_aligns_renamed/ND6_renamed.aa.aln\n</code></pre> <p>Output</p> <pre><code>&gt;Canis_lupus\n</code></pre> <p>That's itIt is a perfect input to <code>IQ-TREE</code>! So we are ready to run it. But first let's make a directory for that tree.</p> <p>Input</p> <pre><code>mkdir data/part_1/mt_tree/\n</code></pre> <p>Run the <code>IQ-TREE</code>!</p> <p>Input</p> <pre><code>iqtree2 -s data/part_1/mt_aligns_renamed --prefix data/part_1/mt_tree/mt_tree -alrt 1000 -abayes -o Ornithorhynchus_anatinus,Vombatus_ursinus --redo\n</code></pre> <p>And finally let's visualize the tree with <code>ggtree</code> in <code>R</code>!</p> <p>Input</p> <pre><code>Rscript scripts/draw_tree.R data/part_1/mt_tree/mt_tree.treefile imgs/mt_proteins_alns_tree.png\n</code></pre> <p>Let's take a look at it:</p> <p>It is sooo much better now!!! Canis lupus and Felis catus are on the same clade! But still there are some strange moments... What is wrong with Macaca mulata...? It can be explained by the fact that we were working with mitochondrial genes. It is not the perfect material to work with. In the 2nd part of this manual we will work with proteomes!</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#part-2-phylogeny-of-selected-mammalian-species-based-on-proteomes","title":"Part 2. Phylogeny of selected mammalian species based on proteomes.","text":"Abstract <p>Objective: construct a phylogeny for 13 proteomes</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-1-preparation_1","title":"Step 1: Preparation","text":"<p>First we create the directories to store the data. It is the 2nd part of <code>Phylogenomics</code> manual, that's why we will store proteomes data to the <code>part_2</code> directory.</p> <p>Input</p> <pre><code>mkdir data/part_2/\n</code></pre> <p>Now create <code>proteomes</code> directory to store exactly the data we will be working with.</p> <p>Input</p> <pre><code>mkdir data/part_2/proteomes/\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-2-downloading-the-data_1","title":"Step 2: Downloading the data","text":"<p>Download Physeter catodon proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/physeter_catodon/pep/Physeter_catodon.ASM283717v2.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Ovis aries proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/ovis_aries_rambouillet/pep/Ovis_aries_rambouillet.Oar_rambouillet_v1.0.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Equus caballus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/equus_caballus/pep/Equus_caballus.EquCab3.0.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Felis catus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/felis_catus/pep/Felis_catus.Felis_catus_9.0.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Canis lupus familiaris proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/canis_lupus_familiaris/pep/Canis_lupus_familiaris.ROS_Cfam_1.0.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Myotis lucifugus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/myotis_lucifugus/pep/Myotis_lucifugus.Myoluc2.0.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Mus spretus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/mus_spretus/pep/Mus_spretus.SPRET_EiJ_v1.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Mus musculus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/mus_musculus/pep/Mus_musculus.GRCm39.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Marmota marmota proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/marmota_marmota_marmota/pep/Marmota_marmota_marmota.marMar2.1.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Macaca mulatta proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/macaca_mulatta/pep/Macaca_mulatta.Mmul_10.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Ornithorhynchus anatinus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/ornithorhynchus_anatinus/pep/Ornithorhynchus_anatinus.mOrnAna1.p.v1.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Download Vombatus ursinus proteome</p> <p>Input</p> <pre><code>wget https://ftp.ensembl.org/pub/release-110/fasta/vombatus_ursinus/pep/Vombatus_ursinus.bare-nosed_wombat_genome_assembly.pep.all.fa.gz -P data/part_2/proteomes/\n</code></pre> <p>Now let's unzip the downloaded data.</p> <p>Input</p> <pre><code>gunzip data/part_2/proteomes/*fa.gz\n</code></pre> <p>Now let's check the <code>data/part_2/proteomes/</code> directory!</p> <p>Input</p> <pre><code>ls data/part_2/proteomes/\n</code></pre> <p>Output</p> <pre><code>Canis_lupus_familiaris.ROS_Cfam_1.0.pep.all.fa\nEquus_caballus.EquCab3.0.pep.all.fa\nFelis_catus.Felis_catus_9.0.pep.all.fa\nMacaca_mulatta.Mmul_10.pep.all.fa\nMarmota_marmota_marmota.marMar2.1.pep.all.fa\nMus_musculus.GRCm39.pep.all.fa\nMus_spretus.SPRET_EiJ_v1.pep.all.fa\nMyotis_lucifugus.Myoluc2.0.pep.all.fa\nOrnithorhynchus_anatinus.mOrnAna1.p.v1.pep.all.fa\nOvis_aries_rambouillet.Oar_rambouillet_v1.0.pep.all.fa\nPhyseter_catodon.ASM283717v2.pep.all.fa\nVombatus_ursinus.bare-nosed_wombat_genome_assembly.pep.all.fa\n</code></pre> <p>All rightWe have all the data we need to work with, but... Let's take a look at how the sequences are named in these files.</p> <p>Input</p> <pre><code>head -1 data/part_2/proteomes/Canis_lupus_familiaris.ROS_Cfam_1.0.pep.all.fa\n</code></pre> <p>Output</p> <pre><code>&gt;ENSCAFP00845002002.1 pep primary_assembly:ROS_Cfam_1.0:8:2544435:2544737:1 gene:ENSCAFG00845001473.1 transcript:ENSCAFT00845002518.1 gene_biotype:TR_V_gene transcript_biotype:TR_V_gene\n</code></pre> <p>Total mess! Yes, there are a lot of information, but any tool will complain that this is too muchWe need to rename the sequences! For that let's create another directory called <code>proteomes_renamed</code>.</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-3-1st-seqs-renaming_1","title":"Step 3: 1st seqs renaming","text":"<p>Input</p> <pre><code>mkdir data/part_2/proteomes_renamed/\n</code></pre> <p>Now let's rename <code>&gt;ENSCAFP00845002002.1 pep primary_assembly...</code> to just <code>&gt;ENSCAFP00845002002.1</code> and store renamed files in another directory (<code>data/part_2/proteomes_renamed/</code>).</p> Note <p>What is <code>ENSCAFP00845002002.1</code>? It is Canis lupus familiaris. Do not ask questions. It is.</p> <p>Input</p> <pre><code>for file in data/part_2/proteomes/*fa; do sed -e's/\\ .*//' $file &gt; data/part_2/proteomes_renamed/$(basename \"$file\" .pep.all.fa)_renamed.pep.all.fa; done\n</code></pre> <p>Let's check <code>proteomes_renamed</code> directory!</p> <p>Input</p> <pre><code>ls data/part_2/proteomes_renamed/\n</code></pre> <p>Output</p> <pre><code>Canis_lupus_familiaris.ROS_Cfam_1.0_renamed.pep.all.fa\nEquus_caballus.EquCab3.0_renamed.pep.all.fa\nFelis_catus.Felis_catus_9.0_renamed.pep.all.fa\nMacaca_mulatta.Mmul_10_renamed.pep.all.fa\nMarmota_marmota_marmota.marMar2.1_renamed.pep.all.fa\nMus_musculus.GRCm39_renamed.pep.all.fa\nMus_spretus.SPRET_EiJ_v1_renamed.pep.all.fa\nMyotis_lucifugus.Myoluc2.0_renamed.pep.all.fa\nOrnithorhynchus_anatinus.mOrnAna1.p.v1_renamed.pep.all.fa\nOvis_aries_rambouillet.Oar_rambouillet_v1.0_renamed.pep.all.fa\nPhyseter_catodon.ASM283717v2_renamed.pep.all.fa\nVombatus_ursinus.bare-nosed_wombat_genome_assembly_renamed.pep.all.fa\n</code></pre> <p>Hooraywe have all 12 files with renamed sequences! Anyway let's check that we did everything fine...</p> <p>Input</p> <pre><code>head -1 data/part_2/proteomes_renamed/Canis_lupus_familiaris.ROS_Cfam_1.0_renamed.pep.all.fa\n</code></pre> <p>Output</p> <pre><code>&gt;ENSCAFP00845002002.1\n</code></pre> <p>Yep! That's just it! But it is still not perfect... In proteomes from <code>ensembl</code> there are some <code>*</code> symbols. Further we will use <code>proteinortho</code>and it will crash with error if it sees <code>*</code>. That's why let's remove <code>*</code>s!</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-4-2nd-seqs-renaming","title":"Step 4: 2nd seqs renaming","text":"<p>To store our final files let's create the <code>proteomes_renamed_final</code> directory.</p> <p>Input</p> <pre><code>mkdir data/part_2/proteomes_renamed_final/\n</code></pre> <p>Now we remove ALL the <code>*</code>s from every single file.</p> <p>Input</p> <pre><code>for file in data/part_2/proteomes_renamed/*fa; do cat $file | sed -e's/\\*//g' &gt; data/part_2/proteomes_renamed_final/$(basename \"$file\" _renamed.pep.all.fa)_final.pep.all.fa; done\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-5-proteinortho-finding-orthologs","title":"Step 5: <code>Proteinortho</code>: Finding orthologs","text":"Warning <p>Note: if you want to use ANY tool to work with orthologs I strongly recommend to use <code>DIAMOND</code> v2.0.9. Reason: https://github.com/davidemms/OrthoFinder/issues/603</p> <p>Launch <code>Proteinortho</code>.</p> <p>Input</p> <pre><code>proteinortho data/part_2/proteomes_renamed_final/*.fa -cpus=24\n</code></pre> <p>Unfortunatelly, <code>Proteinortho</code> does not let you to redirect output to any directory you want... That's why let's move the files ourselves! For that first let's create a directory - <code>protein_ortho_output</code>.</p> <p>Input</p> <pre><code>mkdir data/part_2/protein_ortho_output/\n</code></pre> <p>Then let's just move any <code>myproject*</code> file to <code>protein_ortho_output</code> directory.</p> <p>Input</p> <pre><code>mv myproject* data/part_2/protein_ortho_output/\n</code></pre> <p>So, <code>myproject.proteinortho.tsv</code> file there are a lot of entries on any ortholog. But how many Single-Copy Orthologs are there?</p> <p>Input</p> <pre><code>grep -v  \\* data/part_2/protein_ortho_output/myproject.proteinortho.tsv  | grep -v -c \",\" \n</code></pre> <p>Output</p> <pre><code>625\n</code></pre> <p>Okay. That's good. Now, let's filter that <code>.tsv</code> file to store only them (Single-Copy Orthologs).</p> <p>Input</p> <pre><code>grep -v  \\* data/part_2/protein_ortho_output/myproject.proteinortho.tsv  | grep -v \",\" &gt; data/part_2/protein_ortho_output/myproject.proteinortho.filt.tsv\n</code></pre> <p>Okay. Okay. Okay. We have a <code>.tsv</code> file with info on Single-Copy Orthologs. How do we extract their sequences?</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-6-getting-orthologs-names","title":"Step 6: Getting orthologs names","text":"<p>Meet the <code>write_family_names.R</code> script!</p> <p>Input</p> <pre><code>cat scripts/write_family_names.R\n</code></pre> <p>Output</p> write_family_names.R<pre><code>#!/usr/bin/env Rscript\nargs &lt;- commandArgs(trailingOnly=TRUE)\n\n# Read the proteinortho table\nonetoone &lt;- read.delim(args[1])\n\n  # Create directory to store SCOs\n  dir.create(args[2]) #e.g. data/SCOs\n\n  # Write name lists to later extract\n   for (i in 4:ncol(onetoone)) {\n   writeLines(onetoone[,i], paste0(args[2], names(onetoone[i]), \".names.txt\"))\n   }\n   dir.create(args[3])  \n   # And gene lists grouped by families\n   for (i in 1:nrow(onetoone)) {\n   oo &lt;- as.matrix(onetoone)\n   writeLines(oo[i, 4:ncol(onetoone)], paste0(args[3], \"family\", as.character(i), \".names.txt\"))\n   }\n</code></pre> <p>So, this script needs 3 inputs:</p> <ol> <li><code>.tsv</code> file with info on Single-Copy Orthologs (SCOs).</li> <li>Path to directory where to store names of the SCOs in <code>.txt</code> format.</li> <li>Path to directory where to store names of all the protein families in <code>.txt</code> format.</li> </ol> <p>Run the script!</p> <p>Input</p> <pre><code>Rscript scripts/write_family_names.R data/part_2/protein_ortho_output/myproject.proteinortho.filt.tsv data/part_2/SCOs/ data/part_2/families_tree/\n</code></pre> <p>Now let's take a look on some of the outputs.</p> <p>Input</p> <pre><code>head -10 data/part_2/SCOs/Canis_lupus_familiaris.ROS_Cfam_1.0.pep.all.fa.clean.fa.faa.names.txt\n</code></pre> <p>Output</p> <pre><code>ENSCAFP00845000007.1\nENSCAFP00845000060.1\nENSCAFP00845000100.1\nENSCAFP00845000116.1\nENSCAFP00845000148.1\nENSCAFP00845000229.1\nENSCAFP00845000280.1\nENSCAFP00845000290.1\nENSCAFP00845000294.1\nENSCAFP00845000434.1\n</code></pre> <p>So, in the <code>Canis_lupus_familiaris.ROS_Cfam_1.0.pep.all.fa.clean.fa.faa.names.txt</code> file there are names of SCOs that belong to Canis lupus familiaris.</p> <p>Input</p> <pre><code>head -10 data/part_2/families_tree/family1.names.txt\n</code></pre> <p>Output</p> <pre><code>ENSCAFP00845000007.1\nENSECAP00000004501.1\nENSFCAP00000010065.4\nENSMMUP00000023901.1\nENSMMMP00000018299.1\nENSMUSP00000019920.7\nMGP_SPRETEiJ_P0023739\nENSMLUP00000008174.2\nENSOANP00000021746.2\nENSOARP00020026787.1\n</code></pre> <p>And in the <code>family1.names.txt</code> there are names of the orthologs that belong to one family.</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-7-extracting-orthologs","title":"Step 7: Extracting orthologs","text":"<p>Remember the <code>proteomes_renamed_final</code> directory? There are proteomes with all the filtration done. Now let's merge all the proteomes to ONE <code>.fasta</code> file. Yeah, now there a lot of files from <code>Proteinortho</code> launch. But we will take only <code>.fasta</code> files as the input!</p> <p>Input</p> <pre><code>cat data/part_2/proteomes_renamed_final/*.fa &gt; data/part_2/all_pep.fa\n</code></pre> <p>Now we will extract the sequences of SCOs. Where to store them? Good question. Make a directory named <code>families_seqs</code>.</p> <p>Input</p> <pre><code>mkdir data/part_2/families_seqs/\n</code></pre> <p>Now we will use <code>BBMap</code> (it was installed during the 1st part of this manual). As the input we will provide:</p> <ol> <li><code>all_pep.fa</code> - all 12 proteomes merged.</li> <li><code>data/part_2/families_tree/family*txt</code> - list of SCOs names that belong to one family.</li> </ol> <p>As the output we will get:</p> <ol> <li><code>data/part_2/families_seqs/family*.seq.fa</code> - <code>.fasta</code> file with the sequences of SCOs that belong to one family.</li> </ol> <p>Input</p> <pre><code>%%bash\n\nfor list in data/part_2/families_tree/family*txt\ndo bbmap/filterbyname.sh in=data/part_2/all_pep.fa out=data/part_2/families_seqs/$(basename \"$list\" .names.txt).seq.fa include=t names=$list overwrite=true ignorejunk=true\ndone\n</code></pre> <p>Let's check the output.</p> <p>Input</p> <pre><code>head -10 data/part_2/families_seqs/family1.seq.fa\n</code></pre> <p>Output</p> <pre><code>&gt;ENSCAFP00845000007.1\nMTHLQAGLSPETLEKARLELNENPDTLHQDIQEVRDMVITRPDIGFLRTDDAFILRFLRARKFHHFEAFR\nLLAQYFEYRQQNLDMFKSFKATDPGIKQALKDGFPGGLANLDHYGRKILVLFAANWDQSRYTLVDILRAI\nLLSLEAMIEDPELQVNGFVLIIDWSNFTFKQASKLTPSMLRLAIEGLQDSFPARFGGIHFVNQPWYIHAL\nYTVIRPFLKEKTRKRIFLHGNNLNSLHQLIHPEILPSEFGGMLPPYDMGTWARTLLDHEYDDDSEYNVDS\nYSMPVKEVEKELSPKSMKRSQSVVDPTVLKRMDKNEEENMQPLLSLD\n&gt;ENSECAP00000004501.1\nMTHLQAGLSPETLEKARLELNENPDTLHQDIQEVRDMVITRPDIGFLRTDDAFILRFLRARKFHHFEAFR\nLLAQYFEYRQQNLDMFKSFKATDPGIKQALKDGFPGGLANLDHYGRKILVLFAANWDQSRYTLVDILRAI\nLLSLEAMIEDPELQVNGFVLIIDWSNFTFKQASKLTPSMLRLAIEGLQDSFPARFGGIHFVNQPWYIHAL\n</code></pre> <p>Hooray!!! But... Are we good with sequences names like <code>&gt;ENSCAFP00845000007.1</code>? Of course not! Let's rename the sequences (in every 600+ files...).</p> <p>For that we need to create a directory to store renamed sequences and call it <code>families_seqs_renamed</code>.</p> <p>Input</p> <pre><code>mkdir data/part_2/families_seqs_renamed/\n</code></pre> <p>Simple <code>bash</code> script using <code>sed</code> to rename <code>&gt;ENSCAFP00845000007.1</code> to <code>&gt;Canis_lupus_familiaris</code> etc.</p> <p>Input</p> <pre><code>%%bash\n\nfor file in data/part_2/families_seqs/*fa\ndo sed -e 's/ENSCAFP.*/Canis_lupus_familiaris/' $file | sed -e 's/ENSECAP.*/Equus_caballus/' | sed -e 's/ENSFCAP.*/Felis_catus/' | sed -e 's/ENSMMUP.*/Macaca_mulatta/' | sed -e 's/ENSMMMP.*/Marmota_marmota/' | sed -e 's/ENSMUSP.*/Mus_musculus/' | sed -e 's/MGP_SPRETEiJ.*/Mus_spretus/' | sed -e 's/ENSMLUP.*/Myotis_lucifugus/' | sed -e 's/ENSOANP.*/Ornithorhynchus_anatinus/' | sed -e 's/ENSOARP.*/Ovis_aries/' | sed -e 's/ENSPCTP.*/Physeter_catodon/' | sed -e 's/ENSVURP.*/Vombatus_ursinus/' &gt; data/part_2/families_seqs_renamed/$(basename \"$file\" .seq.fa).seq\ndone\n</code></pre> <p>Let's check the output.</p> <p>Input</p> <pre><code>head -10 data/part_2/families_seqs_renamed/family1.seq\n</code></pre> <p>Output</p> <pre><code>&gt;Canis_lupus_familiaris\nMTHLQAGLSPETLEKARLELNENPDTLHQDIQEVRDMVITRPDIGFLRTDDAFILRFLRARKFHHFEAFR\nLLAQYFEYRQQNLDMFKSFKATDPGIKQALKDGFPGGLANLDHYGRKILVLFAANWDQSRYTLVDILRAI\nLLSLEAMIEDPELQVNGFVLIIDWSNFTFKQASKLTPSMLRLAIEGLQDSFPARFGGIHFVNQPWYIHAL\nYTVIRPFLKEKTRKRIFLHGNNLNSLHQLIHPEILPSEFGGMLPPYDMGTWARTLLDHEYDDDSEYNVDS\nYSMPVKEVEKELSPKSMKRSQSVVDPTVLKRMDKNEEENMQPLLSLD\n&gt;Equus_caballus\nMTHLQAGLSPETLEKARLELNENPDTLHQDIQEVRDMVITRPDIGFLRTDDAFILRFLRARKFHHFEAFR\nLLAQYFEYRQQNLDMFKSFKATDPGIKQALKDGFPGGLANLDHYGRKILVLFAANWDQSRYTLVDILRAI\nLLSLEAMIEDPELQVNGFVLIIDWSNFTFKQASKLTPSMLRLAIEGLQDSFPARFGGIHFVNQPWYIHAL\n</code></pre> <p>YAY! Good!</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-8-phylogeny-on-proteomes","title":"Step 8: Phylogeny on proteomes","text":"<p>Now we are ready to reconstruct the phylogeny. What's the 1st step? Right! MSA! Let's make a directory to store the alignments.</p> <p>Input</p> <pre><code>mkdir data/part_2/families_align/\n</code></pre> <p>Now let's use <code>MAFFT</code> on every single SCOs families sequences.</p> <p>Input</p> <pre><code>for file in data/part_2/families_seqs_renamed/*.seq; do mafft --auto \"$file\" &gt; data/part_2/families_align/$(basename \"$file\" .seq).aln; done\n</code></pre> <p>We can also trim the alignments with <code>trimAl</code>. First let's make a directory where the trimmed alignments will be stored.</p> <p>Input</p> <pre><code>mkdir data/part_2/families_trimmed_alns/\n</code></pre> <p>Run <code>trimAl</code>.</p> <p>Input</p> <pre><code>for file in data/part_2/families_align/*aln; do trimal -in $file -out data/part_2/families_trimmed_alns/trimmed_$(basename \"$file\") -automated1; done\n</code></pre> <p>Now everything is ready to launch <code>IQ-TREE</code>. (Of course we need to make a directory where to store tree files).</p> <p>Input</p> <pre><code>mkdir data/part_2/tree/\n</code></pre> <p>Run <code>IQ-TREE</code>.</p> <p>Input</p> <pre><code>iqtree2 -s data/part_2/families_trimmed_alns/ --prefix data/part_2/tree/tree -alrt 1000 -abayes -o Ornithorhynchus_anatinus,Vombatus_ursinus -nt 24\n</code></pre> <p>Yes! We have the tree! Let's visualize it with <code>ggtree</code> in <code>R</code>. But for now let's use some more difficult scripts.</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-9-add-icons-to-the-tree","title":"Step 9: Add icons to the tree","text":"<p>Run <code>draw_tree_icons.R</code> script and see the tree.</p> <p>But first let's take a look at the script we will use for visualization:</p> draw_tree_icons.R<pre><code>#!/usr/bin/env Rscript\nargs &lt;- commandArgs(trailingOnly=TRUE)\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\n\npacman::p_load(ggtree, ggimage)\n\nnewick.tree &lt;- read.tree(args[1])\n\nnewick.tree$tip.label &lt;- gsub(\"_\", \" \", newick.tree$tip.label)\n\n#phylopic images\ntips &lt;- newick.tree$tip.label\ntips[6] &lt;- \"Eptesicus\"\ntips[8] &lt;- \"Marmota monax\"\ntips[10] &lt;- \"Mus musculus\"\ntipsimg &lt;- ggimage::phylopic_uid(tips)\ntipsimg$name &lt;- tips\n#save time and also edit if necessary\n#write.csv(tipsimg, \"tipsimg.csv\")\n#tipsimg &lt;- read.csv(\"tipsimg.csv\")\n\nggtree(newick.tree) + \n  geom_label2(aes(subset=!isTip, label=label), col=\"red4\", size=2, fill=\"white\", label.size=0.2) + \n  geom_tiplab(image=tipsimg$uid, geom=\"phylopic\", offset = .075) +\n  xlim(0,.4) + \n  geom_treescale(x=0, y=11) +\n  geom_tiplab(fontface=\"italic\")\n\nggsave(args[2], width=12, height=6, dpi=600)\n</code></pre> <p>Input</p> <pre><code>Rscript scripts/draw_tree_icons.R data/part_2/tree/tree.treefile imgs/icons_tree.png\n</code></pre> <p>Wow! Looking goodThe phylogeny and the tree itself with the icons! <code>draw_tree_icons.R</code> script uses <code>phylopic_uid()</code> function from <code>ggimage</code> package to make it possible. But we can do even cooler.</p>"},{"location":"IV.%20Phylogenetics/04_06_Phylogenomics/#step-10-add-photos-to-the-tree","title":"Step 10: Add photos to the tree","text":"<p>But first let's take a look at the script we will use for visualization:</p> draw_tree_photos.R<pre><code>#!/usr/bin/env Rscript\nargs &lt;- commandArgs(trailingOnly=TRUE)\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\n\npacman::p_load(ggtree, ggimage)\n\nnewick.tree &lt;- read.tree(args[1])\n\nnewick.tree$tip.label &lt;- gsub(\"_\", \" \", newick.tree$tip.label)\n\n#phylopic images\ntips &lt;- newick.tree$tip.label\ntips[6] &lt;- \"Eptesicus\"\ntips[8] &lt;- \"Marmota monax\"\ntips[10] &lt;- \"Mus musculus\"\ntipsimg &lt;- ggimage::phylopic_uid(tips)\ntipsimg$name &lt;- tips\n#save time and also edit if necessary\n#write.csv(tipsimg, \"tipsimg.csv\")\n#tipsimg &lt;- read.csv(\"tipsimg.csv\")\n\nggtree(newick.tree) + \n  geom_label2(aes(subset=!isTip, label=label), col=\"red4\", size=2, fill=\"white\", label.size=0.2) + \n  geom_tiplab(image=tipsimg$uid, geom=\"phylopic\", offset = .075) +\n  xlim(0,.4) + \n  geom_treescale(x=0, y=11) +\n  geom_tiplab(fontface=\"italic\")\n\nggsave(args[2], width=12, height=6, dpi=600)\n</code></pre> <p>Input</p> <pre><code>Rscript scripts/draw_tree_photos.R data/part_2/tree/tree.treefile photos/ imgs/photos_tree.png\n</code></pre> <p>Let's take a look at the tree!</p> <p>Magnificent! So this script just takes a folder with photos as the input and that's all the magic!</p>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/","title":"Visualization Pro","text":"<p>For this work, we will use sequences and metadata from the viral hemorrhagic septicemia virus (VHSV). This virus is a fish novirhabdovirus (negative stranded RNA virus) with an unusually broad host spectra: it has been isolated from more than 80 fish species in locations around the Northern hemisphere.</p> <p>This guide was inspired by: https://github.com/acarafat/tutorials. Thanks for the data! Yet there are some new adjustments!</p> <p>For more guides on pro visualization please visit bioconnector's <code>ggtree</code> workshop</p>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#instruction","title":"Instruction","text":"<p>This guide is about making the 1st class publication ready quality tree visualization. It is divided into 2 parts:</p> <ol> <li>Making the tree </li> <li>Visualizing the tree </li> </ol> Question <p>In this chapter we will use a lot of prewritten scripts and even some images for visualization. Where to get them?</p> <p>Download it from GitHub repository:</p> <pre><code>wget https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/04_Phylogenetics/04_07_Visualization_Pro.zip\n</code></pre> <pre><code>unzip 04_07_Visualization_Pro.zip &amp;&amp; rm -rf 04_07_Visualization_Pro.zip\n</code></pre> <p>These are the scripts and images we will be working with:</p> <pre><code>Archive:  04_07_Visualization_Pro.zip\n   creating: data/\n  inflating: data/metadata.csv       \n  inflating: data/vhsv.fasta\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#part-1-making-the-tree","title":"Part 1: Making the tree","text":""},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-1-multiple-sequences-alignment","title":"Step 1: Multiple Sequences Alignment","text":"<p>Run multiple sequences alignment with <code>mafft</code>.</p> <p>Input</p> <pre><code>mafft data/vhsv.fasta &gt; data/vhsv_mafft.fa\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-2-selecting-a-model-in-modelfinder-iq-tree","title":"Step 2: Selecting a model in ModelFinder (IQ-TREE)","text":"<p>Create a directory for <code>ModelFinder</code> output.</p> <p>Input</p> <pre><code>mkdir data/modelfinder\n</code></pre> <p>Run <code>ModelFinder</code>.</p> <p>Input</p> <pre><code>iqtree2 -m MFP -s data/vhsv_mafft.fa --prefix data/modelfinder/vhsv_MF2\n</code></pre> <p>Examine the best model of evolution that is the most suitable for our alignment.</p> <p>Input</p> <pre><code>head -42 data/modelfinder/vhsv_MF2.iqtree | tail -6\n</code></pre> <p>Output</p> <pre><code>Best-fit model according to BIC: TVMe+I+R2\n\nList of models sorted by BIC scores: \n\nModel                  LogL         AIC      w-AIC        AICc     w-AICc         BIC      w-BIC\nTVMe+I+R2         -6984.748   14221.497 -  0.00151   14244.406 -   0.0031   14892.963 +    0.719\n</code></pre> <p>In total we see that the model <code>TVMe+I+R2</code> is recognised as the best!</p>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-3-build-an-ml-tree-in-iq-tree-using-the-selected-model","title":"Step 3: Build an ML-tree in IQ-TREE using the selected model","text":"<p>Create a directory for <code>IQ-TREE</code> output.</p> <p>Input</p> <pre><code>mkdir data/iqtree\n</code></pre> <p>Run <code>IQ-TREE</code> with 1000 replicates of <code>bootstrap</code> and <code>alrt</code>.</p> <p>Input</p> <pre><code>iqtree2 -s data/vhsv_mafft.fa -m TVMe+I+R2 -pre data/iqtree/vhsv -bb 1000 -alrt 1000\n</code></pre> <p>Examine the <code>IQ-TREE</code> output folder.</p> <p>Input</p> <pre><code>ls data/iqtree\n</code></pre> <p>Output</p> <pre><code>vhsv.bionj   vhsv.contree  vhsv.log vhsv.splits.nex\nvhsv.ckp.gz  vhsv.iqtree   vhsv.mldist  vhsv.treefile\n</code></pre> <p>Examine <code>vhsv.treefile</code> file.</p> <p>Input</p> <pre><code>cat data/iqtree/vhsv.treefile\n</code></pre> <p>Output</p> <pre><code>(AU-8-95:0.0110908144,(CH-FI262BFH:0.0131626927,(DK-200098:0.0013245216,DK-9995144:0.0000021124)99.9/100:0.0095461686)9/64:0.0007239176,((((((((DK-1p40:0.0019819713,DK-1p86:0.0019797009)76.6/97:0.0006555511,((DK-1p8:0.0000009918,(((((DK-4p37:0.0000009918,SE-SVA14:0.0006553525)86.8/99:0.0006552139,DK-5e59:0.0013137944)0/59:0.0000009918,SE-SVA-1033:0.0000009918)78.3/95:0.0006575436,((DK-6p403:0.0006555940,SE-SVA31:0.0006553577)0/84:0.0000009918,UK-MLA98-6HE1:0.0000009918)85.8/98:0.0019746439)74.9/96:0.0006544639,KRRV9601:0.0006553263)0/5:0.0000009918)0/35:0.0000009918,UK-9643:0.0033018138)77.4/95:0.0006559696)99.4/100:0.0054050544,DK-M.rhabdo:0.0026557033)97.1/99:0.0043768013,((((((DK-1p53:0.0006554948,DK-1p55:0.0000009918)100/100:0.0816239127,(US-Makah:0.0285256070,US-Goby1-5:0.0140617136)100/100:0.1210196539)45.4/78:0.0178122396,(((DK-4p101:0.0098266846,((DK-4p168:0.0013124829,(UK-H17-2-95:0.0026484120,(UK-H17-5-93:0.0006595661,UK-MLA98-6PT11:0.0013182714)76.2/99:0.0006379007)76.8/99:0.0006676816)79.4/100:0.0010717553,IR-F13.02.97:0.0055710520)87.9/96:0.0020014929)75.6/98:0.0009426132,FR-L59X:0.0128796948)94.9/100:0.0075738902,UK-860-94:0.0158845820)100/100:0.0465027783)99.6/100:0.0335713781,GE-1.2:0.0179796623)90.6/90:0.0051656186,(((DK-2835:0.0040058973,(DK-5123:0.0028538659,DK-5131:0.0044317727)78/92:0.0031564427)99.9/100:0.0132939283,DK-Hededam:0.0099438696)73.4/75:0.0008365002,DK-F1:0.0114614651)0/60:0.0000024805)79.3/82:0.0007471327,((FI-ka422:0.0032972674,FI-ka66:0.0000009918)92.8/100:0.0026339174,NO-A16368G:0.0019943447)92.3/97:0.0020403429)61.6/78:0.0002733446)98.6/96:0.0054285225,(FR-1458:0.0099883404,FR-2375:0.0066740966)90.8/95:0.0027197676)93.6/99:0.0031601931,(((((((((((DK-200027-3:0.0020089775,DK-200079-1:0.0020149815)76.7/89:0.0006222640,(DK-9795568:0.0019716416,DK-9995007:0.0013117492)0/86:0.0000009918)83/84:0.0006608276,DK-9895093:0.0013141923)0/73:0.0000020835,DK-7380:0.0026333937)52.9/85:0.0012862237,DK-9595168:0.0020301147)95.9/99:0.0026894771,DK-6045:0.0000009918)97.5/100:0.0026369103,DK-7974:0.0039639852)0/85:0.0000009918,DK-5151:0.0000009918)75.6/97:0.0006726697,DK-6137:0.0006450449)99.9/100:0.0115741245,((DK-3592B:0.0019729337,(DK-3946:0.0006552354,Fil3:0.0006618033)0/65:0.0000009918)0/86:0.0000742921,DK-3971:0.0025543911)99.5/100:0.0068250583)0/86:0.0002859106,(DK-5741:0.0000009918,(DK-9695377:0.0013153923,(DK-9895024:0.0000009918,DK-9895174:0.0013114345)85.7/98:0.0013140555)90.9/99:0.0013147689)99.7/100:0.0081963781)95.9/77:0.0050968140)79.8/66:0.0033929129,FR-0284:0.0121797246)78.3/89:0.0028127442,FR-0771:0.0001556512)99.4/100:0.0075113449);\n</code></pre> <p>This is the tree in <code>Newick</code> format that we will use for visualization!</p>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-4-examine-metadata","title":"Step 4: Examine metadata","text":"<p>Import <code>pandas</code>.</p> <p>Input</p> <pre><code>import pandas as pd\n</code></pre> <p>Read the metadata file.</p> <p>Input</p> <pre><code>pd.read_csv('data/metadata.csv')\n</code></pre> <p>Output</p> Strain Host Water Country ACCNo Year 0 AU-8-95 Rainbow trout Fresh water AU AY546570.1 1995 1 CH-FI262BFH Rainbow trout Fresh water CH AY546571.1 1999 2 DK-1p40 Rockling Sea water DK AY546575.1 1996 3 DK-1p53 Atlantic Herring Sea water DK AY546577.1 1996 4 DK-1p55 Sprat Sea water DK AY546578.1 1996 ... ... ... ... ... ... ... 56 UK-H17-5-93 Cod Sea water UK AY546630.1 1993 57 UK-MLA98-6HE1 Herring Sea water UK AY546631.1 1998 58 UK-MLA98-6PT11 Norway prout Sea water UK AY546632.1 1998 59 US-Makah Coho salmon Fresh water USA U28747.1 1988 60 US-Goby1-5 Round goby Unknown USA AB672615.1 2006 <p>61 rows \u00d7 6 columns</p>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#part-2-visualizing-the-tree","title":"Part 2: Visualizing the tree","text":""},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-1-preparation","title":"Step 1: Preparation","text":"<p>1st step - install or call libraries.</p> <p>Input</p> <pre><code>if (!require(\"pacman\")) install.packages(\"pacman\")\n\npacman::p_load(ggplot2, ggtree, phangorn, treeio, ggnewscale, viridis)\n</code></pre> <p>2nd step - set the working directory.</p> <p>Input</p> <pre><code>main_dir &lt;- dirname(rstudioapi::getSourceEditorContext()$path)\nsetwd(main_dir)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-2-initial-visualization","title":"Step 2: Initial visualization","text":"<p>Create a directory for images.</p> <p>Input</p> <pre><code>dir.create(\"imgs\", showWarnings = TRUE, recursive = FALSE, mode = \"0777\")\n</code></pre> <p>As we remember from the previous laboratory journal our tree file is in <code>Newick</code> format and it was created with <code>IQ-TREE</code>. Also, there are bootstrap values in our tree files. That is why it is better to read the tree with <code>read.iqtree</code> function instead of default <code>read.tree</code> function.</p> <p>So let us read the tree, midpoint root it and make the 1st visualization.</p> <p>Input</p> <pre><code>#Read the tree\nvshv.tree &lt;- read.iqtree('data/iqtree/vhsv.treefile')\n\n#Midpoint root the tree\nvshv.tree@phylo &lt;- midpoint(vshv.tree@phylo)\n\n#Display the tree\nplot(vshv.tree@phylo)\n\n#And let's save the tree\npng(filename=\"imgs/1st_tree.png\")\nplot(vshv.tree@phylo)\ndev.off()\n</code></pre> <p>Output</p> <p>Um. Okay, but nothing special! There is a lot of work ahead to make this tree pretty!</p>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-3-adding-host-information-to-the-tree","title":"Step 3: Adding host information to the tree","text":"<p>Now we will read the metadata and add the host information to the tree. To do so we will use the <code>%&lt;+%</code> sign, which allow us to use different columns of the metadata to decorate different parts of the tree.</p> <p>Let's add host information to the tip points.</p> <p>Input</p> <pre><code>#Read the metadata\nmeta &lt;- read.table('data/metadata.csv', sep=',', header=T)\n\n#Plot the tree and add host information from the metadata to the tree's tip points\ntree_2 &lt;- ggtree(vshv.tree) %&lt;+% meta +\n  geom_tippoint(aes(color=Host))\n\n#Display the tree\ntree_2\n</code></pre> <p>Output</p> <p>And let's save the tree.</p> <p>Input</p> <pre><code>ggsave(\"imgs/2nd_tree.png\", tree_2, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-4-use-the-circular-layout-and-add-bootstrap-information","title":"Step 4: Use the circular layout and add bootstrap information","text":"<p><code>IQ-TREE</code> Newick file contains a bootstrap support value which has both <code>SH_aLRT</code> and <code>UFboot</code> values. Let's show branches that has high support for both of parameters (i.e. \u2265 70).</p> <p>When we define a <code>ggtree</code> object using <code>tree_3 &lt;- ggtree(vshv.tree) %&lt;+% meta + geom_tippoint(aes(color=Host))</code>, it attaches the metadata as well as tree-branch and tips info coming from original Newick tree-file in the data placeholder, which we can use by <code>tree_3$data</code>. So let\u2019s update this to have a new column of a variable that satisfy both bootstrap values:</p> <p>Input</p> <pre><code>#Use the circular layout for the tree\ntree_3 &lt;- ggtree(vshv.tree, layout=\"circular\") %&lt;+% meta +\n  geom_tippoint(aes(color=Host))\n\n#Create a new parameter `bootstrap` with the default value of 0\ntree_3$data$bootstrap &lt;- '0'\n\n#Assign value 1 to the tree branches that has both SH_aLRT and UFboot values higher than 70\ntree_3$data[which(tree_3$data$SH_aLRT &gt;= 70 &amp; tree_3$data$UFboot  &gt;= 70),]$bootstrap &lt;- '1'\n\n#Plot the tree and use \"black\" color for branches with bootstrap value = 1 (&gt;=70) and \"grey\" color for branches with bootstrap value = 0 (&lt;70)\ntree_3 &lt;- tree_3 + new_scale_color() +\n  geom_tree(aes(color=bootstrap == '1')) +\n  scale_color_manual(name='Bootstrap', values=setNames(c(\"black\", \"grey\"), c(T,F)), guide = \"none\")\n\n#Display the tree\ntree_3\n</code></pre> <p>Output</p> <p>And let's save the tree.</p> <p>Input</p> <pre><code>ggsave(\"imgs/3rd_tree.png\", tree_3, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_07_Visualization_Pro/#step-5-add-the-last-metadata-info-as-the-heatmaps-and-make-the-final-visualization","title":"Step 5: Add the last metadata info as the heatmaps and make the final visualization","text":"<p>Create two separate dataframes for <code>Water</code> and <code>Year</code> and parse them to make further visualize much more convenient.</p> <p>Input</p> <pre><code>#Read Water column from metadata to a separate dataframe\nmeta.water &lt;- as.data.frame(meta[,'Water'])\n#Change column name from `meta[,'Water']` to `Water`\ncolnames(meta.water) &lt;- 'Water'\n#Change row names from `1, 2, 3, ...` to strains `AU-8-95, CH-FI262BFH, ...`\nrownames(meta.water) &lt;- meta$Strain\n\n#Read Year column from metadata to a separate dataframe\nmeta.year &lt;- as.data.frame(meta[,'Year'])\n##Change column name from `meta[,'Year']` to `Year`\ncolnames(meta.year) &lt;- 'Year'\n#Change row names from `1, 2, 3, ...` to strains `AU-8-95, CH-FI262BFH, ...`\nrownames(meta.year) &lt;- meta$Strain\n</code></pre> <p>Input</p> <pre><code>#Create a new tree that uses the previous tree (circular layout + host info at the tip points)\n#Add `meta.water` dataframe as the heatmap and set the width to 0.2 and offset to 0.01\n#Use `viridis` \"A\" colormap and name legend title \"Water\"\nfinal_tree &lt;- gheatmap(tree_3, meta.water, width=0.2, offset=0.01) + \n  scale_fill_viridis_d(option=\"A\", name=\"Water\") +\n  new_scale_fill() #define a new fill scale using after the first gheatmap, for the second gheatmap to draw upon\n\n#Create a new tree that uses the tree created above\n#Add `meta.year` dataframe as the heatmap and set the width to 0.1 and offset to 0.05\n#Use `viridis` \"D\" colormap and name legend title \"Year\"\nfinal_tree &lt;- gheatmap(final_tree, meta.year, width=0.1, offset=0.05) + \n  scale_fill_viridis(option=\"D\", name=\"Year\")\n</code></pre> <p>Add the country information from the metadata to the tip labels and plot the final tree!</p> <p>Input</p> <pre><code>#Add the country information to the tip labels, set the color to \"gray40\", offset to 0.03 and size to 3\nfinal_tree &lt;- final_tree + geom_tiplab2(aes(label=Country), color=\"gray40\", offset=0.003, size=3)\n\n#Display the tree\nfinal_tree\n</code></pre> <p>Output</p> <p>And let's save the tree.</p> <p>Input</p> <pre><code>ggsave(\"imgs/final_tree.png\", final_tree, width = 10, height = 8, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/","title":"Tanglegram","text":"<p>This guide is about making co-phylogeny tanglegrams.</p>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#instruction","title":"Instruction","text":""},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#part-1-manual-tanglegram-with-ggtree","title":"Part 1: Manual tanglegram with <code>ggtree</code>","text":""},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step1-preparation","title":"Step1:  Preparation","text":"<p>1st step - install or call libraries.</p> <p>Input</p> <pre><code>if (!require(\"pacman\")) install.packages(\"pacman\")\n\npacman::p_load(ggplot2, ggtree, phangorn, dplyr)\n</code></pre> <p>2nd step - set the working directory.</p> <p>Input</p> <pre><code>main_dir &lt;- dirname(rstudioapi::getSourceEditorContext()$path)\nsetwd(main_dir)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-2-generate-the-trees-and-prepare-them","title":"Step 2: Generate the trees and prepare them","text":"<p>Create a directory for images.</p> <p>Input</p> <pre><code>dir.create(\"imgs\", showWarnings = TRUE, recursive = FALSE, mode = \"0777\")\n</code></pre> <p>Generate 2 small random phylogenetic trees.</p> <p>Input</p> <pre><code># Generate two random trees with the same set of tips (for demonstration)\nset.seed(34)\ntips &lt;- LETTERS[1:10]  # Shared tip labels\n\ntree1 &lt;- rtree(n = 10, tip.label = tips)  # Random tree 1\ntree2 &lt;- rtree(n = 10, tip.label = tips)  # Random tree 2\n\n# Ensure that both trees have the same tip labels for co-phylogeny plotting\ntree2$tip.label &lt;- tree1$tip.label  # Sync labels\n</code></pre> <p>Display them.</p> <p>Input</p> <pre><code># Plot tree1 (left) and tree2 (right)\nt1 &lt;- ggtree(tree1) + \n  geom_tiplab(offset = .1)\n\nt2 &lt;- ggtree(tree2) + \n  geom_tiplab(offset = .1)\n\n# Combine the two plots side by side\ntwo_trees &lt;- t1 + t2\ntwo_trees\n</code></pre> <p>Output</p> <p>These are the trees we will be working with. Now let's save them.</p> <p>Input</p> <pre><code>ggsave(\"imgs/two_trees.png\", two_trees, width = 10, height = 8, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-3-rotate-the-2nd-tree","title":"Step 3: Rotate the 2nd tree","text":"<p>Of course we can rotate the 2nd tree simply using <code>scale_x_reverse()</code>.</p> <p>Input</p> <pre><code># Rotate the 2nd tree\nt2_rotated &lt;- ggtree(tree2) + \n  geom_tiplab(offset = -.1) +\n  scale_x_reverse()\n\n# Combine the two plots side by side\ntwo_trees_w_ro &lt;- t1 + t2_rotated\ntwo_trees_w_ro\n</code></pre> <p>Output</p> <p>Let's save these trees.</p> <p>Input</p> <pre><code>ggsave(\"imgs/two_trees_w_ro.png\", two_trees_w_ro, width = 10, height = 8, dpi = 600)\n</code></pre> <p>Looking good! But to manually create the tanglegram we need to adjust the coordinates of labels. And if we use <code>scale_x_reverse()</code> it will be impossible to make the tanglegram. That is why we need to go by more difficult and not obvious way - by manually horizontally mirroring the tree...</p> <p>Now we are going to grab the backend data frame from both trees and update the tree 2 data frame x-coordinate.</p> <p>Input</p> <pre><code>data_tree_1 &lt;- t1$data\ndata_tree_2 &lt;- t2$data\n\ndata_tree_1$tree &lt;-'t1'\ndata_tree_2$tree &lt;-'t2'\n</code></pre> <p>And now we will use the <code>max(d2$x) - d2$x + max(d1$x) + max(d1$x)*0.3</code> equation to update x coordinates for the 2nd tree. This equation is not universal, <code>0.3</code> is not constant, you can fiddle with different values depending on the branch length unit of your tree to get good visualization.</p> <p>Input</p> <pre><code>data_tree_2$x &lt;- max(data_tree_2$x) - data_tree_2$x + max(data_tree_1$x) +  max(data_tree_1$x)*0.3\n</code></pre> <p>Now we display both trees with manually rotated 2nd tree.</p> <p>Input</p> <pre><code>two_trees_w_ro_2 &lt;- t1 +\n  geom_tree(data=data_tree_2) +\n  geom_tiplab(data = data_tree_2, offset = - 0.2)\ntwo_trees_w_ro_2\n</code></pre> <p>Output</p> <p>Looking same good! And let's save these twoo trees.</p> <p>Input</p> <pre><code>ggsave(\"imgs/two_trees_w_ro_2.png\", two_trees_w_ro_2, width = 10, height = 8, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-4-plotting-the-tanglegram","title":"Step 4: Plotting the tanglegram","text":"<p>Now let\u2019s merge <code>data_tree_1</code> and <code>data_tree_2</code> to <code>data_combined</code> dataframe so that we can use the coordinates of the tips for making connections between both of the trees.</p> <p>Input</p> <pre><code>data_combined &lt;- bind_rows(data_tree_1, data_tree_2) %&gt;% \n  filter(isTip == TRUE)\n</code></pre> <p>Now, we conditionally join the tips of both trees. Connected tips will represent the same isolates.</p> <p>Input</p> <pre><code>ggtree_tanglegram_1 &lt;- two_trees_w_ro_2 +\n  geom_line(aes(x, y, group=label), data=data_combined, color='#009E73')\n\nggtree_tanglegram_1\n</code></pre> <p>Output</p> <p>Hooray! Let's save this tanglegram. But... the connecting lines overlap the tip labels. Now we must solve this problem!</p> <p>Input</p> <pre><code>ggsave(\"imgs/ggtree_tanglegram_1.png\", ggtree_tanglegram_1, width = 10, height = 8, dpi = 600)\n</code></pre> <p>Copy the <code>data_combined</code> dataset with coordinates and increase x coordinates for the 1st tree by 0.3 and decrease x coordinated for the 2nd tree by 0.3.</p> <p>Input</p> <pre><code>data_combined_padding &lt;- data_combined\n\ndata_combined_padding$x[data_combined_padding$tree == 't1'] &lt;- data_combined_padding$x[data_combined_padding$tree == 't1'] + 0.3\ndata_combined_padding$x[data_combined_padding$tree == 't2'] &lt;- data_combined_padding$x[data_combined_padding$tree == 't2'] - 0.3\n</code></pre> <p>Finally, let's make one last visualization.</p> <p>Input</p> <pre><code>ggtree_tanglegram_2 &lt;- two_trees_w_ro_2 +\n  geom_line(aes(x, y, group=label), data=data_combined_padding, color='#009E73')\n\nggtree_tanglegram_2\n</code></pre> <p>Output</p> <p>Just perfect! And let's save it.</p> <p>Input</p> <pre><code>ggsave(\"imgs/ggtree_tanglegram_2.png\", ggtree_tanglegram_2, width = 10, height = 8, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#part-2-tanglegram-with-ape-and-cophyloplot","title":"Part 2: Tanglegram with <code>ape</code> and <code>cophyloplot()</code>","text":""},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-1-preparation","title":"Step 1: Preparation","text":"<p>1st and the last step - install or call libraries.</p> <p>This time the preparation is simple - just install/call <code>ape</code> library.</p> <p>Input</p> <pre><code>pacman::p_load(ape)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-2-small-tanglegram","title":"Step 2: Small tanglegram","text":"<p>Generate 2 small random phylogenetic trees.</p> <p>Input</p> <pre><code>TreeA_S &lt;- rtree(10)\nTreeB_S &lt;- rtree(10)\n</code></pre> <p>Now let's take a look at these trees.</p> <p>Input</p> <pre><code># Plot tree1 (left) and tree2 (right)\nt1s &lt;- ggtree(TreeA_S) + \n  geom_tiplab(offset = .1)\n\nt2s &lt;- ggtree(TreeB_S) + \n  geom_tiplab(offset = .1)\n\n# Combine the two plots side by side\ntwo_trees_s &lt;- t1s + t2s\ntwo_trees_s\n</code></pre> <p>Output</p> <p>Interesting trees. Let's save them.</p> <p>Input</p> <pre><code>ggsave(\"imgs/two_trees_s.png\", two_trees_s, width = 10, height = 8, dpi = 600)\n</code></pre> <p>Create the association matrix.</p> <p>Input</p> <pre><code>association &lt;- cbind(TreeB_S$tip.label, TreeB_S$tip.label)\n</code></pre> <p>Now let's display the tanglegram.</p> <p>Input</p> <pre><code>cophyloplot(TreeA_S, TreeB_S, assoc = association, length.line = 4, space = 28, gap = 3)\n</code></pre> <p>Output</p> <p>Wow! Let's save this plot.</p> <p>Input</p> <pre><code>png(\"imgs/ape_small_tanglegram.png\", res = 600)\ncophyloplot(TreeA_S, TreeB_S, assoc = association, length.line = 4, space = 28, gap = 3)\ndev.off()\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-3-large-tanglegram","title":"Step 3: Large tanglegram","text":"<p><code>cophyloplot()</code> function of <code>ape</code> package workid just fine for the small trees. But will it work for large trees! Let's find it out!</p> <p>Generate 2 large random phylogenetic trees.</p> <p>Input</p> <pre><code>TreeA_L &lt;- rtree(100)\nTreeB_L &lt;- rtree(100)\n</code></pre> <p>Now let's take a look at these trees.</p> <p>Input</p> <pre><code># Plot tree1 (left) and tree2 (right)\nt1l &lt;- ggtree(TreeA_L) + \n  geom_tiplab(size = 1.5, offset = .1)\n\nt2l &lt;- ggtree(TreeB_L) + \n  geom_tiplab(size = 1.5, offset = .1)\n\n# Combine the two plots side by side\ntwo_trees_l &lt;- t1l + t2l\ntwo_trees_l\n</code></pre> <p>Output</p> <p>Wow! Suppose <code>cophyloplot()</code> will not do good with such a large trees. Anyway let's save them.</p> <p>Input</p> <pre><code>ggsave(\"imgs/two_trees_l.png\", two_trees_l, width = 10, height = 8, dpi = 600)\n</code></pre> <p>Create the association matrix.</p> <p>Input</p> <pre><code>association &lt;- cbind(TreeB_L$tip.label, TreeB_L$tip.label)\n</code></pre> <p>Now let's display the tanglegram.</p> <p>Input</p> <pre><code>cophyloplot(TreeA_L, TreeB_L, assoc = association, length.line = 4, space = 28, gap = 3)\n</code></pre> <p>Output</p> <p>That looks awful... Anyway let's save it...</p> <p>Input</p> <pre><code>png(\"imgs/ape_large_tanglegram.png\", res = 600)\ncophyloplot(TreeA_L, TreeB_L, assoc = association, length.line = 4, space = 28, gap = 3)\ndev.off()\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#part-3-tanglegram-with-dendextend","title":"Part 3: Tanglegram with <code>dendextend</code>","text":"<p>For more guides <code>dendextend</code> package please visit official guide</p> <p>How do we make large tanglegram look good? Use <code>dendextend</code>!</p>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-1-preparation_1","title":"Step 1: Preparation","text":"<p>1st and the last step - install or call libraries.</p> <p>This time the preparation is also simple - just install/call <code>dendextend</code> library.</p> <p>Input</p> <pre><code>pacman::p_load(dendextend)\n</code></pre> <p>Set another seed to make the trees look different.</p> <p>Input</p> <pre><code>set.seed(42)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-2-creating-dendrograms","title":"Step 2: Creating dendrograms","text":"<p><code>tanglegram</code> function in <code>dendextend</code> package uses <code>ultrametric</code> trees. That's why to generate 2 large random phylogenetic trees we will use <code>rcoal()</code> function.</p> <p>Input</p> <pre><code>TreeA_L_2 &lt;- rcoal(100)\nTreeB_L_2 &lt;- rcoal(100)\n</code></pre> <p>Now let's take a look at these trees.</p> <p>Input</p> <pre><code># Plot tree1 (left) and tree2 (right)\nt1l2 &lt;- ggtree(TreeA_L_2) + \n  geom_tiplab(size = 1.5, offset = .1)\n\nt2l2 &lt;- ggtree(TreeB_L_2) + \n  geom_tiplab(size = 1.5, offset = .1)\n\n# Combine the two plots side by side\ntwo_trees_l_2 &lt;- t1l2 + t2l2\ntwo_trees_l_2\n</code></pre> <p>Output</p> <p>Yeah. Looking massive. Save it.</p> <p>Input</p> <pre><code>ggsave(\"imgs/two_trees_l_2.png\", two_trees_l_2, width = 10, height = 8, dpi = 600)\n</code></pre>"},{"location":"IV.%20Phylogenetics/04_08_Tanglegram/#step-3-plotting-tanglegram","title":"Step 3: Plotting tanglegram","text":"<p>Now let's use <code>tanglegram</code> function!</p> <p>Input</p> <pre><code>tanglegram(TreeA_L_2, TreeB_L_2,\n           sort = TRUE,\n           common_subtrees_color_lines = FALSE,\n           highlight_distinct_edges  = FALSE,\n           highlight_branches_lwd = FALSE)\n</code></pre> <p>Output</p> <p>Finally! That large tanglegram looks great! Let's save it.</p> <p>Input</p> <pre><code>png(\"imgs/dendextend_large_tanglegram.png\", width = 9, height = 16, res = 600)\ntanglegram(TreeA_L_2, TreeB_L_2,\n           sort = TRUE,\n           common_subtrees_color_lines = FALSE,\n           highlight_distinct_edges  = FALSE,\n           highlight_branches_lwd = FALSE)\ndev.off()\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_00_Overview/","title":"Overview","text":"<p>This chapter contains a manual on 16S amplicon analysis </p>"},{"location":"V.%2016S_amplicon_analysis/05_00_Overview/#03-parkinsons-disease","title":"03 Parkinsons disease","text":"<p>In the Parkinson's disease chapter there is an example of \"real-life\" analysis pipeline with the data from study on Parkinson's disease using <code>U-Test</code>, <code>Generalized Linear Model</code>; <code>NearestBalance</code> &amp; <code>selbal</code> packages and <code>Random Forest</code> Machine Learning algorithm.</p>"},{"location":"V.%2016S_amplicon_analysis/05_00_Overview/#02-crohns-disease","title":"02 Crohns disease","text":"<p>In the Crohn's disease chapter there is an example of \"real-life\" analysis pipeline with the data from study on Crohn's disease using <code>MicrobeR</code>, <code>balance</code>, <code>NearestBalance</code> &amp; <code>selbal</code> packages.</p>"},{"location":"V.%2016S_amplicon_analysis/05_00_Overview/#01-introduction","title":"01 Introduction","text":"<p>In the Introduction chapter there is an introductory guide on 16S amplicon analysis with <code>DADA2</code>.</p>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/","title":"16S analysis with DADA2","text":"<p>This chapter contains a manual on 16S analysis with DADA2</p>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#instruction","title":"Instruction","text":"<p>You can run commands below in your <code>RStudio</code> in <code>R script</code>. Or if you want to write a beautiful &amp; convenient to read laboratory journal you can use <code>R Markdown</code>.</p>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-1-downloading-the-necessary-packages-and-data","title":"Step 1: Downloading the necessary packages and data","text":"<p>First, let's download the necessary packages.</p> <p>Input</p> <pre><code>if (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\n#BiocManager::install(\"dada2\")\nlibrary(dada2)\n</code></pre> <p>Then let's set the working directory.</p> <p>Input</p> <pre><code>main_dir &lt;- dirname(rstudioapi::getSourceEditorContext()$path)\nsetwd(main_dir)\n</code></pre> <p>The data we will be working with are the same as those used in the mothur MiSeq SOP. The data can be downloaded here: https://mothur.s3.us-east-2.amazonaws.com/wiki/miseqsopdata.zip.</p> <p>Sometimes <code>R</code> does not like to download files. If it falls with error - download a zip archive manually and move it into working directory.</p> <p>Input</p> <pre><code>url &lt;- \"https://mothur.s3.us-east-2.amazonaws.com/wiki/miseqsopdata.zip\"\n\nzipF&lt;- \"miseqsopdata.zip\"\n\ndownload.file(url, zipF)\n\noutDir&lt;-\"miseqsopdata\"\n\nunzip(zipF,exdir=outDir)\n\nif (file.exists(zipF)) {\n  file.remove(zipF)\n}\n</code></pre> <p>These are the results of sequencing 2x250 Illumina Miseq amplicons of the V4 region of the 16S rRNA gene from gut samples collected from mice after weaning. For now, these are just paired reads for us.</p> <p>Here we look at the contents of the folder and save the filenames of the forward and reverse reads as separate vectors (<code>forward.raw</code> and <code>reverse.raw</code>), distinguishing them by suffix. The last line creates a list of samples, removing all characters except the sample number.</p> <p>Input</p> <pre><code>path &lt;- 'miseqsopdata/MiSeq_SOP'\nlist.files(path)\nfnFs &lt;- sort(list.files(path, pattern=\"_R1_001.fastq\", full.names = TRUE))\nfnRs &lt;- sort(list.files(path, pattern=\"_R2_001.fastq\", full.names = TRUE))\nsample.names &lt;- sapply(strsplit(basename(fnFs), \"_\"), `[`, 1)\n</code></pre> <p>Output</p> <pre><code> [1] \"F3D0_S188_L001_R1_001.fastq\"   \"F3D0_S188_L001_R2_001.fastq\"  \n [3] \"F3D1_S189_L001_R1_001.fastq\"   \"F3D1_S189_L001_R2_001.fastq\"  \n [5] \"F3D141_S207_L001_R1_001.fastq\" \"F3D141_S207_L001_R2_001.fastq\"\n [7] \"F3D142_S208_L001_R1_001.fastq\" \"F3D142_S208_L001_R2_001.fastq\"\n [9] \"F3D143_S209_L001_R1_001.fastq\" \"F3D143_S209_L001_R2_001.fastq\"\n[11] \"F3D144_S210_L001_R1_001.fastq\" \"F3D144_S210_L001_R2_001.fastq\"\n[13] \"F3D145_S211_L001_R1_001.fastq\" \"F3D145_S211_L001_R2_001.fastq\"\n[15] \"F3D146_S212_L001_R1_001.fastq\" \"F3D146_S212_L001_R2_001.fastq\"\n[17] \"F3D147_S213_L001_R1_001.fastq\" \"F3D147_S213_L001_R2_001.fastq\"\n[19] \"F3D148_S214_L001_R1_001.fastq\" \"F3D148_S214_L001_R2_001.fastq\"\n[21] \"F3D149_S215_L001_R1_001.fastq\" \"F3D149_S215_L001_R2_001.fastq\"\n[23] \"F3D150_S216_L001_R1_001.fastq\" \"F3D150_S216_L001_R2_001.fastq\"\n[25] \"F3D2_S190_L001_R1_001.fastq\"   \"F3D2_S190_L001_R2_001.fastq\"  \n[27] \"F3D3_S191_L001_R1_001.fastq\"   \"F3D3_S191_L001_R2_001.fastq\"  \n[29] \"F3D5_S193_L001_R1_001.fastq\"   \"F3D5_S193_L001_R2_001.fastq\"  \n[31] \"F3D6_S194_L001_R1_001.fastq\"   \"F3D6_S194_L001_R2_001.fastq\"  \n[33] \"F3D7_S195_L001_R1_001.fastq\"   \"F3D7_S195_L001_R2_001.fastq\"  \n[35] \"F3D8_S196_L001_R1_001.fastq\"   \"F3D8_S196_L001_R2_001.fastq\"  \n[37] \"F3D9_S197_L001_R1_001.fastq\"   \"F3D9_S197_L001_R2_001.fastq\"  \n[39] \"filtered\"                      \"HMP_MOCK.v35.fasta\"           \n[41] \"Mock_S280_L001_R1_001.fastq\"   \"Mock_S280_L001_R2_001.fastq\"  \n[43] \"mouse.dpw.metadata\"            \"mouse.time.design\"            \n[45] \"stability.batch\"               \"stability.files\"              \n</code></pre> <p>Now let's check the quality of the data. This function creates graphs similar to <code>FastQC</code> or <code>multiQC</code> graphs.</p> <p>Input</p> <pre><code>plotQualityProfile(fnFs[1:2])\n</code></pre> <p>Output</p> <p></p> <p>We can do the same for reverse reads.</p> <p>Input</p> <pre><code>plotQualityProfile(fnRs[1:2])\n</code></pre> <p>Output</p> <p></p> <p>Now we can filter by quality and trim reads based on the resulting graphs:</p> <p>Input</p> <pre><code>filt_path &lt;- file.path(path, \"filtered\")\nfiltFs &lt;- file.path(filt_path, paste0(sample.names, \"_F_filt.fastq.gz\"))\nfiltRs &lt;- file.path(filt_path, paste0(sample.names, \"_R_filt.fastq.gz\"))\n\nout &lt;- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),\n              maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,\n              compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE\n\nout\n</code></pre> <p>Output</p> <pre><code>                              reads.in reads.out\nF3D0_S188_L001_R1_001.fastq       7793      7113\nF3D1_S189_L001_R1_001.fastq       5869      5299\nF3D141_S207_L001_R1_001.fastq     5958      5463\nF3D142_S208_L001_R1_001.fastq     3183      2914\nF3D143_S209_L001_R1_001.fastq     3178      2941\nF3D144_S210_L001_R1_001.fastq     4827      4312\nF3D145_S211_L001_R1_001.fastq     7377      6741\nF3D146_S212_L001_R1_001.fastq     5021      4560\nF3D147_S213_L001_R1_001.fastq    17070     15637\nF3D148_S214_L001_R1_001.fastq    12405     11413\nF3D149_S215_L001_R1_001.fastq    13083     12017\nF3D150_S216_L001_R1_001.fastq     5509      5032\nF3D2_S190_L001_R1_001.fastq      19620     18075\nF3D3_S191_L001_R1_001.fastq       6758      6250\nF3D5_S193_L001_R1_001.fastq       4448      4052\nF3D6_S194_L001_R1_001.fastq       7989      7369\nF3D7_S195_L001_R1_001.fastq       5129      4765\nF3D8_S196_L001_R1_001.fastq       5294      4871\nF3D9_S197_L001_R1_001.fastq       7070      6504\nMock_S280_L001_R1_001.fastq       4779      4314\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-2-building-an-error-model","title":"Step 2: Building an error model","text":"<p>Evaluating the error model for the <code>DADA2</code> algorithm using direct reads.</p> <p>Input</p> <pre><code>errF &lt;- learnErrors(filtFs, multithread=TRUE)\n</code></pre> <p>Output</p> <pre><code>33514080 total bases in 139642 reads from 20 samples will be used for learning the error rates.\n</code></pre> <p>Same model for reverse reads.</p> <p>Input</p> <pre><code>errR &lt;- learnErrors(filtRs, multithread=TRUE)\n</code></pre> <p>Output</p> <pre><code>22342720 total bases in 139642 reads from 20 samples will be used for learning the error rates.\n</code></pre> <p>Error graph for all possible base transitions.</p> <p>Input</p> <pre><code>plotErrors(errF, nominalQ=TRUE)\n</code></pre> <p>Output</p> <p></p>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-3-dereplication-and-denoising","title":"Step 3: Dereplication and \"denoising\"","text":"<p>To speed up the calculations, we can remove identical sequences, taking into account their number in the subsequent analysis. For the obtained objects, we keep the same sample names.</p> <pre><code>derepFs &lt;- derepFastq(filtFs, verbose=TRUE)\nderepRs &lt;- derepFastq(filtRs, verbose=TRUE)\n# Name the derep-class objects by the sample names\nnames(derepFs) &lt;- sample.names\nnames(derepRs) &lt;- sample.names\n</code></pre> <p>Now we run the main algorithm to determine ASV for forward and reverse reads.</p> <pre><code>dadaFs &lt;- dada(derepFs, err=errF, pool=T, multithread=TRUE) \ndadaRs &lt;- dada(derepRs, err=errR, pool=T, multithread=TRUE)\n</code></pre> <p>Output</p> <pre><code>20 samples were pooled: 139642 reads in 23134 unique sequences.\n20 samples were pooled: 139642 reads in 20631 unique sequences.\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-4-merging-reads-summary-statistics","title":"Step 4: Merging reads, summary statistics","text":"<p>Now we can \"glue\" the forward and reverse reads for each pair into one sequence.</p> <pre><code>mergers &lt;- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)\n\nseqtab &lt;- makeSequenceTable(mergers)\ndim(seqtab)\n</code></pre> <p>Output</p> <pre><code>[1]  20 488\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-5-removal-of-chimeras","title":"Step 5: Removal of chimeras","text":"<p>Input</p> <pre><code>seqtab.nochim &lt;- removeBimeraDenovo(seqtab, method=\"consensus\", multithread=TRUE, verbose=TRUE)\ndim(seqtab.nochim)\n</code></pre> <p>Output</p> <pre><code>Identified 204 bimeras out of 488 input sequences.\n[1]  20 284\n</code></pre> <p>Input</p> <pre><code>dim(seqtab.nochim)\nsum(seqtab.nochim)/sum(seqtab)\n</code></pre> <p>Output</p> <pre><code>[1]  20 284\n[1] 0.9180065\n</code></pre> <p>Input</p> <pre><code>getN &lt;- function(x) sum(getUniques(x))\ntrack &lt;- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))\n# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)\ncolnames(track) &lt;- c(\"input\", \"filtered\", \"denoisedF\", \"denoisedR\", \"merged\", \"nonchim\")\nrownames(track) &lt;- sample.names\nhead(track)\n</code></pre> <p>Output</p> <pre><code>       input filtered denoisedF denoisedR merged nonchim\nF3D0    7793     7113      7077      7086   6758    6422\nF3D1    5869     5299      5273      5283   5135    4992\nF3D141  5958     5463      5427      5444   5166    4727\nF3D142  3183     2914      2893      2904   2725    2432\nF3D143  3178     2941      2922      2928   2761    2462\nF3D144  4827     4312      4290      4301   4020    3515\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-6-taxonomy-identification","title":"Step 6: Taxonomy identification","text":"<p>To determine the taxonomic position of the found sequences, we first need to download the classifier. https://zenodo.org/record/1172783/files/silva_nr_v132_train_set.fa.gz.</p> <p>Sometimes <code>R</code> does not like to download files. If it falls with error - download a gz archive manually and move it into working directory.</p> <p>Input</p> <pre><code>url &lt;- \"https://zenodo.org/record/1172783/files/silva_nr_v132_train_set.fa.gz\"\n\nclassifier_1 &lt;- \"silva_nr_v132_train_set.fa.gz\"\n\ndownload.file(url, classifier_1)\n</code></pre> <p>A separate classifier will be required to identify species. https://zenodo.org/record/1172783/files/silva_species_assignment_v132.fa.gz?download=1.</p> <p>Input</p> <pre><code>url &lt;- \"https://zenodo.org/record/1172783/files/silva_species_assignment_v132.fa.gz?download=1\"\n\nclassifier_2 &lt;- \"silva_species_assignment_v132.fa.gz\"\n\ndownload.file(url, classifier_2)\n</code></pre> <p>Input</p> <pre><code>taxa &lt;- assignTaxonomy(seqtab.nochim, \"silva_nr_v132_train_set.fa.gz\", multithread=TRUE)\n</code></pre> <p>Adding Species Information.</p> <p>Input</p> <pre><code>taxa &lt;- addSpecies(taxa, \"silva_species_assignment_v132.fa.gz\", verbose=TRUE, allowMultiple=T)\n</code></pre> <p>Output</p> <pre><code>38 out of 284 were assigned to the species level.\nOf which 33 had genera consistent with the input table.\n</code></pre> <p>Input</p> <pre><code>taxa.print &lt;- taxa # Removing sequence rownames for display only\nrownames(taxa.print) &lt;- NULL\nhead(taxa.print)\n</code></pre> <p>Output*</p> <pre><code>     Kingdom    Phylum          Class         Order           Family          \n[1,] \"Bacteria\" \"Bacteroidetes\" \"Bacteroidia\" \"Bacteroidales\" \"Muribaculaceae\"\n[2,] \"Bacteria\" \"Bacteroidetes\" \"Bacteroidia\" \"Bacteroidales\" \"Muribaculaceae\"\n[3,] \"Bacteria\" \"Bacteroidetes\" \"Bacteroidia\" \"Bacteroidales\" \"Muribaculaceae\"\n[4,] \"Bacteria\" \"Bacteroidetes\" \"Bacteroidia\" \"Bacteroidales\" \"Muribaculaceae\"\n[5,] \"Bacteria\" \"Bacteroidetes\" \"Bacteroidia\" \"Bacteroidales\" \"Bacteroidaceae\"\n[6,] \"Bacteria\" \"Bacteroidetes\" \"Bacteroidia\" \"Bacteroidales\" \"Muribaculaceae\"\n     Genus         Species                  \n[1,] NA            NA                       \n[2,] NA            NA                       \n[3,] NA            NA                       \n[4,] NA            NA                       \n[5,] \"Bacteroides\" \"acidifaciens/caecimuris\"\n[6,] NA            NA                       \n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_01_Introduction/#step-7-additional-translation-into-phyloseq-format","title":"Step 7 (additional): Translation into <code>Phyloseq</code> format","text":"<p>First, download the necessary packages.</p> <p>Input</p> <pre><code>BiocManager::install(\"phyloseq\")\n</code></pre> <p>Input</p> <pre><code>library(phyloseq); packageVersion(\"phyloseq\")\nlibrary(Biostrings); packageVersion(\"Biostrings\")\nlibrary(ggplot2); packageVersion(\"ggplot2\")\ntheme_set(theme_bw())\n</code></pre> <p>Then we add metadata.</p> <p>Input</p> <pre><code>samples.out &lt;- rownames(seqtab.nochim)\nsubject &lt;- sapply(strsplit(samples.out, \"D\"), `[`, 1)\ngender &lt;- substr(subject,1,1)\nsubject &lt;- substr(subject,2,999)\nday &lt;- as.integer(sapply(strsplit(samples.out, \"D\"), `[`, 2))\nsamdf &lt;- data.frame(Subject=subject, Gender=gender, Day=day)\nsamdf$When &lt;- \"Early\"\nsamdf$When[samdf$Day&gt;100] &lt;- \"Late\"\nrownames(samdf) &lt;- samples.out\n</code></pre> <p>And finally, we create a <code>phyloseq</code> object.</p> <p>Input</p> <pre><code>ps &lt;- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), \n               sample_data(samdf), \n               tax_table(taxa))\nps &lt;- prune_samples(sample_names(ps) != \"Mock\", ps) # Remove mock sample\n</code></pre> <p>With it, you can already do any subsequent analysis. For example, calculate alpha diversity.</p> <p>Input</p> <pre><code>plot_richness(ps, x=\"Day\", measures=c(\"Shannon\", \"Simpson\"), color=\"When\")\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>top20 &lt;- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]\nps.top20 &lt;- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))\nps.top20 &lt;- prune_taxa(top20, ps.top20)\nplot_bar(ps.top20, x=\"Day\", fill=\"Family\") + facet_wrap(~When, scales=\"free_x\")\n</code></pre> <p>Output</p> <p></p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/","title":"Practice 1: Crohn's disease","text":"<p>This chapter contains a training data for 16S amplicon analysis and an example of analysis.</p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#introduction","title":"Introduction","text":"<p>In this study, the gut microbiome composition in individuals with Crohn\u2019s Disease (CD) and Healthy Controls (HC) was investigated. The goal was to identify taxonomic shifts, potential functional implications, and associations with disease. High-throughput sequencing data and various bioinformatics tools were employed to analyze microbial diversity and abundance.</p> <p>Data obtained from the article \u00abA microbial signature for Crohn's disease\u00bb was used. These data include information on microbial samples from healthy individuals and patients with Crohn's disease.</p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#instruction","title":"Instruction","text":"<p>You can run commands below in your <code>RStudio</code> in <code>R script</code>. Or if you want to write a beautiful &amp; convenient to read laboratory journal you can use <code>R Markdown</code>.</p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#step-1-loading-libraries-and-data","title":"Step 1: Loading libraries and data","text":"<p>In this 16S amplicon analysis pipeline we will use <code>MicrobeR</code>, <code>balance</code>, <code>NearestBalance</code> &amp; <code>selbal</code> packages. Their installation is a bit difficult. Please follow the code below:</p> <pre><code>if (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"philr\")\nBiocManager::install(\"DECIPHER\")\n\ndevtools::install_github(\"jbisanz/MicrobeR\")\ndevtools::install_github(\"tpq/balance\")\ndevtools::install_bitbucket(\"knomics/nearestbalance\")\ndevtools::install_github(repo = \"malucalle/selbal\")\n</code></pre> <p>First, load all the libraries needed for the data analysis.</p> <p>Input</p> <pre><code>library(data.table)\nlibrary(openxlsx)\nlibrary(MicrobeR)\nlibrary(ggplot2)\nlibrary(zCompositions)\nlibrary(NearestBalance)\nlibrary(GUniFrac)\nlibrary(vegan)\nlibrary(ape)\nlibrary(selbal)\n</code></pre> <p>Then set the working directory.</p> <p>Input</p> <pre><code>main_dir &lt;- dirname(rstudioapi::getSourceEditorContext()$path) \nsetwd(main_dir)\n</code></pre> <p>Download the data to work with.</p> <p>Input</p> <pre><code>url &lt;- \"https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/05_16S_amplicon_analysis/05_02_Crohns_disease.zip\"\n\nzipF&lt;- \"05_02_Crohns_disease.zip\"\n\ndownload.file(url, zipF)\n\noutDir&lt;-\".\"\n\nunzip(zipF,exdir=outDir)\n\nif (file.exists(zipF)) {\n  file.remove(zipF)\n}\n</code></pre> <p>Load metadata and sort it by participant number.</p> <p>Input</p> <pre><code>metadata = fread(\"data/metadata.csv\")\nmetadata[, .N, by = diagnosis_full]\n</code></pre> <p>Output</p> <pre><code>diagnosis_full  N\n&lt;chr&gt; &lt;int&gt;\nCD  34\nHC  34\n2 rows\n</code></pre> <p>Load the <code>Counts</code> table.</p> <p>Input</p> <pre><code>counts &lt;- read.csv(\"data/counts.csv\",row.names = 1)\ncounts &lt;- counts[metadata$sample, colSums(counts) &gt;0]\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#step-2-check-the-data","title":"Step 2: Check the data","text":"<p>How many samples and microbial samples?</p> <p>Input</p> <pre><code>dim(counts)\n</code></pre> <p>Output</p> <pre><code>[1]  68 210\n</code></pre> <p>What's the coverage?</p> <p>Input</p> <pre><code>range(rowSums(counts))\n</code></pre> <p>Output</p> <pre><code>[1]  19414 121234\n</code></pre> <p>Composition of samples.</p> <p>Input</p> <pre><code>raw_abund &lt;- counts/rowSums(counts)\n</code></pre> <p>Input</p> <pre><code>metadata$SampleID &lt;- metadata$sample\n</code></pre> <p>Input</p> <pre><code>Microbiome.Barplot(t(raw_abund), metadata, CATEGORY = \"diagnosis_full\")\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/microbiome_barplot.jpg\", width = 11, height = 3.5, dpi = 300)\n</code></pre> <p>Is there enough coverage?</p> <p>Input</p> <pre><code>metadata$coverage &lt;- rowSums(counts)\n</code></pre> <p>Input</p> <pre><code>ggplot(metadata) + \n  geom_histogram(aes(coverage)) + \n  theme_minimal() + \n  xlab(\"N samples\")\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/coverage_quality.jpg\", width = 11, height = 3.5, dpi = 300)\n</code></pre> <p>Sequencing quality is sufficient.</p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#step-3-filtration-from-rare-and-under-represented-taxa","title":"Step 3: Filtration from rare and under-represented taxa","text":"<p>Keeping the microbes that occur in &gt;30% of samples.</p> <p>Input</p> <pre><code>filt_counts &lt;- counts[, colSums(counts&gt;0)&gt;0.3*nrow(counts)]\nmetadata[, filt_coverage := rowSums(filt_counts)]\nmetadata[, proportion_of_prevalent_taxa := 100*filt_coverage/coverage]\n</code></pre> <p>Coverage of samples after filtration.</p> <p>Input</p> <pre><code>ggplot(metadata)+\n  geom_histogram(aes(filt_coverage)) + \n  theme_minimal()+\n  xlab(\"Post-filtration coverage\") + \n  ylab(\"N samples\")\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/post-filtration_coverage.jpg\", width = 11, height = 3.5, dpi = 300)\n</code></pre> <p>What proportion of the microbes remained in the analysis.</p> <p>Input</p> <pre><code>ggplot(metadata)+\n  geom_histogram(aes(proportion_of_prevalent_taxa)) + \n  theme_minimal()+ \n  xlab(\"Proportion of microbes remaining in the assay\") + \n  ylab(\"N samples\")\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/remaining_proportion.jpg\", width = 11, height = 3.5, dpi = 300)\n</code></pre> <p>How many samples and microbial samples?</p> <p>Input</p> <pre><code>dim(filt_counts)\n</code></pre> <p>Output</p> <pre><code>[1] 68 89\n</code></pre> <p>What's the coverage?</p> <p>Input</p> <pre><code>range(rowSums(filt_counts))\n</code></pre> <p>Output</p> <pre><code>[1]  12981 120882\n</code></pre> <p>Input</p> <pre><code>matrix_data &lt;- matrix(c(\"Before\", 210, 19412,\n                         \"After\", 89, 12981), \n                      nrow = 2, byrow = TRUE)\n\ndata &lt;- as.data.frame(matrix_data)\n\ncolnames(data) &lt;- c(\"\", \"N microbes\", \"Minimum coverage\")\n\nprint(data)\n</code></pre> <p>Output</p> <pre><code>  N microbes  Minimum coverage\n&lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\nBefore  210 19412\nAfter   89  12981\n</code></pre> <p>Calculating relative abundances.</p> <p>Input</p> <pre><code>abundance &lt;- cmultRepl(filt_counts)\n</code></pre> <p>Output</p> <pre><code>No. adjusted imputations:  694 \n</code></pre> <p>Input</p> <pre><code>heatmap_with_split(abundance,\n                   metadata, ~ diagnosis_full,\n                   show_samp_names = F) + \n  theme(axis.text.y = element_text(size =5))\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/relative_abundance.jpg\", width = 8, height = 10, dpi = 300)\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#step-4-counting-alpha-diversity","title":"Step 4: Counting alpha diversity","text":"<p>Input</p> <pre><code>alpha_div &lt;- rowMeans(sapply(1:5, function(i){\n  counts_rar_i = Rarefy(counts, 19000)$otu.tab.rff\n  alpha_div_i = vegan::diversity(counts_rar_i)\n}))\nmetadata$Shannon.index &lt;- alpha_div[metadata$sample]\n</code></pre> <p>Input</p> <pre><code>ggplot(metadata) + \n  geom_boxplot(aes(diagnosis_full, Shannon.index, fill = diagnosis_full)) + \n  theme_minimal() +\n  theme(legend.position = 'none') + \n  xlab(\"\")\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/alpha_diversity.jpg\", width = 8, height = 8, dpi = 300)\n</code></pre> <p>Is it different?</p> <p>Input</p> <pre><code>wilcox.test(Shannon.index ~ diagnosis_full, metadata)$p.value\n</code></pre> <p>Output</p> <p><pre><code>[1] 1.314773e-09\n</code></pre> The p-value of <code>1.314773e-09</code> indicates a significant difference in alpha diversity between the two groups. CD samples exhibit lower alpha diversity compared to HC samples.</p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#step-5-aitchisons-beta-diversity-is-there-a-difference-in-proportions","title":"Step 5: Aitchison's beta diversity: is there a difference in proportions?","text":"<p>Input</p> <pre><code>clr &lt;- log(abundance) - rowMeans(log(abundance))\nbeta_div &lt;- dist(clr)\n</code></pre> <p>Input</p> <pre><code>pcoa_res &lt;- pcoa(beta_div)$vectors\nvar &lt;- apply(pcoa_res, 2, var)\nvar_rel &lt;- round(var*100/sum(var), 1)\n</code></pre> <p>Input</p> <pre><code>ggplot(cbind(metadata,pcoa_res)) + \n  geom_point(aes(Axis.1, Axis.2, col=diagnosis_full)) +\n  coord_fixed() + \n  theme_minimal() + \n  labs(col=\"\") + \n  xlab(paste0(\"Axis.1 (\",var_rel[1], \"%)\")) + \n  ylab(paste0(\"Axis.2 (\",var_rel[2], \"%)\"))\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/beta_diversity.jpg\", width = 8, height = 8, dpi = 300)\n</code></pre> <p>Is the difference statistically significant?</p> <p>Input</p> <pre><code>adonis2(beta_div ~ metadata$diagnosis_full)\n</code></pre> <p>Output</p> <pre><code>Permutation test for adonis under reduced model\nTerms added sequentially (first to last)\nPermutation: free\nNumber of permutations: 999\n\nadonis2(formula = beta_div ~ metadata$diagnosis_full)\n                        Df SumOfSqs      R2      F Pr(&gt;F)    \nmetadata$diagnosis_full  1     5400 0.16562 13.101  0.001 ***\nResidual                66    27205 0.83438                  \nTotal                   67    32605 1.00000                  \n---\nSignif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n</code></pre> <p>The statistical analysis using the <code>adonis2</code> test shows that the difference in beta diversity between the two groups is statistically significant (p-value = 0.001).</p>"},{"location":"V.%2016S_amplicon_analysis/05_02_Crohns_disease/#step-6-what-exactly-is-the-difference","title":"Step 6: What exactly is the difference?","text":"<p>Input</p> <pre><code>nb &lt;- nb_lm(abundance = abundance,\n            metadata = metadata,\n            pred = \"diagnosis_full\")\n</code></pre> <p>Input</p> <pre><code>heatmap_with_split(abundance = abundance[, unlist(nb$nb$b1)],\n                   metadata = metadata,\n                   formula = ~ diagnosis_full,\n                   num_name = \"health-related\",\n                   den_name = \"disease-related\",\n                   show_samp_names = F,\n                   balance = nb$nb$b1)\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/heatmap_w_split.jpg\", width = 10, height = 10, dpi = 300)\n</code></pre> <p>Illustrating the difference between the average microbiota of healthy and sick people.</p> <p>Input</p> <pre><code>psi &lt;- make_psi_from_sbp(nb$coord$sbp)\nmean_diff_clr &lt;- drop(nb$lm_res$coefficients[2,] %*% psi)\nbal_unit &lt;- balance_to_clr(nb$nb$b1, colnames(abundance))\nbal_diff_clr &lt;- drop(bal_unit %*% mean_diff_clr) * bal_unit\ntab &lt;- data.table(taxon = names(mean_diff_clr),\n                  clr_diff = mean_diff_clr,\n                  bal = bal_diff_clr)\nsetorderv(tab, \"clr_diff\")\ntab$taxon &lt;- factor(tab$taxon, levels = tab$taxon)\n</code></pre> <p>Mean difference between sick and healthy individuals.</p> <p>Input</p> <pre><code>ggplot(tab) + \n  geom_col(aes(clr_diff, taxon), fill = \"darkblue\") + \n  theme_minimal() + xlab(\"CLR(v)\") + ylab(\"\") + \n  theme(axis.text.y = element_text(size =5))\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/mean_difference.jpg\", width = 10, height = 10, dpi = 300)\n</code></pre> <p>Approximate, simplified difference.</p> <p>Input</p> <pre><code>ggplot(tab) + \n  geom_col(aes(bal, taxon), fill = \"darkblue\") + \n  theme_minimal() + xlab(\"CLR(b)\") + ylab(\"\") +\n  theme(axis.text.y = element_text(size =5))\n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/approximate_difference.jpg\", width = 10, height = 10, dpi = 300)\n</code></pre> <p>Balance value in each sample.</p> <p>Input</p> <pre><code>metadata$balance &lt;- balance.fromSBP(abundance, nb$nb$sbp)\n</code></pre> <p>Input</p> <pre><code>ggplot(metadata) + \n  geom_boxplot(aes(diagnosis_full, balance, fill = diagnosis_full)) + \n  theme_minimal() +\n  theme(legend.position = 'none') + \n  xlab(\"\") \n</code></pre> <p>Output</p> <p></p> <p>Input</p> <pre><code>ggsave(\"imgs/balance_value.jpg\", width = 8, height = 8, dpi = 300)\n</code></pre> <p>Has it changed?</p> <p>Input</p> <pre><code>wilcox.test(balance ~ diagnosis_full, metadata)$p.value\n</code></pre> <p>Output</p> <pre><code>[1] 2.621864e-17\n</code></pre> <p>The p-value of <code>2.621864e-17</code> indicates a significant difference in balance between the two groups.</p>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/","title":"Practice 2: Parkinson's disease","text":"<p>This chapter contains a training data for 16S amplicon analysis and an example of analysis.</p>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#introduction","title":"Introduction","text":"<p>In this study, the gut microbiome composition in individuals with Parkinson\u2019s Disease and Healthy Controls was investigated. The goal was to identify taxonomic shifts and associations with disease. High-throughput sequencing data and various bioinformatics tools were employed to analyze microbial diversity and abundance.</p> <p>Data obtained from the article \u00abParkinson\u2019s Disease and PD Medications Have Distinct Signatures of the Gut Microbiome\u00bb was used. These data include information on microbial samples from healthy individuals and patients with Parkinson\u2019s's disease.</p>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#instruction","title":"Instruction","text":"<p>You can run commands below in your <code>RStudio</code> in <code>R script</code>. Or if you want to write a beautiful &amp; convenient to read laboratory journal you can use <code>R Markdown</code>.</p>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#step-1-data-loading-and-preprocessing","title":"Step 1: Data Loading and Preprocessing","text":"<p>Install or call libraries</p> <pre><code>if (!require(\"pacman\")) install.packages(\"pacman\")\n\npacman::p_load(readr, dplyr, ROCR, PERMANOVA, plyr, data.table, ggplot2, e1071, randomForest, caret, NearestBalance, zCompositions, selbal)\n</code></pre> Note <p>If you experience any troubles in installing <code>NearestBalance</code> &amp; <code>selbal</code> packages please go to previous chapter</p> <p>Then set the working directory.</p> <p>Input</p> <pre><code>main_dir &lt;- dirname(rstudioapi::getSourceEditorContext()$path) \nsetwd(main_dir)\n</code></pre> <p>Download the data to work with.</p> <p>Input</p> <pre><code>url &lt;- \"https://github.com/iliapopov17/NGS-Handbook/raw/refs/heads/main/data/05_16S_amplicon_analysis/05_03_Parkinsons_disease.zip\"\n\nzipF&lt;- \"05_03_Parkinsons_disease.zip\"\n\ndownload.file(url, zipF)\n\noutDir&lt;-\".\"\n\nunzip(zipF,exdir=outDir)\n\nif (file.exists(zipF)) {\n  file.remove(zipF)\n}\n</code></pre> <p>Load data from various files. - <code>Parkinson_otu_table_L6.tsv</code> is an OTU (Operational Taxonomic Units) table at level 6 taxonomy (genus level). - <code>Parkinson_chao1.tsv</code> contains alpha diversity metrics (Chao1 richness estimate). - <code>sample_info.txt</code> is metadata, which contains sample information, such as case/control labels.</p> <p>Input</p> <pre><code>biomeData &lt;- read_delim('data/Parkinson_otu_table_L6.tsv',  \"\\t\", col_names = TRUE, escape_double = FALSE, trim_ws = TRUE)\nalphaDivData &lt;- read_delim('data/Parkinson_chao1.tsv',  \"\\t\", col_names = TRUE,escape_double = FALSE, trim_ws = TRUE)\nmetaData &lt;- read_delim('data/sample_info.txt',  \"\\t\", col_names = TRUE, escape_double = FALSE, trim_ws = TRUE)\n</code></pre> <p>Check if data is loaded correctly as a data frame</p> <p>Input</p> <pre><code>is.data.frame(biomeData)\n</code></pre> <p>Output</p> <pre><code>[1] TRUE\n</code></pre> <p>Ensure that the first column name (<code>sample_name</code>) in all datasets matches for merging later</p> <p>Input</p> <pre><code>colnames(biomeData)[1]&lt;-colnames(metaData)[1]\ncolnames(alphaDivData)[1]&lt;-colnames(metaData)[1]\n</code></pre> <p>Find the common sample names between the three datasets (<code>biomeData</code>, <code>alphaDivData</code>, and <code>metaData</code>)</p> <p>Input</p> <pre><code>commonSamples&lt;-Reduce(intersect, list(biomeData$sample_name,alphaDivData$sample_name,metaData$sample_name))\n</code></pre> <p>Set the row names of the data frames to the sample names for easier subsetting later</p> <p>Input</p> <pre><code>rownames(biomeData)&lt;-biomeData$sample_name\nrownames(alphaDivData)&lt;-alphaDivData$sample_name\nrownames(metaData)&lt;-metaData$sample_name\n</code></pre> <p>Subset the data to include only the common samples across the datasets</p> <p>Input</p> <pre><code>alphaDivDataS&lt;-alphaDivData[commonSamples,]\nbiomeDataS&lt;-biomeData[commonSamples,]\nmetaDataS&lt;-metaData[commonSamples,]\n</code></pre> <p>Remove the first column (sample name) from biomeDataS as it's redundant now</p> <p>Input</p> <pre><code>biomeDataS&lt;-biomeDataS[,-1]\n</code></pre> <p>Reassign row names based on sample names from metadata (just to ensure they match)</p> <p>Input</p> <pre><code>rownames(biomeDataS)&lt;-metaDataS$sample_name\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#step-2-statistical-tests-normality-u-test-and-glm","title":"Step 2: Statistical Tests (Normality, U-Test, and GLM)","text":""},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#normality-test","title":"Normality test","text":"<p>Shapiro-Wilk test to check if the Chao1 alpha diversity values follow a normal distribution</p> <p>Input</p> <pre><code>shapiro.test(alphaDivDataS$mean_chao1)\n</code></pre> <p>Output</p> <pre><code>    Shapiro-Wilk normality test\n\ndata:  alphaDivDataS$mean_chao1\nW = 0.98753, p-value = 0.0146\n</code></pre> <p>The data is not normally distributed, the p-value is very small</p>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#wilcoxon-rank-sum-test","title":"Wilcoxon rank-sum test","text":"<p>Wilcoxon rank-sum test (non-parametric test) to compare cases and controls Extract sample names for controls and cases based on <code>case_control</code> metadata</p> <p>Input</p> <pre><code>controls&lt;-metaDataS[which(metaDataS$case_control == 'Control'),'sample_name']\ncases&lt;-metaDataS[which(metaDataS$case_control == 'Case'),'sample_name']\ncases&lt;-cases[[1]]\ncontrols&lt;-controls[[1]]\n</code></pre> <p>Initialize a matrix to store Wilcoxon test results for each taxonomic group</p> <p>Input</p> <pre><code>wilcoxRes&lt;-matrix(ncol=3,nrow=0)\n</code></pre> <p>Loop through each taxonomic group (each column of biomeDataS) and perform Wilcoxon test between cases and controls</p> <p>Input</p> <pre><code>for (i in colnames(biomeDataS))\n{\n  wt&lt;-wilcox.test(biomeDataS[cases,i][[1]],biomeDataS[controls,i][[1]])\n  wilcoxRes&lt;-rbind(wilcoxRes, c(i,wt$statistic, wt$p.value))\n}\n</code></pre> <p>Adjust p-values using the False Discovery Rate (FDR) method to control for multiple comparisons</p> <p>Input</p> <pre><code>wicoxPvalAdj&lt;-p.adjust(wilcoxRes[,3], method = 'fdr')\n</code></pre> <p>Combine the Wilcoxon test results with adjusted p-values into a data frame</p> <p>Input</p> <pre><code>wilcoxRes&lt;-cbind(wilcoxRes, wicoxPvalAdj)\ncolnames(wilcoxRes)&lt;-c('tax','stat','pval','pval_adj')\nwilcoxRes&lt;-as.data.frame(wilcoxRes)\n</code></pre> <p>Convert p-values to numeric and round them to 3 decimal places for readability</p> <p>Input</p> <pre><code>wilcoxRes$pval&lt;- round(as.numeric(as.character(wilcoxRes$pval)), 3)\nwilcoxRes$pval_adj&lt;- round(as.numeric(as.character(wilcoxRes$pval_adj)), 3)\n</code></pre> <p>Extract significant results where the adjusted p-value is less than 0.05</p> <p>Input</p> <pre><code>wilcoxResSign&lt;-wilcoxRes[which(wilcoxRes$pval_adj &lt;0.05),]\nwilcoxResSign\n</code></pre> <p>Output</p> <pre><code>tax\n4                  Bacteria;Actinobacteria;Actinobacteria;Actinomycetales;Actinomycetaceae;Mobiluncus\n18        Bacteria;Actinobacteria;Actinobacteria;Bifidobacteriales;Bifidobacteriaceae;Bifidobacterium\n23            Bacteria;Actinobacteria;Actinobacteria;Coriobacteriales;Coriobacteriaceae;Gordonibacter\n33                  Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Porphyromonadaceae;Porphyromonas\n64         Bacteria;Firmicutes;Clostridia;Clostridiales;(Eubacteriaceae/Lachnospiraceae);unclassified\n65       Bacteria;Firmicutes;Clostridia;Clostridiales;(Eubacteriaceae/Lachnospiraceae)_2;unclassified\n75  Bacteria;Firmicutes;Clostridia;Clostridiales;Clostridiales_Family_XI._Incertae_Sedis;Anaerococcus\n81                            Bacteria;Firmicutes;Clostridia;Clostridiales;Eubacteriaceae;Eubacterium\n84      Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;(Lachnoclostridium/unclassified)\n85                          Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Anaerostipes\n96                             Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Roseburia\n211      Bacteria;Verrucomicrobia;Verrucomicrobiae;Verrucomicrobiales;Verrucomicrobiaceae;Akkermansia\n     stat  pval pval_adj\n4   11589 0.000    0.003\n18  12781 0.000    0.002\n23  11125 0.002    0.042\n33  12098 0.000    0.009\n64   7651 0.002    0.042\n65   7098 0.000    0.004\n75  11803 0.001    0.040\n81   7436 0.001    0.020\n84   7313 0.000    0.009\n85   6923 0.000    0.002\n96   6692 0.000    0.002\n211 12039 0.001    0.035\n</code></pre> <p>Perform Wilcoxon test for alpha diversity (Chao1) between cases and controls</p> <p>Input</p> <pre><code>wt&lt;-wilcox.test(alphaDivDataS[which(alphaDivDataS$sample_name %in% cases),'mean_chao1'][[1]], alphaDivDataS[which(alphaDivDataS$sample_name %in% controls),'mean_chao1'][[1]])\nwt\n</code></pre> <p>Output</p> <pre><code>    Wilcoxon rank sum test with continuity correction\n\ndata:  alphaDivDataS[which(alphaDivDataS$sample_name %in% cases), \"mean_chao1\"][[1]] and alphaDivDataS[which(alphaDivDataS$sample_name %in% controls), \"mean_chao1\"][[1]]\nW = 10352, p-value = 0.4215\nalternative hypothesis: true location shift is not equal to 0\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#generalized-linear-model-glm","title":"Generalized Linear Model (GLM)","text":"<p>GLM to test associations between microbiome features and metadata (case/control, BMI, sex, age)</p> <p>Join the metadata with biome data</p> <p>Input</p> <pre><code>glmDF&lt;-inner_join(metaDataS[,c('sample_name','case_control','sex','age','bmi')],biomeData, by = 'sample_name')\n</code></pre> <p>Filter out samples with missing BMI, age, or sex data</p> <p>Input</p> <pre><code>glmDF&lt;-glmDF[which(!is.na(glmDF$bmi)),]\nglmDF&lt;-glmDF[which(!is.na(glmDF$age)),]\nglmDF&lt;-glmDF[which(!is.na(glmDF$sex)),]\n</code></pre> <p>Convert age and BMI columns to numeric type</p> <p>Input</p> <pre><code>glmDF$age&lt;-as.numeric(as.character(glmDF$age))\nglmDF$bmi&lt;-as.numeric(as.character(glmDF$bmi))\n</code></pre> <p>Initialize a matrix to store the results of GLM models</p> <p>Input</p> <pre><code>resGLM&lt;-matrix(nrow=0, ncol=6)\n</code></pre> <p>Loop through each taxonomic group and fit a GLM with covariates BMI, sex, age, and case/control status</p> <p>Input</p> <pre><code>for (i in colnames(biomeDataS))\n{\n  model0&lt;- glm(glmDF[,i][[1]] ~ glmDF[,'bmi'][[1]]+glmDF[,'sex'][[1]]+glmDF[,'age'][[1]]+glmDF[,'case_control'][[1]])\n  tr&lt;-summary(model0)\n  tr&lt;-tr$coefficients\n  tr[,'Pr(&gt;|t|)']&lt;-round(as.numeric(tr[,'Pr(&gt;|t|)']),2)\n  tr&lt;-cbind(rep(i,nrow(tr)),tr)\n  tr&lt;-cbind(c('intercept','BMI','SEX','AGE','control_vs_case'),tr)\n  rownames(tr)&lt;-c()\n  resGLM&lt;-rbind(resGLM, tr)\n}\n</code></pre> <p>Assign column names to the GLM results and adjust p-values using FDR method</p> <p>Input</p> <pre><code>colnames(resGLM)&lt;-c('factor','tax','estimate','std_error','t_val','pval')\nresGLM&lt;-as.data.frame(resGLM)\nresGLM&lt;-cbind(resGLM, p.adjust(resGLM$pval, method = 'fdr'))\ncolnames(resGLM)[length(colnames(resGLM))]&lt;-'pval_adj'\n</code></pre> <p>Filter results to show only significant associations with case/control status</p> <p>Input</p> <pre><code>resGLM&lt;-resGLM[which(resGLM$factor == 'control_vs_case'),]\nresGLMFilt&lt;-resGLM[which(resGLM$pval_adj&lt;0.05),]\nresGLMFilt\n</code></pre> <p>Output</p> <pre><code>              factor\n5    control_vs_case\n325  control_vs_case\n405  control_vs_case\n420  control_vs_case\n480  control_vs_case\n570  control_vs_case\n625  control_vs_case\n1055 control_vs_case\n                                                                                                     tax\n5        Archaea;Euryarchaeota;Methanobacteria;Methanobacteriales;Methanobacteriaceae;Methanobrevibacter\n325         Bacteria;Firmicutes;Clostridia;Clostridiales;(Eubacteriaceae/Lachnospiraceae)_2;unclassified\n405                              Bacteria;Firmicutes;Clostridia;Clostridiales;Eubacteriaceae;Eubacterium\n420        Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;(Lachnoclostridium/unclassified)\n480                               Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Roseburia\n570                                Bacteria;Firmicutes;Clostridia;Clostridiales;Ruminococcaceae;Gemmiger\n625  Bacteria;Firmicutes;Erysipelotrichia;Erysipelotrichales;Erysipelotrichaceae;Candidatus_Stoquefichus\n1055        Bacteria;Verrucomicrobia;Verrucomicrobiae;Verrucomicrobiales;Verrucomicrobiaceae;Akkermansia\n                estimate          std_error             t_val pval\n5    -0.0472473208760292 0.0136202994412748  -3.4688900254903    0\n325     1.49958472903816  0.488411879979953   3.0703281195775    0\n405    0.519189420564998  0.181942484855474  2.85359090801369    0\n420    0.132428236193973 0.0406417659361785  3.25842721504598    0\n480     1.19150475309103  0.332437879526919  3.58414256157155    0\n570   0.0341504148648222 0.0118551276702192  2.88064505206554    0\n625   -0.287410863591875 0.0917414127348212 -3.13283668764331    0\n1055   -2.73511147819197  0.826501709219534 -3.30926294245022    0\n     pval_adj\n5           0\n325         0\n405         0\n420         0\n480         0\n570         0\n625         0\n1055        0\n</code></pre> <p>Check for overlap between GLM and Wilcoxon test results (significant taxa)</p> <p>Input</p> <pre><code>resGLMFilt$tax[which(resGLMFilt$tax %in% wilcoxResSign$tax)]\n</code></pre> <p>Output</p> <pre><code>[1] \"Bacteria;Firmicutes;Clostridia;Clostridiales;(Eubacteriaceae/Lachnospiraceae)_2;unclassified\" \n[2] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Eubacteriaceae;Eubacterium\"                      \n[3] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;(Lachnoclostridium/unclassified)\"\n[4] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Roseburia\"                       \n[5] \"Bacteria;Verrucomicrobia;Verrucomicrobiae;Verrucomicrobiales;Verrucomicrobiaceae;Akkermansia\" \n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#step-3-permanova-analysis","title":"Step 3: PERMANOVA Analysis","text":"<p>PERMANOVA to test if there is a significant difference in community composition between cases and controls</p> <p>Calculate Bray-Curtis distance matrix on biome data</p> <p>Input</p> <pre><code>biomeDist&lt;- DistContinuous(biomeDataS, coef = 'Bray_Curtis')\n</code></pre> <p>Perform PERMANOVA on the distance matrix using case/control status as the grouping factor</p> <p>Input</p> <p><pre><code>biomePERM=PERMANOVA(biomeDist, as.factor(metaDataS$case_control),  CoordPrinc = TRUE, PostHoc = 'fdr')\nbiomePERM$pvalue\n</code></pre> Output</p> <pre><code>[1] 0.001998002\n</code></pre> <p>Input</p> <pre><code>summary(biomePERM)\n</code></pre> <p>Output</p> <pre><code> ###### PERMANOVA Analysis #######\n\nCall\nPERMANOVA(Distance = biomeDist, group = as.factor(metaDataS$case_control), \n    CoordPrinc = TRUE, PostHoc = \"fdr\")\n________________________________________________\n\nContrast Matrix\n          Case Control\nC Case       1       0\nC Control    0       1\n________________________________________________\n\nPerMANOVA\n      Explained Residual df Num df Denom    F-exp     p-value\nTotal 0.6153953 50.81976      1      283 3.426952 0.001998002\n      p-value adj.\nTotal  0.001998002\n________________________________________________\n\nContrasts\n          Explained Residual df Num df Denom    F-exp     p-value\nC Case    0.2504767 50.81976      1      283 1.394829 0.001998002\nC Control 0.3649186 50.81976      1      283 2.032122 0.001998002\nTotal     0.6153953 50.81976      1      283 3.426952 0.001998002\n          p-value adj.\nC Case     0.002000000\nC Control  0.002000000\nTotal      0.001998002\n________________________________________________\n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#step-4-balance-and-compositional-analysis-selbal","title":"Step 4: Balance and Compositional Analysis (<code>Selbal</code>)","text":"<p>Add a small constant (pseudo count) to the biomeDataS to avoid log(0) issues for balance analysis</p> <p>Input</p> <pre><code>biomeDataS_pseudo&lt;-biomeDataS + 0.0001\n</code></pre> <p>Perform Nearest Balance (NB) analysis to identify microbial taxa associated with case/control status <code>abundance</code> is the transformed microbiome data, <code>metadata</code> contains case/control labels</p> <p>Input</p> <pre><code>nb_2 &lt;- nb_lm(abundance = biomeDataS_pseudo,\n              metadata = metaDataS,\n              pred = \"case_control\")\n</code></pre> <p>Retrieve the identified taxa that contribute to the balance in cases and controls</p> <p>Input</p> <pre><code>nb_2$nb$b1$num # Taxa associated with case group\n</code></pre> <p>Output</p> <pre><code> [1] \"Bacteria;Firmicutes;Clostridia;Clostridiales;(Eubacteriaceae/Lachnospiraceae)_2;unclassified\"          \n [2] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Anaerostipes\"                             \n [3] \"Bacteria;Firmicutes;Clostridia;Clostridiales;(Eubacteriaceae/Lachnospiraceae);unclassified\"            \n [4] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;(Lachnoclostridium/unclassified)\"         \n [5] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Roseburia\"                                \n [6] \"Bacteria;Firmicutes;(Bacilli/Clostridia);unclassified;unclassified;unclassified\"                       \n [7] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;(Blautia/unclassified)\"                   \n [8] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Lachnospira\"                              \n [9] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Clostridiaceae;unclassified\"                              \n[10] \"Bacteria;Proteobacteria;Gammaproteobacteria;Pasteurellales;Pasteurellaceae;Haemophilus\"                \n[11] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Ruminococcaceae;Gemmiger\"                                 \n[12] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Ruminococcaceae;Faecalibacterium\"                         \n[13] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Eubacteriaceae;Eubacterium\"                               \n[14] \"Bacteria;Proteobacteria;Gammaproteobacteria;Enterobacteriales;Enterobacteriaceae;Serratia\"             \n[15] \"Bacteria;Firmicutes;Erysipelotrichia;Erysipelotrichales;Erysipelotrichaceae;Holdemania\"                \n[16] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Peptostreptococcaceae;unclassified\"                       \n[17] \"Bacteria;Actinobacteria;Actinobacteria;Actinomycetales;Micrococcaceae;Rothia\"                          \n[18] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;unclassified\"                             \n[19] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Tyzzerella\"                               \n[20] \"Bacteria;Proteobacteria;Alphaproteobacteria;RF32;unclassified;unclassified\"                            \n[21] \"Bacteria;Proteobacteria;Gammaproteobacteria;Enterobacteriales;Enterobacteriaceae;Escherichia\"          \n[22] \"Bacteria;Proteobacteria;Betaproteobacteria;Burkholderiales;Comamonadaceae;Comamonas\"                   \n[23] \"Bacteria;Proteobacteria;Gammaproteobacteria;Pseudomonadales;Moraxellaceae;Acinetobacter\"               \n[24] \"Bacteria;Proteobacteria;Betaproteobacteria;Burkholderiales;Alcaligenaceae;Alcaligenes\"                 \n[25] \"Bacteria;Proteobacteria;Gammaproteobacteria;Enterobacteriales;Enterobacteriaceae;Providencia\"          \n[26] \"Bacteria;Proteobacteria;Gammaproteobacteria;Enterobacteriales;Enterobacteriaceae;unclassified\"         \n[27] \"Bacteria;Firmicutes;Clostridia;Clostridiales;(Clostridiaceae/unclassified);unclassified\"               \n[28] \"Bacteria;Firmicutes;Bacilli;Lactobacillales;Streptococcaceae;Lactococcus\"                              \n[29] \"Bacteria;Firmicutes;Bacilli;Lactobacillales;Carnobacteriaceae;Granulicatella\"                          \n[30] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Peptococcaceae;Peptococcus\"                               \n[31] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Ruminococcaceae;(Ruminococcus/unclassified)\"              \n[32] \"Bacteria;Firmicutes;unclassified;unclassified;unclassified;unclassified\"                               \n[33] \"Bacteria;Firmicutes;Negativicutes;Veillonellales;Veillonellaceae;Veillonella\"                          \n[34] \"Bacteria;Proteobacteria;Gammaproteobacteria;Xanthomonadales;Xanthomonadaceae;Stenotrophomonas\"         \n[35] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Blautia\"                                  \n[36] \"Bacteria;Proteobacteria;Betaproteobacteria;Burkholderiales;Comamonadaceae;(Diaphorobacter/Hylemonella)\"\n[37] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Clostridiaceae;Clostridium\"                               \n[38] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Lachnoclostridium\" \n</code></pre> <p>Input</p> <pre><code>nb_2$nb$b1$den # Taxa associated with control group\n</code></pre> <p>Output</p> <pre><code> [1] \"Bacteria;Verrucomicrobia;Verrucomicrobiae;Verrucomicrobiales;Verrucomicrobiaceae;Akkermansia\"                                  \n [2] \"Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Porphyromonadaceae;Porphyromonas\"                                             \n [3] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Christensenellaceae;Christensenella\"                                              \n [4] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Clostridiales_Family_XI._Incertae_Sedis;Anaerococcus\"                             \n [5] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Christensenellaceae;unclassified\"                                                 \n [6] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Clostridiales_Family_XI._Incertae_Sedis;Peptoniphilus\"                            \n [7] \"Bacteria;Firmicutes;Clostridia;Clostridiales;(Ruminococcaceae/unclassified);unclassified\"                                      \n [8] \"Bacteria;Firmicutes;Bacilli;Lactobacillales;Lactobacillaceae;Lactobacillus\"                                                    \n [9] \"Bacteria;Actinobacteria;Actinobacteria;Actinomycetales;Corynebacteriaceae;Corynebacterium\"                                     \n[10] \"Bacteria;Actinobacteria;Actinobacteria;Actinomycetales;Actinomycetaceae;Mobiluncus\"                                            \n[11] \"Bacteria;Proteobacteria;Deltaproteobacteria;Desulfovibrionales;Desulfovibrionaceae;Desulfovibrio\"                              \n[12] \"Bacteria;Firmicutes;Erysipelotrichia;Erysipelotrichales;Erysipelotrichaceae;Candidatus_Stoquefichus\"                           \n[13] \"Bacteria;Actinobacteria;Actinobacteria;Bifidobacteriales;Bifidobacteriaceae;Bifidobacterium\"                                   \n[14] \"Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Prevotellaceae;Paraprevotella\"                                                \n[15] \"Bacteria;Actinobacteria;Actinobacteria;Actinomycetales;Actinomycetaceae;Varibaculum\"                                           \n[16] \"Archaea;Euryarchaeota;Methanobacteria;Methanobacteriales;Methanobacteriaceae;Methanobrevibacter\"                               \n[17] \"Bacteria;Proteobacteria;Epsilonproteobacteria;Campylobacterales;Campylobacteraceae;Campylobacter\"                              \n[18] \"Bacteria;Proteobacteria;Deltaproteobacteria;Desulfovibrionales;Desulfovibrionaceae;Bilophila\"                                  \n[19] \"Bacteria;Firmicutes;Negativicutes;Veillonellales;Veillonellaceae;Megasphaera\"                                                  \n[20] \"Bacteria;Proteobacteria;Betaproteobacteria;Burkholderiales;Sutterellaceae;unclassified\"                                        \n[21] \"Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Porphyromonadaceae;Odoribacter\"                                               \n[22] \"Bacteria;Firmicutes;Clostridia;Clostridiales;[Mogibacteriaceae];unclassified\"                                                  \n[23] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Clostridiales_Family_XI._Incertae_Sedis;(Finegoldia/Unclassified_Tissierellaceae)\"\n[24] \"Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Porphyromonadaceae;Butyricimonas\"                                             \n[25] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;Anoxystipes\"                                                      \n[26] \"Bacteria;Firmicutes;Bacilli;Bacillales;Staphylococcaceae;Staphylococcus\"                                                       \n[27] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Catabacteriaceae;Catabacter\"                                                      \n[28] \"Bacteria;Synergistetes;Synergistia;Synergistales;Synergistaceae;Cloacibacillus\"                                                \n[29] \"Bacteria;Proteobacteria;Gammaproteobacteria;Enterobacteriales;Enterobacteriaceae;Proteus\"                                      \n[30] \"Bacteria;Actinobacteria;Actinobacteria;Coriobacteriales;Coriobacteriaceae;Gordonibacter\"                                       \n[31] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Lachnospiraceae;[Ruminococcus]\"                                                   \n[32] \"Bacteria;Firmicutes;Erysipelotrichia;Erysipelotrichales;Erysipelotrichaceae;Holdemanella\"                                      \n[33] \"Bacteria;Proteobacteria;Gammaproteobacteria;Enterobacteriales;Enterobacteriaceae;(Citrobacter/Raoultella)\"                     \n[34] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Ruminococcaceae;(Faecalibacterium/Gemmiger)\"                                      \n[35] \"Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Porphyromonadaceae;Parabacteroides\"                                           \n[36] \"Bacteria;Firmicutes;Negativicutes;Acidaminococcales;Acidaminococcaceae;Acidaminococcus\"                                        \n[37] \"Bacteria;Proteobacteria;Betaproteobacteria;Burkholderiales;Oxalobacteraceae;Oxalobacter\"                                       \n[38] \"Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Rikenellaceae;Alistipes\"                                                      \n[39] \"Bacteria;Lentisphaerae;Lentisphaeria;Victivallales;Victivallaceae;Victivallis\"                                                 \n[40] \"Bacteria;Firmicutes;Clostridia;Clostridiales;Ruminococcaceae;Candidatus_Soleaferrea\" \n</code></pre> <p>Create a heatmap showing the association of microbial taxa with case and control samples</p> <p>Input</p> <pre><code>heatmap_with_split(\n  abundance = biomeDataS_pseudo,         # Pseudocount-adjusted biome data\n  metadata = metaDataS,                  # Metadata with case/control status\n  formula = ~ case_control,              # The grouping factor (case vs control)\n  balance = nb_2$nb$b1,                  # Taxa that define the balance\n  show_samp_names = FALSE,               # Hide sample names for clarity\n  num_name = \"taxa_case\",                # Label for case-associated taxa\n  den_name = \"taxa_control\",             # Label for control-associated taxa\n  others_name = \"not associated with Parkinson\"  # Other taxa\n)\n</code></pre> <p>Output</p> <p></p> Note <p>This heatmap is not perfect at all. It is not in \"publication ready quality\". Yet it serves well for the aim of analysis.</p>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#step-5-machine-learning-random-forest","title":"Step 5: Machine Learning: Random Forest","text":"<p>Random Forest classifier for case/control prediction</p> <p>Split the data into training (80%) and testing (20%) sets</p> <p>Input</p> <pre><code>train_index &lt;- createDataPartition(y = metaDataS$case_control, p = 0.8, list=FALSE)\ntrain_set &lt;- biomeDataS[train_index,]\ntest_set &lt;- biomeDataS[-train_index,]\n</code></pre> <p>Train the Random Forest model with 500 trees</p> <p>Input</p> <pre><code>modRF &lt;- randomForest(train_set,as.factor(metaDataS$case_control[train_index]), nTree=500)\n</code></pre> <p>Evaluate the importance of each variable (taxon) in the Random Forest model</p> <p>Input</p> <pre><code>imp&lt;-as.data.frame(importance(modRF))\nimp&lt;-cbind(rownames(imp),imp)\nimp&lt;-imp[order(imp$MeanDecreaseGini, decreasing =T),]\n</code></pre> Note <p>Run the cell below by yourself to see the dataframe with the importance of each variable (taxon) in the Random Forest model</p> <p>Input</p> <pre><code>View(imp)\n</code></pre> <p>Plot variable importance (Mean Decrease in Gini index)</p> <p>Input</p> <pre><code>varImpPlot(modRF)\n</code></pre> <p>Output</p> <p></p> <p>Predict case/control status for the test set using the trained Random Forest model</p> <p>Input</p> <pre><code>predictionTree &lt;- predict(modRF, newdata=test_set, type='prob')\n</code></pre> <p>Convert the predicted probabilities into percentages and merge with actual case/control labels</p> <p>Input</p> <pre><code>predictionTreePerc &lt;- as.data.frame(100*predictionTree)\npredictionTreePerc&lt;-cbind(rownames(biomeDataS)[-train_index],predictionTreePerc)\npredictionTree &lt;- predict(modRF, newdata=test_set)\npredictionTreePerc&lt;-cbind(predictionTreePerc,predictionTree)\ncolnames(predictionTreePerc)[1]&lt;-'sample_name'\n</code></pre> <p>Merge predictions with the actual case/control status from metadata</p> <p>Input</p> <pre><code>predictionTreePerc&lt;-inner_join(predictionTreePerc, metaDataS[,c('sample_name','case_control')])\n</code></pre> <p>Confusion matrix to assess Random Forest performance</p> <p>Input</p> <pre><code>confmatRF&lt;-confusionMatrix(data=as.factor(predictionTreePerc$predictionTree), reference=as.factor(predictionTreePerc$case_control))\nconfmatRF\n</code></pre> <p>Output</p> <pre><code>Confusion Matrix and Statistics\n\n          Reference\nPrediction Case Control\n   Case      25      12\n   Control    8      11\n\n               Accuracy : 0.6429          \n                 95% CI : (0.5036, 0.7664)\n    No Information Rate : 0.5893          \n    P-Value [Acc &gt; NIR] : 0.2501          \n\n                  Kappa : 0.2422          \n\n Mcnemar's Test P-Value : 0.5023          \n\n            Sensitivity : 0.7576          \n            Specificity : 0.4783          \n         Pos Pred Value : 0.6757          \n         Neg Pred Value : 0.5789          \n             Prevalence : 0.5893          \n         Detection Rate : 0.4464          \n   Detection Prevalence : 0.6607          \n      Balanced Accuracy : 0.6179          \n\n       'Positive' Class : Case     \n</code></pre>"},{"location":"V.%2016S_amplicon_analysis/05_03_Parkinsons_disease/#make-roc-receiver-operating-characteristic-curve-and-calculate-auc-area-under-curve","title":"Make ROC (Receiver Operating Characteristic) curve and calculate AUC (Area Under Curve)","text":"<p>Obtain predicted probabilities for the test set for ROC curve creation</p> <p>Input</p> <pre><code>prediction_for_roc_curve &lt;- predict(modRF, newdata=test_set, type='prob')\nclasses &lt;- levels(as.factor(predictionTreePerc$case_control))\n</code></pre> <p>Use the second column of predicted probabilities (i.e., for the \"case\" class)</p> <p>Input</p> <pre><code>pred &lt;- prediction(prediction_for_roc_curve[,2],predictionTreePerc$case_control)\n</code></pre> <p>Create a performance object for the true positive rate (TPR) and false positive rate (FPR)</p> <p>Input</p> <pre><code>perf &lt;- performance(pred, \"tpr\", \"fpr\")\n</code></pre> <p>Calculate the AUC for the ROC curve</p> <p>Input</p> <pre><code>aucRF &lt;- performance(pred, \"auc\")\naucRF &lt;- aucRF@y.values[[1]]\naucRF = round(aucRF,2)\n</code></pre> <p>Plot the ROC curve with AUC displayed</p> <p>Input</p> <pre><code>plot(perf,main=\"ROC Curve\", sub = paste(\"AUC = \",aucRF) )\n</code></pre> <p>Output</p> <p></p>"}]}